{"version":3,"sources":["../src/constants.ts","../src/fetchers/getBalanceOf.ts","../src/fetchers/getStrategyPayload.ts","../src/fetchers/getVaultAprs.ts","../src/fetchers/getTotalSupply.ts","../src/fetchers/getVaultAprTimeseries.ts","../src/fetchers/getVaultMaxTickChange.ts","../src/fetchers/getVaultPosition.ts","../src/fetchers/getVaultReserves.ts","../src/utils/getSteerTokenRatios.ts","../src/utils/getAccountPosition.ts"],"sourcesContent":["import { ChainId } from 'sushi/chain'\n\nexport const STEER_SUPPORTED_CHAIN_IDS = [\n  ChainId.BASE,\n  ChainId.OPTIMISM,\n  ChainId.BSC,\n  ChainId.THUNDERCORE,\n  ChainId.POLYGON,\n  ChainId.METIS,\n  ChainId.POLYGON_ZKEVM,\n  ChainId.ARBITRUM,\n  ChainId.CELO,\n  ChainId.AVALANCHE,\n]\n\nexport const SteerChainIds = STEER_SUPPORTED_CHAIN_IDS\n\nexport type SteerChainId = (typeof STEER_SUPPORTED_CHAIN_IDS)[number]\n\nexport const isSteerChainId = (chainId: ChainId): chainId is SteerChainId =>\n  STEER_SUPPORTED_CHAIN_IDS.includes(chainId as SteerChainId)\n\nexport const STEER_PERIPHERY_ADDRESS: Record<SteerChainId, `0x${string}`> = {\n  [ChainId.BASE]: '0x16BA7102271dC83Fff2f709691c2B601DAD7668e',\n  [ChainId.OPTIMISM]: '0x7c464A0AB1f5ebf3E2dCccfec7EF41D02ED7a2f4',\n  [ChainId.BSC]: '0xe240B9a2936f6Fb8860219bC059349e50F03492e',\n  [ChainId.THUNDERCORE]: '0xab36D30C1A1C683037Bd7AAC67f29B2e3ECC6576',\n  [ChainId.POLYGON]: '0x29E1888F7DD0757f2873E494463Ec389dab38D27',\n  [ChainId.METIS]: '0x806c2240793b3738000fcb62C66BF462764B903F',\n  [ChainId.POLYGON_ZKEVM]: '0xcA19bEc25A41443F35EeAE03411Dce87D8c0Edc4',\n  [ChainId.ARBITRUM]: '0x806c2240793b3738000fcb62C66BF462764B903F',\n  [ChainId.CELO]: '0xdca3251Ebe8f85458E8d95813bCb816460e4bef1',\n  [ChainId.AVALANCHE]: '0x5D8249e3F5f702e1Fd720167b40424fc2daDCd1e',\n}\n","import { erc20Abi } from 'sushi/abi'\nimport { getChainIdAddressFromId } from 'sushi/format'\nimport type { Address, PublicClient } from 'viem'\n\ninterface GetBalanceOfsContracts {\n  account: Address\n  vaultIds: string[]\n}\n\nexport function getBalanceOfsContracts({\n  account,\n  vaultIds,\n}: GetBalanceOfsContracts) {\n  return vaultIds.map((id) => {\n    const { chainId, address } = getChainIdAddressFromId(id)\n\n    return {\n      abi: erc20Abi,\n      chainId,\n      address,\n      args: [account] as const,\n      functionName: 'balanceOf' as const,\n    }\n  })\n}\n\ninterface GetBalanceOfs extends GetBalanceOfsContracts {\n  client: PublicClient\n}\n\nexport async function getBalanceOfs({\n  client,\n  account,\n  vaultIds,\n}: GetBalanceOfs) {\n  const result = await client.multicall({\n    allowFailure: true,\n    contracts: getBalanceOfsContracts({ account, vaultIds }),\n  })\n\n  return result.flatMap((res, i) => {\n    if (typeof res.result === 'undefined') return []\n    return getBalanceOfsSelect(vaultIds[i]!, res.result)\n  })\n}\n\nexport function getBalanceOfsSelect(\n  vaultId: string,\n  result: bigint,\n): { vaultId: string; balance: bigint } {\n  return {\n    vaultId,\n    balance: result,\n  }\n}\n\ninterface GetBalanceOf {\n  client: PublicClient\n  account: Address\n  vaultId: string\n}\n\nexport async function getBalanceOf({ client, account, vaultId }: GetBalanceOf) {\n  const results = await getBalanceOfs({ client, account, vaultIds: [vaultId] })\n\n  if (!results[0]) {\n    throw new Error(`Failed to fetch balance of for vault ${vaultId}`)\n  }\n\n  return results[0]!.balance\n}\n","import { fetch } from '@whatwg-node/fetch'\nimport { isPromiseFulfilled } from 'sushi/validate'\n\ninterface Payload {\n  strategyConfigData: {\n    period: number\n    standardDeviations: number\n    poolFee: number\n    epochStart: number\n    epochLength: string\n    name: string\n    description: string\n    appImgUrl: string\n  }\n  vaultPayload: {\n    fee: number\n    slippage: number\n    ratioErrorTolerance: number\n    maxTicksChange: number\n    twapInterval: number\n  }\n}\n\ninterface GetStrategiesPayloads {\n  payloadHashes: string[]\n}\n\nexport async function getStrategiesPayloads({\n  payloadHashes,\n}: GetStrategiesPayloads) {\n  const results = await Promise.allSettled(\n    payloadHashes.map(async (payloadHash) => {\n      return fetch(`https://ipfs.io/ipfs/${payloadHash}`).then(\n        (res) => res.json() as Promise<Payload>,\n      )\n    }),\n  )\n\n  return results.map((r) => (isPromiseFulfilled(r) ? r.value : null))\n}\n\ninterface GetPayload {\n  payloadHash: string\n}\n\nexport async function getStrategyPayload({ payloadHash }: GetPayload) {\n  const results = await getStrategiesPayloads({ payloadHashes: [payloadHash] })\n\n  if (!results[0]) {\n    throw new Error(`Failed to fetch payload for hash ${payloadHash}`)\n  }\n\n  return results[0]\n}\n","import { fetch } from '@whatwg-node/fetch'\nimport { isPromiseFulfilled } from 'sushi'\nimport { getChainIdAddressFromId } from 'sushi/format'\n\ninterface GetVaultsAprs {\n  vaultIds: string[]\n}\n\nasync function getApr(\n  chainId: number,\n  address: string,\n  interval?: number,\n): Promise<number | string> {\n  let url = `https://ro81h8hq6b.execute-api.us-east-1.amazonaws.com/pool/fee-apr?address=${address}&chain=${chainId}`\n  if (interval) {\n    url += `&interval=${interval}`\n  }\n\n  return fetch(url)\n    .then((res) => res.json())\n    .then((res) => res?.apr)\n}\n\nexport async function getVaultsAprs({ vaultIds }: GetVaultsAprs) {\n  const results = await Promise.allSettled(\n    vaultIds.map(async (vaultId) => {\n      const { address, chainId } = getChainIdAddressFromId(vaultId)\n\n      const aprs = await Promise.all([\n        getApr(chainId, address),\n        getApr(chainId, address, 86400),\n        getApr(chainId, address, 604800),\n      ])\n\n      if (aprs.some((apr) => typeof apr === 'undefined')) {\n        throw new Error(\"Couldn't fetch APR\")\n      }\n\n      const [apr, apr1d, apr1w] = aprs.map((apr) => Number(apr) / 100) as [\n        number,\n        number,\n        number,\n      ]\n\n      return {\n        apr,\n        apr1d,\n        apr1w,\n      }\n    }),\n  )\n\n  return results.map((r) => (isPromiseFulfilled(r) ? r.value : null))\n}\n\ninterface GetVaultsApr {\n  vaultId: string\n}\n\nexport async function getVaultAprs({ vaultId }: GetVaultsApr) {\n  const results = await getVaultsAprs({ vaultIds: [vaultId] })\n\n  if (!results[0]) {\n    throw new Error(`Failed to fetch APR for vault ${vaultId}`)\n  }\n\n  return results[0]\n}\n","import { erc20Abi } from 'sushi/abi'\nimport { getChainIdAddressFromId } from 'sushi/format'\nimport type { PublicClient } from 'viem'\n\ninterface GetTotalSuppliesContracts {\n  vaultIds: string[]\n}\n\nexport function getTotalSuppliesContracts({\n  vaultIds,\n}: GetTotalSuppliesContracts) {\n  return vaultIds.map((id) => {\n    const { chainId, address } = getChainIdAddressFromId(id)\n\n    return {\n      abi: erc20Abi,\n      chainId,\n      address,\n      functionName: 'totalSupply' as const,\n    }\n  })\n}\n\ninterface GetTotalSupplies extends GetTotalSuppliesContracts {\n  client: PublicClient\n}\n\nexport async function getTotalSupplies({ client, vaultIds }: GetTotalSupplies) {\n  const result = await client.multicall({\n    allowFailure: true,\n    contracts: getTotalSuppliesContracts({ vaultIds }),\n  })\n\n  return result.flatMap((res, i) => {\n    if (typeof res.result === 'undefined') return []\n    return getTotalSuppliesSelect(vaultIds[i]!, res.result)\n  })\n}\n\nexport function getTotalSuppliesSelect(\n  vaultId: string,\n  result: bigint,\n): { vaultId: string; totalSupply: bigint } {\n  return {\n    vaultId,\n    totalSupply: result,\n  }\n}\n\ninterface GetTotalSupply {\n  client: PublicClient\n  vaultId: string\n}\n\nexport async function getTotalSupply({ client, vaultId }: GetTotalSupply) {\n  const results = await getTotalSupplies({ client, vaultIds: [vaultId] })\n\n  if (!results[0]) {\n    throw new Error(`Failed to fetch total supply for vault ${vaultId}`)\n  }\n\n  return results[0]!.totalSupply\n}\n","import { fetch } from '@whatwg-node/fetch'\nimport { isPromiseFulfilled } from 'sushi'\nimport { getChainIdAddressFromId } from 'sushi/format'\n\ninterface GetVaultsAprs {\n  vaultIds: string[]\n}\n\ninterface AprTimeseries {\n  data: {\n    startTime: number\n    endTime: number\n    feeApr: number\n  }[]\n  message: string\n}\n\nasync function getAprTimeseries(\n  chainId: number,\n  address: string,\n): Promise<AprTimeseries['data']> {\n  const url = `https://ro81h8hq6b.execute-api.us-east-1.amazonaws.com/pool/apr/historical?address=${address}&chain=${chainId}`\n\n  return fetch(url)\n    .then((res) => res.json() as Promise<AprTimeseries>)\n    .then((res) => res?.data)\n}\n\nexport async function getVaultsAprTimeseries({ vaultIds }: GetVaultsAprs) {\n  const results = await Promise.allSettled(\n    vaultIds.map(async (vaultId) => {\n      const { address, chainId } = getChainIdAddressFromId(vaultId)\n\n      return getAprTimeseries(chainId, address)\n    }),\n  )\n\n  return results.map((r) => (isPromiseFulfilled(r) ? r.value : null))\n}\n\ninterface GetVaultsApr {\n  vaultId: string\n}\n\nexport async function getSteerVaultAprTimeseries({ vaultId }: GetVaultsApr) {\n  const results = await getVaultsAprTimeseries({ vaultIds: [vaultId] })\n\n  if (!results[0]) {\n    throw new Error(`Failed to fetch APR timeseries for vault ${vaultId}`)\n  }\n\n  return results[0]\n}\n","import { getChainIdAddressFromId } from 'sushi/format'\nimport type { PublicClient } from 'viem'\n\nimport { steerMultiPositionManager } from '../abi/steerMultiPositionManager.js'\n\ninterface GetVaultsMaxTickChanges {\n  client: PublicClient\n  vaultIds: string[]\n}\n\nexport async function getVaultsMaxTickChanges({\n  client,\n  vaultIds,\n}: GetVaultsMaxTickChanges) {\n  const result = await client.multicall({\n    allowFailure: true,\n    contracts: vaultIds.map((id) => {\n      const { chainId, address } = getChainIdAddressFromId(id)\n\n      return {\n        abi: steerMultiPositionManager,\n        chainId,\n        address,\n        functionName: 'maxTickChange' as const,\n      }\n    }),\n  })\n\n  return result.flatMap((res, i) => {\n    if (typeof res.result === 'undefined') return []\n    return getVaultsMaxTickChangesSelect(vaultIds[i]!, res.result)\n  })\n}\n\nexport function getVaultsMaxTickChangesSelect(vaultId: string, result: number) {\n  return {\n    vaultId,\n    maxTickChange: result,\n  }\n}\n\ninterface GetVaultMaxTickChange {\n  client: PublicClient\n  vaultId: string\n}\n\nexport async function getVaultMaxTickChange({\n  client,\n  vaultId,\n}: GetVaultMaxTickChange) {\n  const results = await getVaultsMaxTickChanges({ client, vaultIds: [vaultId] })\n\n  if (!results[0]) {\n    throw new Error(`Failed to fetch max tick change for vault ${vaultId}`)\n  }\n\n  return results[0]\n}\n","import { getChainIdAddressFromId } from 'sushi/format'\nimport type { PublicClient } from 'viem'\n\nimport { steerMultiPositionManager } from '../abi/steerMultiPositionManager.js'\n\ninterface GetVaultPositionsContracts {\n  vaultIds: string[]\n}\n\nexport function getVaultPositionsContracts({\n  vaultIds,\n}: GetVaultPositionsContracts) {\n  return vaultIds.map((id) => {\n    const { chainId, address } = getChainIdAddressFromId(id)\n\n    return {\n      abi: steerMultiPositionManager,\n      chainId,\n      address,\n      functionName: 'getPositions' as const,\n    }\n  })\n}\n\ninterface GetVaultsPositions extends GetVaultPositionsContracts {\n  client: PublicClient\n}\n\nexport async function getVaultsPositions({\n  client,\n  vaultIds,\n}: GetVaultsPositions) {\n  const result = await client.multicall({\n    allowFailure: true,\n    contracts: getVaultPositionsContracts({ vaultIds }),\n  })\n\n  return result.flatMap((res, i) => {\n    if (typeof res.result === 'undefined') return []\n    return getVaultsPositionSelect(vaultIds[i]!, res.result)\n  })\n}\n\nexport function getVaultsPositionSelect(\n  vaultId: string,\n  result: Readonly<\n    [Readonly<number[]>, Readonly<number[]>, Readonly<number[]>]\n  >,\n) {\n  const lowerTicks = result[0]\n  const upperTicks = result[1]\n  const relativeWeights = result[2]\n\n  return lowerTicks.map((_, i) => ({\n    vaultId,\n    lowerTick: BigInt(lowerTicks[i]!.toString()),\n    upperTick: BigInt(upperTicks[i]!.toString()),\n    relativeWeight: BigInt(relativeWeights[i]!.toString()),\n  }))\n}\n\ninterface GetVaultPositions {\n  client: PublicClient\n  vaultId: string\n}\n\nexport async function getVaultPositions({\n  client,\n  vaultId,\n}: GetVaultPositions) {\n  const results = await getVaultsPositions({ client, vaultIds: [vaultId] })\n  return results\n}\n","import { getChainIdAddressFromId } from 'sushi/format'\nimport type { PublicClient } from 'viem'\nimport { steerPeripheryAbi } from '../abi/steerPeripheryAbi'\nimport { STEER_PERIPHERY_ADDRESS, isSteerChainId } from '../constants'\n\ninterface GetVaultsReservesContracts {\n  vaultIds: string[]\n}\n\nexport function getVaultsReservesContracts({\n  vaultIds,\n}: GetVaultsReservesContracts) {\n  return vaultIds.map((id) => {\n    const { chainId, address } = getChainIdAddressFromId(id)\n\n    if (!isSteerChainId(chainId)) throw new Error(`Invalid chainId: ${chainId}`)\n\n    const steerPeriphery = STEER_PERIPHERY_ADDRESS[chainId]\n\n    return {\n      abi: steerPeripheryAbi,\n      address: steerPeriphery,\n      chainId,\n      args: [address] as const,\n      functionName: 'vaultBalancesByAddressWithFees' as const,\n    }\n  })\n}\n\ninterface GetVaultsReserves extends GetVaultsReservesContracts {\n  client: PublicClient\n}\n\nexport async function getVaultsReserves({\n  client,\n  vaultIds,\n}: GetVaultsReserves) {\n  const result = await client.multicall({\n    allowFailure: true,\n    contracts: getVaultsReservesContracts({ vaultIds }),\n  })\n\n  return result.map((res, i) => {\n    if (typeof res.result === 'undefined') return null\n    return getVaultsReservesSelect(vaultIds[i]!, res.result)\n  })\n}\n\nexport function getVaultsReservesSelect(\n  vaultId: string,\n  result: { amountToken0: bigint; amountToken1: bigint },\n) {\n  return {\n    vaultId,\n    reserve0: result.amountToken0,\n    reserve1: result.amountToken1,\n  }\n}\n\ninterface GetVaultReserves {\n  client: PublicClient\n  vaultId: string\n}\n\nexport async function getVaultReserves({ client, vaultId }: GetVaultReserves) {\n  const results = await getVaultsReserves({ client, vaultIds: [vaultId] })\n\n  if (!results[0]) {\n    throw new Error(`Failed to fetch reserves for vaultId: ${vaultId}`)\n  }\n\n  return results[0]!\n}\n","import { getAddress } from 'viem'\n\ninterface GetTokenRatiosProps {\n  vault: {\n    chainId: number\n    token0: {\n      address: string\n      decimals: number\n    }\n    token1: {\n      address: string\n      decimals: number\n    }\n    reserve0: string\n    reserve1: string\n  }\n  prices: Record<string, number>\n}\n\nasync function getTokenRatios({ vault, prices }: GetTokenRatiosProps) {\n  const token0PriceUSD = prices[getAddress(vault.token0.address)] || 0\n  const token1PriceUSD = prices[getAddress(vault.token1.address)] || 0\n\n  const reserve0 = Number(vault.reserve0) / 10 ** vault.token0.decimals\n  const reserve1 = Number(vault.reserve1) / 10 ** vault.token1.decimals\n\n  const reserve0USD = reserve0 * token0PriceUSD\n  const reserve1USD = reserve1 * token1PriceUSD\n\n  const totalReserveUSD = reserve0USD + reserve1USD\n\n  if (totalReserveUSD === 0) return { token0: 0, token1: 0 }\n\n  let [token0, token1] = [\n    reserve0USD / totalReserveUSD,\n    reserve1USD / totalReserveUSD,\n  ]\n\n  token0 = token0 < 0.00001 ? 0 : Math.min(token0, 1)\n  token1 = token1 < 0.00001 ? 0 : Math.min(token1, 1)\n\n  return {\n    token0,\n    token1,\n  }\n}\n\nexport { getTokenRatios }\n","import { getChainIdAddressFromId } from 'sushi/format'\n\ninterface GetAccountPositions {\n  accountBalances: { vaultId: string; balance: bigint }[]\n  totalSupplies: { vaultId: string; totalSupply: bigint }[]\n  vaultReserves: {\n    vaultId: string\n    reserve0: bigint\n    reserve1: bigint\n  }[]\n}\n\nexport function getAccountPositions({\n  accountBalances,\n  totalSupplies,\n  vaultReserves,\n}: GetAccountPositions) {\n  if (\n    accountBalances.length !== totalSupplies.length ||\n    accountBalances.length !== vaultReserves.length\n  ) {\n    throw new Error(\n      'accountBalances, totalSupplies, and vaultReserves must be the same length',\n    )\n  }\n\n  const vaultIds = accountBalances.map((_) => _.vaultId)\n\n  return vaultIds.flatMap((vaultId) => {\n    const accountBalanceEl = accountBalances.find((_) => _.vaultId === vaultId)\n    const totalSupplyEl = totalSupplies.find((_) => _.vaultId === vaultId)\n    const vaultReserveEl = vaultReserves.find((_) => _.vaultId === vaultId)\n\n    if (!accountBalanceEl || !totalSupplyEl || !vaultReserveEl) {\n      return []\n    }\n\n    const accountBalance = accountBalanceEl.balance\n    const totalSupply = totalSupplyEl.totalSupply\n    const vaultReserve = vaultReserveEl\n\n    let token0Balance = 0n\n    let token1Balance = 0n\n\n    if (totalSupply !== 0n) {\n      token0Balance = (vaultReserve.reserve0 * accountBalance) / totalSupply\n      token1Balance = (vaultReserve.reserve1 * accountBalance) / totalSupply\n    }\n\n    const { address, chainId } = getChainIdAddressFromId(vaultId)\n    return {\n      id: vaultId,\n      address,\n      chainId,\n      steerTokenSupply: totalSupply,\n      steerTokenBalance: accountBalance,\n      token0Balance,\n      token1Balance,\n    }\n  })\n}\n\ninterface GetAccountPosition {\n  vaultId: string\n  accountBalance: bigint\n  totalSupply: bigint\n  vaultReserves: {\n    reserve0: bigint\n    reserve1: bigint\n  }\n}\n\nexport async function getAccountPosition({\n  vaultId,\n  accountBalance,\n  totalSupply,\n  vaultReserves,\n}: GetAccountPosition) {\n  return getAccountPositions({\n    accountBalances: [{ vaultId, balance: accountBalance }],\n    totalSupplies: [{ vaultId, totalSupply }],\n    vaultReserves: [{ vaultId, ...vaultReserves }],\n  })[0]\n}\n"],"mappings":"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","names":["ChainId","STEER_SUPPORTED_CHAIN_IDS","SteerChainIds","isSteerChainId","chainId","STEER_PERIPHERY_ADDRESS","erc20Abi","getChainIdAddressFromId","getBalanceOfsContracts","account","vaultIds","id","chainId","address","getBalanceOfs","client","res","getBalanceOfsSelect","vaultId","result","getBalanceOf","results","fetch","isPromiseFulfilled","getStrategiesPayloads","payloadHashes","payloadHash","res","getStrategyPayload","results","fetch","isPromiseFulfilled","getChainIdAddressFromId","getApr","chainId","address","interval","url","res","getVaultsAprs","vaultIds","vaultId","aprs","apr","apr1d","apr1w","getVaultAprs","results","erc20Abi","getChainIdAddressFromId","getTotalSuppliesContracts","vaultIds","id","chainId","address","getTotalSupplies","client","res","i","getTotalSuppliesSelect","vaultId","result","getTotalSupply","results","fetch","isPromiseFulfilled","getChainIdAddressFromId","getAprTimeseries","chainId","address","url","res","getVaultsAprTimeseries","vaultIds","vaultId","getSteerVaultAprTimeseries","results","getChainIdAddressFromId","getVaultsMaxTickChanges","client","vaultIds","id","chainId","address","getChainIdAddressFromId","steerMultiPositionManager","res","i","getVaultsMaxTickChangesSelect","vaultId","result","getVaultMaxTickChange","results","getChainIdAddressFromId","getVaultPositionsContracts","vaultIds","id","chainId","address","getChainIdAddressFromId","steerMultiPositionManager","getVaultsPositions","client","res","i","getVaultsPositionSelect","vaultId","result","lowerTicks","upperTicks","relativeWeights","_","getVaultPositions","getChainIdAddressFromId","getVaultsReservesContracts","vaultIds","id","chainId","address","getChainIdAddressFromId","isSteerChainId","steerPeriphery","STEER_PERIPHERY_ADDRESS","steerPeripheryAbi","getVaultsReserves","client","res","i","getVaultsReservesSelect","vaultId","result","getVaultReserves","results","getAddress","getTokenRatios","vault","prices","token0PriceUSD","token1PriceUSD","reserve0","reserve1","reserve0USD","reserve1USD","totalReserveUSD","token0","token1","getChainIdAddressFromId","getAccountPositions","accountBalances","totalSupplies","vaultReserves","_","vaultId","accountBalanceEl","totalSupplyEl","vaultReserveEl","accountBalance","totalSupply","vaultReserve","token0Balance","token1Balance","address","chainId","getAccountPosition"]}