schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Bonds_Aggregation_interval {
  hour
  day
}

"""
The BalancerWeightedPool entity contains the details of a BalancerWeightedPool Token.

"""
type Bonds_BalancerWeightedPool {
  """
  Unique ID for the BalancerWeightedPool entity, in the format:
  [chain Id]_[pool address]
  
  """
  id: String!
  """
  The pool's vault address.
  
  """
  vaultAddress: String!
  """
  The pool's ID, for use in calls to vault functions.
  
  """
  poolId: String!
  """
  A list of the Tokens which make up the vault.
  
  """
  constituentTokens(skip: Int = 0, first: Int = 100, orderBy: Bonds_Token_orderBy, orderDirection: Bonds_OrderDirection, where: Bonds_Token_filter): [Bonds_Token!]!
}

input Bonds_BalancerWeightedPool_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  vaultAddress: String
  vaultAddress_not: String
  vaultAddress_gt: String
  vaultAddress_lt: String
  vaultAddress_gte: String
  vaultAddress_lte: String
  vaultAddress_in: [String!]
  vaultAddress_not_in: [String!]
  vaultAddress_contains: String
  vaultAddress_contains_nocase: String
  vaultAddress_not_contains: String
  vaultAddress_not_contains_nocase: String
  vaultAddress_starts_with: String
  vaultAddress_starts_with_nocase: String
  vaultAddress_not_starts_with: String
  vaultAddress_not_starts_with_nocase: String
  vaultAddress_ends_with: String
  vaultAddress_ends_with_nocase: String
  vaultAddress_not_ends_with: String
  vaultAddress_not_ends_with_nocase: String
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  constituentTokens: [String!]
  constituentTokens_not: [String!]
  constituentTokens_contains: [String!]
  constituentTokens_contains_nocase: [String!]
  constituentTokens_not_contains: [String!]
  constituentTokens_not_contains_nocase: [String!]
  constituentTokens_: Bonds_Token_filter
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_BalancerWeightedPool_filter]
  or: [Bonds_BalancerWeightedPool_filter]
}

enum Bonds_BalancerWeightedPool_orderBy {
  id
  vaultAddress
  poolId
  constituentTokens
}

scalar Bonds_BigDecimal

scalar BigInt

input Bonds_BlockChangedFilter {
  number_gte: Int!
}

input Bonds_Block_height {
  hash: Bonds_Bytes
  number: Int
  number_gte: Int
}

"""
The BondPurchase entity tracks individual bond purchases.

"""
type Bonds_BondPurchase {
  """
  The transaction hash is used as the BondPurchase ID.
  
  """
  id: String!
  """
  The ID of the Market from which the bond was purchased.
  
  """
  market: Bonds_Market!
  """
  The owner address of the Market from which the bond was purchased.
  
  """
  owner: String!
  """
  The amount of quote tokens paid.
  
  """
  amount: Bonds_BigDecimal!
  """
  The amount of payout tokens purchased.
  
  """
  payout: Bonds_BigDecimal!
  """
  The purchaser's address.
  
  """
  recipient: String!
  """
  The frontend referrer address.
  
  """
  referrer: String!
  """
  The time of the purchase.
  
  """
  timestamp: BigInt!
  """
  The address of the relevant Teller contract.
  
  """
  teller: String!
  """
  The address of the relevant Auctioneer contract.
  
  """
  auctioneer: String!
  """
  A reference to the payout Token record.
  
  """
  payoutToken: Bonds_Token!
  """
  A reference to the quote Token record.
  
  """
  quoteToken: Bonds_Token!
  """
  The network name, as used by Graph Protocol.
  **NOTE** This may not be the same as the name as used by wallets.
  As such, we use the chainId field to identify networks in our frontend.
  
  """
  network: String!
  """
  The numeric chain ID on which the contracts are deployed.
  
  """
  chainId: BigInt!
  """
  The price at which the bond was purchased.
  **NOTE** this is quoteToken amount / payoutToken amount, it is NOT a USD price.
  
  """
  purchasePrice: Bonds_BigDecimal!
  """
  The new bond price, updated after the purchase.
  **NOTE** this is the Auctioneer contract's marketPrice adjusted for marketScale, it is NOT a USD price.
  
  """
  postPurchasePrice: Bonds_BigDecimal!
  """
  A reference to the OwnerTokenTbv record for this chain/owner/token combination.
  
  """
  ownerTokenTbv: Bonds_OwnerTokenTbv
  """
  A reference to the PayoutTokenTbv record for this chain/owner/token combination.
  
  """
  payoutTokenTbv: Bonds_PayoutTokenTbv
}

input Bonds_BondPurchase_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Bonds_Market_filter
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  amount: Bonds_BigDecimal
  amount_not: Bonds_BigDecimal
  amount_gt: Bonds_BigDecimal
  amount_lt: Bonds_BigDecimal
  amount_gte: Bonds_BigDecimal
  amount_lte: Bonds_BigDecimal
  amount_in: [Bonds_BigDecimal!]
  amount_not_in: [Bonds_BigDecimal!]
  payout: Bonds_BigDecimal
  payout_not: Bonds_BigDecimal
  payout_gt: Bonds_BigDecimal
  payout_lt: Bonds_BigDecimal
  payout_gte: Bonds_BigDecimal
  payout_lte: Bonds_BigDecimal
  payout_in: [Bonds_BigDecimal!]
  payout_not_in: [Bonds_BigDecimal!]
  recipient: String
  recipient_not: String
  recipient_gt: String
  recipient_lt: String
  recipient_gte: String
  recipient_lte: String
  recipient_in: [String!]
  recipient_not_in: [String!]
  recipient_contains: String
  recipient_contains_nocase: String
  recipient_not_contains: String
  recipient_not_contains_nocase: String
  recipient_starts_with: String
  recipient_starts_with_nocase: String
  recipient_not_starts_with: String
  recipient_not_starts_with_nocase: String
  recipient_ends_with: String
  recipient_ends_with_nocase: String
  recipient_not_ends_with: String
  recipient_not_ends_with_nocase: String
  referrer: String
  referrer_not: String
  referrer_gt: String
  referrer_lt: String
  referrer_gte: String
  referrer_lte: String
  referrer_in: [String!]
  referrer_not_in: [String!]
  referrer_contains: String
  referrer_contains_nocase: String
  referrer_not_contains: String
  referrer_not_contains_nocase: String
  referrer_starts_with: String
  referrer_starts_with_nocase: String
  referrer_not_starts_with: String
  referrer_not_starts_with_nocase: String
  referrer_ends_with: String
  referrer_ends_with_nocase: String
  referrer_not_ends_with: String
  referrer_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  teller: String
  teller_not: String
  teller_gt: String
  teller_lt: String
  teller_gte: String
  teller_lte: String
  teller_in: [String!]
  teller_not_in: [String!]
  teller_contains: String
  teller_contains_nocase: String
  teller_not_contains: String
  teller_not_contains_nocase: String
  teller_starts_with: String
  teller_starts_with_nocase: String
  teller_not_starts_with: String
  teller_not_starts_with_nocase: String
  teller_ends_with: String
  teller_ends_with_nocase: String
  teller_not_ends_with: String
  teller_not_ends_with_nocase: String
  auctioneer: String
  auctioneer_not: String
  auctioneer_gt: String
  auctioneer_lt: String
  auctioneer_gte: String
  auctioneer_lte: String
  auctioneer_in: [String!]
  auctioneer_not_in: [String!]
  auctioneer_contains: String
  auctioneer_contains_nocase: String
  auctioneer_not_contains: String
  auctioneer_not_contains_nocase: String
  auctioneer_starts_with: String
  auctioneer_starts_with_nocase: String
  auctioneer_not_starts_with: String
  auctioneer_not_starts_with_nocase: String
  auctioneer_ends_with: String
  auctioneer_ends_with_nocase: String
  auctioneer_not_ends_with: String
  auctioneer_not_ends_with_nocase: String
  payoutToken: String
  payoutToken_not: String
  payoutToken_gt: String
  payoutToken_lt: String
  payoutToken_gte: String
  payoutToken_lte: String
  payoutToken_in: [String!]
  payoutToken_not_in: [String!]
  payoutToken_contains: String
  payoutToken_contains_nocase: String
  payoutToken_not_contains: String
  payoutToken_not_contains_nocase: String
  payoutToken_starts_with: String
  payoutToken_starts_with_nocase: String
  payoutToken_not_starts_with: String
  payoutToken_not_starts_with_nocase: String
  payoutToken_ends_with: String
  payoutToken_ends_with_nocase: String
  payoutToken_not_ends_with: String
  payoutToken_not_ends_with_nocase: String
  payoutToken_: Bonds_Token_filter
  quoteToken: String
  quoteToken_not: String
  quoteToken_gt: String
  quoteToken_lt: String
  quoteToken_gte: String
  quoteToken_lte: String
  quoteToken_in: [String!]
  quoteToken_not_in: [String!]
  quoteToken_contains: String
  quoteToken_contains_nocase: String
  quoteToken_not_contains: String
  quoteToken_not_contains_nocase: String
  quoteToken_starts_with: String
  quoteToken_starts_with_nocase: String
  quoteToken_not_starts_with: String
  quoteToken_not_starts_with_nocase: String
  quoteToken_ends_with: String
  quoteToken_ends_with_nocase: String
  quoteToken_not_ends_with: String
  quoteToken_not_ends_with_nocase: String
  quoteToken_: Bonds_Token_filter
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  purchasePrice: Bonds_BigDecimal
  purchasePrice_not: Bonds_BigDecimal
  purchasePrice_gt: Bonds_BigDecimal
  purchasePrice_lt: Bonds_BigDecimal
  purchasePrice_gte: Bonds_BigDecimal
  purchasePrice_lte: Bonds_BigDecimal
  purchasePrice_in: [Bonds_BigDecimal!]
  purchasePrice_not_in: [Bonds_BigDecimal!]
  postPurchasePrice: Bonds_BigDecimal
  postPurchasePrice_not: Bonds_BigDecimal
  postPurchasePrice_gt: Bonds_BigDecimal
  postPurchasePrice_lt: Bonds_BigDecimal
  postPurchasePrice_gte: Bonds_BigDecimal
  postPurchasePrice_lte: Bonds_BigDecimal
  postPurchasePrice_in: [Bonds_BigDecimal!]
  postPurchasePrice_not_in: [Bonds_BigDecimal!]
  ownerTokenTbv: String
  ownerTokenTbv_not: String
  ownerTokenTbv_gt: String
  ownerTokenTbv_lt: String
  ownerTokenTbv_gte: String
  ownerTokenTbv_lte: String
  ownerTokenTbv_in: [String!]
  ownerTokenTbv_not_in: [String!]
  ownerTokenTbv_contains: String
  ownerTokenTbv_contains_nocase: String
  ownerTokenTbv_not_contains: String
  ownerTokenTbv_not_contains_nocase: String
  ownerTokenTbv_starts_with: String
  ownerTokenTbv_starts_with_nocase: String
  ownerTokenTbv_not_starts_with: String
  ownerTokenTbv_not_starts_with_nocase: String
  ownerTokenTbv_ends_with: String
  ownerTokenTbv_ends_with_nocase: String
  ownerTokenTbv_not_ends_with: String
  ownerTokenTbv_not_ends_with_nocase: String
  ownerTokenTbv_: Bonds_OwnerTokenTbv_filter
  payoutTokenTbv: String
  payoutTokenTbv_not: String
  payoutTokenTbv_gt: String
  payoutTokenTbv_lt: String
  payoutTokenTbv_gte: String
  payoutTokenTbv_lte: String
  payoutTokenTbv_in: [String!]
  payoutTokenTbv_not_in: [String!]
  payoutTokenTbv_contains: String
  payoutTokenTbv_contains_nocase: String
  payoutTokenTbv_not_contains: String
  payoutTokenTbv_not_contains_nocase: String
  payoutTokenTbv_starts_with: String
  payoutTokenTbv_starts_with_nocase: String
  payoutTokenTbv_not_starts_with: String
  payoutTokenTbv_not_starts_with_nocase: String
  payoutTokenTbv_ends_with: String
  payoutTokenTbv_ends_with_nocase: String
  payoutTokenTbv_not_ends_with: String
  payoutTokenTbv_not_ends_with_nocase: String
  payoutTokenTbv_: Bonds_PayoutTokenTbv_filter
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_BondPurchase_filter]
  or: [Bonds_BondPurchase_filter]
}

enum Bonds_BondPurchase_orderBy {
  id
  market
  market__id
  market__name
  market__type
  market__network
  market__chainId
  market__auctioneer
  market__teller
  market__marketId
  market__owner
  market__vesting
  market__start
  market__conclusion
  market__vestingType
  market__isInstantSwap
  market__hasClosed
  market__totalBondedAmount
  market__totalPayoutAmount
  market__creationBlockTimestamp
  market__callbackAddress
  market__capacity
  market__capacityInQuote
  market__minPrice
  market__price
  market__scale
  market__averageBondPrice
  market__bondsIssued
  owner
  amount
  payout
  recipient
  referrer
  timestamp
  teller
  auctioneer
  payoutToken
  payoutToken__id
  payoutToken__network
  payoutToken__chainId
  payoutToken__address
  payoutToken__decimals
  payoutToken__symbol
  payoutToken__name
  payoutToken__typeName
  payoutToken__usedAsPayout
  payoutToken__usedAsQuote
  payoutToken__totalPayoutAmount
  payoutToken__purchaseCount
  quoteToken
  quoteToken__id
  quoteToken__network
  quoteToken__chainId
  quoteToken__address
  quoteToken__decimals
  quoteToken__symbol
  quoteToken__name
  quoteToken__typeName
  quoteToken__usedAsPayout
  quoteToken__usedAsQuote
  quoteToken__totalPayoutAmount
  quoteToken__purchaseCount
  network
  chainId
  purchasePrice
  postPurchasePrice
  ownerTokenTbv
  ownerTokenTbv__id
  ownerTokenTbv__owner
  ownerTokenTbv__token
  ownerTokenTbv__network
  ownerTokenTbv__chainId
  ownerTokenTbv__tbv
  payoutTokenTbv
  payoutTokenTbv__id
  payoutTokenTbv__network
  payoutTokenTbv__chainId
  payoutTokenTbv__tbv
}

"""
A BondToken record is created to track vesting tokens, both ERC-20 and ERC-1155, created by our contracts.

"""
type Bonds_BondToken {
  """
  Unique ID for the BondToken entity. In the case of an ERC-20 token, this will be the token's address. In the case of an ERC-1155 token, it will be the token's ID.
  
  """
  id: String!
  """
  The number of decimals if an ERC-20, null if an ERC-1155.
  
  """
  decimals: BigInt
  """
  The token symbol if an ERC-20, null if an ERC-1155.
  
  """
  symbol: String
  """
  A reference to the Token which will be paid out upon vesting.
  
  """
  underlying: Bonds_Token!
  """
  Timestamp at which vesting completes.
  
  """
  expiry: BigInt!
  """
  The address of the relevant Teller contract.
  
  """
  teller: String!
  """
  The network name, as used by Graph Protocol.
  **NOTE** This may not be the same as the name as used by wallets.
  As such, we use the chainId field to identify networks in our frontend.
  
  """
  network: String!
  """
  The numeric chain ID on which the contracts are deployed.
  
  """
  chainId: BigInt!
  """
  The type of bond, either "fixed-term" or "fixed-expiration".
  
  """
  type: String!
}

input Bonds_BondToken_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  underlying: String
  underlying_not: String
  underlying_gt: String
  underlying_lt: String
  underlying_gte: String
  underlying_lte: String
  underlying_in: [String!]
  underlying_not_in: [String!]
  underlying_contains: String
  underlying_contains_nocase: String
  underlying_not_contains: String
  underlying_not_contains_nocase: String
  underlying_starts_with: String
  underlying_starts_with_nocase: String
  underlying_not_starts_with: String
  underlying_not_starts_with_nocase: String
  underlying_ends_with: String
  underlying_ends_with_nocase: String
  underlying_not_ends_with: String
  underlying_not_ends_with_nocase: String
  underlying_: Bonds_Token_filter
  expiry: BigInt
  expiry_not: BigInt
  expiry_gt: BigInt
  expiry_lt: BigInt
  expiry_gte: BigInt
  expiry_lte: BigInt
  expiry_in: [BigInt!]
  expiry_not_in: [BigInt!]
  teller: String
  teller_not: String
  teller_gt: String
  teller_lt: String
  teller_gte: String
  teller_lte: String
  teller_in: [String!]
  teller_not_in: [String!]
  teller_contains: String
  teller_contains_nocase: String
  teller_not_contains: String
  teller_not_contains_nocase: String
  teller_starts_with: String
  teller_starts_with_nocase: String
  teller_not_starts_with: String
  teller_not_starts_with_nocase: String
  teller_ends_with: String
  teller_ends_with_nocase: String
  teller_not_ends_with: String
  teller_not_ends_with_nocase: String
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_BondToken_filter]
  or: [Bonds_BondToken_filter]
}

enum Bonds_BondToken_orderBy {
  id
  decimals
  symbol
  underlying
  underlying__id
  underlying__network
  underlying__chainId
  underlying__address
  underlying__decimals
  underlying__symbol
  underlying__name
  underlying__typeName
  underlying__usedAsPayout
  underlying__usedAsQuote
  underlying__totalPayoutAmount
  underlying__purchaseCount
  expiry
  teller
  network
  chainId
  type
}

scalar Bonds_Bytes

"""
8 bytes signed integer

"""
scalar Bonds_Int8

"""
The Market entity tracks all bond markets which have been created, whether currently open or closed.

"""
type Bonds_Market {
  """
  Unique ID for the Market entity, in the format:
  [chainId]_[auctioneer contract name]_[market id]
  **NOTE** At the time of writing, contract name will be either 'BondFixedTermCDA' or BondFixedExpCDA. More will be added in the future as different auctioneer types become available.
  
  """
  id: String!
  """
  The Auctioneer contract name.
  
  """
  name: String!
  """
  The type of Market.
  
  """
  type: String!
  """
  The network name, as used by Graph Protocol.
  **NOTE** This may not be the same as the name as used by wallets.
  As such, we use the chainId field to identify networks in our frontend.
  
  """
  network: String!
  """
  The numeric chain ID on which the contracts are deployed.
  
  """
  chainId: BigInt!
  """
  The address of the Market's Auctioneer contract.
  
  """
  auctioneer: String!
  """
  The address of the Market's Teller contract.
  
  """
  teller: String!
  """
  The Market's ID for use with the Auctioneer.
  
  """
  marketId: BigInt!
  """
  The address of the Market owner.
  
  """
  owner: String!
  """
  A reference to the payout Token record.
  
  """
  payoutToken: Bonds_Token!
  """
  A reference to the quote Token record.
  
  """
  quoteToken: Bonds_Token!
  """
  The Market's vesting time. In the case of fixed expiry markets, this will be a timestamp. In the case of fixed term markets, it will be the vesting duration in seconds.
  
  """
  vesting: BigInt!
  """
  The Market's start time (for supported Market types)
  
  """
  start: BigInt
  """
  The Market's conclusion time
  
  """
  conclusion: BigInt
  """
  The type of vesting for the market. At the time of writing, this will be either "fixed-term" or "fixed-expiration". More options may be added in the future if new vesting types become available.
  
  """
  vestingType: String!
  """
  Whether or not the Market is an instant swap market.
  
  """
  isInstantSwap: Boolean!
  """
  Whether or not the Market has been closed.
  
  """
  hasClosed: Boolean!
  """
  The total amount of quote tokens bonded for this market.
  **NOTE** This is the number of quote tokens, NOT their USD value.
  
  """
  totalBondedAmount: Bonds_BigDecimal!
  """
  The total amount of payout tokens purchased through this market.
  **NOTE** This is the number of payout tokens, NOT their USD value.
  
  """
  totalPayoutAmount: Bonds_BigDecimal!
  """
  The timestamp of the block in which the Market was created.
  
  """
  creationBlockTimestamp: BigInt!
  """
  The address of the Market callback contract, if specified. 0x0000000000000000000000000000000000000000 if there is no callback contract.
  
  """
  callbackAddress: String!
  """
  The current capacity of the Market. This can be in either the quote or payout Token, according to the value of the capacityInQuote field.
  
  """
  capacity: BigInt!
  """
  Whether the Market capacity is measured in the quote (true) or payout (false) Token.
  
  """
  capacityInQuote: Boolean!
  """
  The minimum price at which a bond can be purchased.
  **NOTE** This is a minimum return value for the Auctioneer marketPrice function, NOT a USD price.
  
  """
  minPrice: BigInt
  """
  The price at which a bond can be purchased.
  **NOTE** This is a minimum return value for the Auctioneer marketPrice function, NOT a USD price.
  
  """
  price: BigInt
  """
  Scale value to use when converting between quote token and payout token amounts with marketPrice.
  
  """
  scale: BigInt
  """
  The average bond price across all purchases.
  
  """
  averageBondPrice: Bonds_BigDecimal
  """
  A list of all tuning events that have been emitted for this Market.
  
  """
  tunes(skip: Int = 0, first: Int = 100, orderBy: Bonds_Tune_orderBy, orderDirection: Bonds_OrderDirection, where: Bonds_Tune_filter): [Bonds_Tune!]
  """
  A list of BondPurchase records for this Market.
  
  """
  bondPurchases(skip: Int = 0, first: Int = 100, orderBy: Bonds_BondPurchase_orderBy, orderDirection: Bonds_OrderDirection, where: Bonds_BondPurchase_filter): [Bonds_BondPurchase!]
  """
  A count of BondPurchases for this market
  
  """
  bondsIssued: BigInt!
}

"""
Workaround due to no simple entity count being available.

"""
type Bonds_MarketOwnerCount {
  """
  There should be one MarketOwnerCount entry per market owner, with owner address as id.
  
  """
  id: String!
  """
  The total number of markets (open and closed) owned by this address on this chain.
  
  """
  count: BigInt!
}

input Bonds_MarketOwnerCount_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_MarketOwnerCount_filter]
  or: [Bonds_MarketOwnerCount_filter]
}

enum Bonds_MarketOwnerCount_orderBy {
  id
  count
}

input Bonds_Market_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  auctioneer: String
  auctioneer_not: String
  auctioneer_gt: String
  auctioneer_lt: String
  auctioneer_gte: String
  auctioneer_lte: String
  auctioneer_in: [String!]
  auctioneer_not_in: [String!]
  auctioneer_contains: String
  auctioneer_contains_nocase: String
  auctioneer_not_contains: String
  auctioneer_not_contains_nocase: String
  auctioneer_starts_with: String
  auctioneer_starts_with_nocase: String
  auctioneer_not_starts_with: String
  auctioneer_not_starts_with_nocase: String
  auctioneer_ends_with: String
  auctioneer_ends_with_nocase: String
  auctioneer_not_ends_with: String
  auctioneer_not_ends_with_nocase: String
  teller: String
  teller_not: String
  teller_gt: String
  teller_lt: String
  teller_gte: String
  teller_lte: String
  teller_in: [String!]
  teller_not_in: [String!]
  teller_contains: String
  teller_contains_nocase: String
  teller_not_contains: String
  teller_not_contains_nocase: String
  teller_starts_with: String
  teller_starts_with_nocase: String
  teller_not_starts_with: String
  teller_not_starts_with_nocase: String
  teller_ends_with: String
  teller_ends_with_nocase: String
  teller_not_ends_with: String
  teller_not_ends_with_nocase: String
  marketId: BigInt
  marketId_not: BigInt
  marketId_gt: BigInt
  marketId_lt: BigInt
  marketId_gte: BigInt
  marketId_lte: BigInt
  marketId_in: [BigInt!]
  marketId_not_in: [BigInt!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  payoutToken: String
  payoutToken_not: String
  payoutToken_gt: String
  payoutToken_lt: String
  payoutToken_gte: String
  payoutToken_lte: String
  payoutToken_in: [String!]
  payoutToken_not_in: [String!]
  payoutToken_contains: String
  payoutToken_contains_nocase: String
  payoutToken_not_contains: String
  payoutToken_not_contains_nocase: String
  payoutToken_starts_with: String
  payoutToken_starts_with_nocase: String
  payoutToken_not_starts_with: String
  payoutToken_not_starts_with_nocase: String
  payoutToken_ends_with: String
  payoutToken_ends_with_nocase: String
  payoutToken_not_ends_with: String
  payoutToken_not_ends_with_nocase: String
  payoutToken_: Bonds_Token_filter
  quoteToken: String
  quoteToken_not: String
  quoteToken_gt: String
  quoteToken_lt: String
  quoteToken_gte: String
  quoteToken_lte: String
  quoteToken_in: [String!]
  quoteToken_not_in: [String!]
  quoteToken_contains: String
  quoteToken_contains_nocase: String
  quoteToken_not_contains: String
  quoteToken_not_contains_nocase: String
  quoteToken_starts_with: String
  quoteToken_starts_with_nocase: String
  quoteToken_not_starts_with: String
  quoteToken_not_starts_with_nocase: String
  quoteToken_ends_with: String
  quoteToken_ends_with_nocase: String
  quoteToken_not_ends_with: String
  quoteToken_not_ends_with_nocase: String
  quoteToken_: Bonds_Token_filter
  vesting: BigInt
  vesting_not: BigInt
  vesting_gt: BigInt
  vesting_lt: BigInt
  vesting_gte: BigInt
  vesting_lte: BigInt
  vesting_in: [BigInt!]
  vesting_not_in: [BigInt!]
  start: BigInt
  start_not: BigInt
  start_gt: BigInt
  start_lt: BigInt
  start_gte: BigInt
  start_lte: BigInt
  start_in: [BigInt!]
  start_not_in: [BigInt!]
  conclusion: BigInt
  conclusion_not: BigInt
  conclusion_gt: BigInt
  conclusion_lt: BigInt
  conclusion_gte: BigInt
  conclusion_lte: BigInt
  conclusion_in: [BigInt!]
  conclusion_not_in: [BigInt!]
  vestingType: String
  vestingType_not: String
  vestingType_gt: String
  vestingType_lt: String
  vestingType_gte: String
  vestingType_lte: String
  vestingType_in: [String!]
  vestingType_not_in: [String!]
  vestingType_contains: String
  vestingType_contains_nocase: String
  vestingType_not_contains: String
  vestingType_not_contains_nocase: String
  vestingType_starts_with: String
  vestingType_starts_with_nocase: String
  vestingType_not_starts_with: String
  vestingType_not_starts_with_nocase: String
  vestingType_ends_with: String
  vestingType_ends_with_nocase: String
  vestingType_not_ends_with: String
  vestingType_not_ends_with_nocase: String
  isInstantSwap: Boolean
  isInstantSwap_not: Boolean
  isInstantSwap_in: [Boolean!]
  isInstantSwap_not_in: [Boolean!]
  hasClosed: Boolean
  hasClosed_not: Boolean
  hasClosed_in: [Boolean!]
  hasClosed_not_in: [Boolean!]
  totalBondedAmount: Bonds_BigDecimal
  totalBondedAmount_not: Bonds_BigDecimal
  totalBondedAmount_gt: Bonds_BigDecimal
  totalBondedAmount_lt: Bonds_BigDecimal
  totalBondedAmount_gte: Bonds_BigDecimal
  totalBondedAmount_lte: Bonds_BigDecimal
  totalBondedAmount_in: [Bonds_BigDecimal!]
  totalBondedAmount_not_in: [Bonds_BigDecimal!]
  totalPayoutAmount: Bonds_BigDecimal
  totalPayoutAmount_not: Bonds_BigDecimal
  totalPayoutAmount_gt: Bonds_BigDecimal
  totalPayoutAmount_lt: Bonds_BigDecimal
  totalPayoutAmount_gte: Bonds_BigDecimal
  totalPayoutAmount_lte: Bonds_BigDecimal
  totalPayoutAmount_in: [Bonds_BigDecimal!]
  totalPayoutAmount_not_in: [Bonds_BigDecimal!]
  creationBlockTimestamp: BigInt
  creationBlockTimestamp_not: BigInt
  creationBlockTimestamp_gt: BigInt
  creationBlockTimestamp_lt: BigInt
  creationBlockTimestamp_gte: BigInt
  creationBlockTimestamp_lte: BigInt
  creationBlockTimestamp_in: [BigInt!]
  creationBlockTimestamp_not_in: [BigInt!]
  callbackAddress: String
  callbackAddress_not: String
  callbackAddress_gt: String
  callbackAddress_lt: String
  callbackAddress_gte: String
  callbackAddress_lte: String
  callbackAddress_in: [String!]
  callbackAddress_not_in: [String!]
  callbackAddress_contains: String
  callbackAddress_contains_nocase: String
  callbackAddress_not_contains: String
  callbackAddress_not_contains_nocase: String
  callbackAddress_starts_with: String
  callbackAddress_starts_with_nocase: String
  callbackAddress_not_starts_with: String
  callbackAddress_not_starts_with_nocase: String
  callbackAddress_ends_with: String
  callbackAddress_ends_with_nocase: String
  callbackAddress_not_ends_with: String
  callbackAddress_not_ends_with_nocase: String
  capacity: BigInt
  capacity_not: BigInt
  capacity_gt: BigInt
  capacity_lt: BigInt
  capacity_gte: BigInt
  capacity_lte: BigInt
  capacity_in: [BigInt!]
  capacity_not_in: [BigInt!]
  capacityInQuote: Boolean
  capacityInQuote_not: Boolean
  capacityInQuote_in: [Boolean!]
  capacityInQuote_not_in: [Boolean!]
  minPrice: BigInt
  minPrice_not: BigInt
  minPrice_gt: BigInt
  minPrice_lt: BigInt
  minPrice_gte: BigInt
  minPrice_lte: BigInt
  minPrice_in: [BigInt!]
  minPrice_not_in: [BigInt!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  scale: BigInt
  scale_not: BigInt
  scale_gt: BigInt
  scale_lt: BigInt
  scale_gte: BigInt
  scale_lte: BigInt
  scale_in: [BigInt!]
  scale_not_in: [BigInt!]
  averageBondPrice: Bonds_BigDecimal
  averageBondPrice_not: Bonds_BigDecimal
  averageBondPrice_gt: Bonds_BigDecimal
  averageBondPrice_lt: Bonds_BigDecimal
  averageBondPrice_gte: Bonds_BigDecimal
  averageBondPrice_lte: Bonds_BigDecimal
  averageBondPrice_in: [Bonds_BigDecimal!]
  averageBondPrice_not_in: [Bonds_BigDecimal!]
  tunes_: Bonds_Tune_filter
  bondPurchases_: Bonds_BondPurchase_filter
  bondsIssued: BigInt
  bondsIssued_not: BigInt
  bondsIssued_gt: BigInt
  bondsIssued_lt: BigInt
  bondsIssued_gte: BigInt
  bondsIssued_lte: BigInt
  bondsIssued_in: [BigInt!]
  bondsIssued_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_Market_filter]
  or: [Bonds_Market_filter]
}

enum Bonds_Market_orderBy {
  id
  name
  type
  network
  chainId
  auctioneer
  teller
  marketId
  owner
  payoutToken
  payoutToken__id
  payoutToken__network
  payoutToken__chainId
  payoutToken__address
  payoutToken__decimals
  payoutToken__symbol
  payoutToken__name
  payoutToken__typeName
  payoutToken__usedAsPayout
  payoutToken__usedAsQuote
  payoutToken__totalPayoutAmount
  payoutToken__purchaseCount
  quoteToken
  quoteToken__id
  quoteToken__network
  quoteToken__chainId
  quoteToken__address
  quoteToken__decimals
  quoteToken__symbol
  quoteToken__name
  quoteToken__typeName
  quoteToken__usedAsPayout
  quoteToken__usedAsQuote
  quoteToken__totalPayoutAmount
  quoteToken__purchaseCount
  vesting
  start
  conclusion
  vestingType
  isInstantSwap
  hasClosed
  totalBondedAmount
  totalPayoutAmount
  creationBlockTimestamp
  callbackAddress
  capacity
  capacityInQuote
  minPrice
  price
  scale
  averageBondPrice
  tunes
  bondPurchases
  bondsIssued
}

"""Defines the order direction, either ascending or descending"""
enum Bonds_OrderDirection {
  asc
  desc
}

"""
The OwnerBalance entity tracks user balances of fixed-term ERC-1155 bond tokens.
It does not track balances of fixed-expiry ERC-20 tokens. These can be found by querying the user's wallet.

"""
type Bonds_OwnerBalance {
  """
  Unique ID for the OwnerBalance entity, in the format:
  [owner address]_[BondToken tokenId]
  
  """
  id: String!
  """
  The unique ID of the token, assigned on creation.
  
  """
  tokenId: BigInt!
  """
  The wallet address the balance pertains to.
  
  """
  owner: String!
  """
  The current balance of ERC-1155 bond tokens.
  
  """
  balance: BigInt!
  """
  The network name, as used by Graph Protocol.
  **NOTE** This may not be the same as the name as used by wallets.
  As such, we use the chainId field to identify networks in our frontend.
  
  """
  network: String!
  """
  The numeric chain ID on which the contracts are deployed.
  
  """
  chainId: BigInt!
  """
  A reference to the BondToken for which the balance is being recorded.
  
  """
  bondToken: Bonds_BondToken
}

input Bonds_OwnerBalance_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  bondToken: String
  bondToken_not: String
  bondToken_gt: String
  bondToken_lt: String
  bondToken_gte: String
  bondToken_lte: String
  bondToken_in: [String!]
  bondToken_not_in: [String!]
  bondToken_contains: String
  bondToken_contains_nocase: String
  bondToken_not_contains: String
  bondToken_not_contains_nocase: String
  bondToken_starts_with: String
  bondToken_starts_with_nocase: String
  bondToken_not_starts_with: String
  bondToken_not_starts_with_nocase: String
  bondToken_ends_with: String
  bondToken_ends_with_nocase: String
  bondToken_not_ends_with: String
  bondToken_not_ends_with_nocase: String
  bondToken_: Bonds_BondToken_filter
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_OwnerBalance_filter]
  or: [Bonds_OwnerBalance_filter]
}

enum Bonds_OwnerBalance_orderBy {
  id
  tokenId
  owner
  balance
  network
  chainId
  bondToken
  bondToken__id
  bondToken__decimals
  bondToken__symbol
  bondToken__expiry
  bondToken__teller
  bondToken__network
  bondToken__chainId
  bondToken__type
}

"""
The OwnerTokenTbv entity tracks the total of each quote token received by each Market owner.

"""
type Bonds_OwnerTokenTbv {
  """
  Unique ID for the OwnerTokenTbv entity, in the format:
  [chainId]_[Market owner address]__[quote Token id]
  **NOTE** the Token ID also appends the chain ID before the token address, so the chain ID will appear once at the start of the OwnerTokenTbv ID and once in the quote token subsection of the ID.
  
  """
  id: String!
  """
  The Market owner address for which TBV is being calculated.
  
  """
  owner: String!
  """
  The quote Token for which TBV is being calculated.
  
  """
  token: String!
  """
  The network name, as used by Graph Protocol.
  **NOTE** This may not be the same as the name as used by wallets.
  As such, we use the chainId field to identify networks in our frontend.
  
  """
  network: String!
  """
  The numeric chain ID on which the contracts are deployed.
  
  """
  chainId: BigInt!
  """
  The amount of the quote token received across the owner's markets.
  
  """
  tbv: Bonds_BigDecimal!
  """
  A list of BondPurchase records in which the owner has received the quote token.
  
  """
  bondPurchases(skip: Int = 0, first: Int = 100, orderBy: Bonds_BondPurchase_orderBy, orderDirection: Bonds_OrderDirection, where: Bonds_BondPurchase_filter): [Bonds_BondPurchase!]
}

input Bonds_OwnerTokenTbv_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  tbv: Bonds_BigDecimal
  tbv_not: Bonds_BigDecimal
  tbv_gt: Bonds_BigDecimal
  tbv_lt: Bonds_BigDecimal
  tbv_gte: Bonds_BigDecimal
  tbv_lte: Bonds_BigDecimal
  tbv_in: [Bonds_BigDecimal!]
  tbv_not_in: [Bonds_BigDecimal!]
  bondPurchases_: Bonds_BondPurchase_filter
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_OwnerTokenTbv_filter]
  or: [Bonds_OwnerTokenTbv_filter]
}

enum Bonds_OwnerTokenTbv_orderBy {
  id
  owner
  token
  network
  chainId
  tbv
  bondPurchases
}

"""
The Pair entity stores references to the Tokens which make up a Uniswap-V2 or similar LP Pair.

"""
type Bonds_Pair {
  """
  The address of the LP pair.
  **NOTE** for consistency, this should probably be updated to append the chainId, as Token and BalancerWeightedPool do.
  
  """
  id: String!
  """
  A reference to the Token record for the LP pair's token0.
  
  """
  token0: Bonds_Token!
  """
  A reference to the Token record for the LP pair's token1.
  
  """
  token1: Bonds_Token!
}

input Bonds_Pair_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Bonds_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Bonds_Token_filter
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_Pair_filter]
  or: [Bonds_Pair_filter]
}

enum Bonds_Pair_orderBy {
  id
  token0
  token0__id
  token0__network
  token0__chainId
  token0__address
  token0__decimals
  token0__symbol
  token0__name
  token0__typeName
  token0__usedAsPayout
  token0__usedAsQuote
  token0__totalPayoutAmount
  token0__purchaseCount
  token1
  token1__id
  token1__network
  token1__chainId
  token1__address
  token1__decimals
  token1__symbol
  token1__name
  token1__typeName
  token1__usedAsPayout
  token1__usedAsQuote
  token1__totalPayoutAmount
  token1__purchaseCount
}

type Bonds_PayoutToken {
  id: String!
}

"""
The PayoutTokenTbv entity tracks the total of each quote token received in exchange for the given payout token.

"""
type Bonds_PayoutTokenTbv {
  """
  Unique ID for the PayoutTokenTbv entity, in the format:
  [chainId]_[payout token address]__[quote token id]
  **NOTE** the Token ID also appends the chain ID before the token address, so the chain ID will appear once at the start of the OwnerTokenTbv ID and once in the quote token subsection of the ID.
  
  """
  id: String!
  """
  The payout Token address for which TBV is being calculated.
  
  """
  payoutToken: Bonds_Token!
  """
  The quote Token for which TBV is being calculated.
  
  """
  quoteToken: Bonds_Token!
  """
  The network name, as used by Graph Protocol.
  **NOTE** This may not be the same as the name as used by wallets.
  As such, we use the chainId field to identify networks in our frontend.
  
  """
  network: String!
  """
  The numeric chain ID on which the contracts are deployed.
  
  """
  chainId: BigInt!
  """
  The amount of the quote token received across the owner's markets.
  
  """
  tbv: Bonds_BigDecimal!
  """
  A list of BondPurchase records in which the owner has received the quote token.
  
  """
  bondPurchases(skip: Int = 0, first: Int = 100, orderBy: Bonds_BondPurchase_orderBy, orderDirection: Bonds_OrderDirection, where: Bonds_BondPurchase_filter): [Bonds_BondPurchase!]
}

input Bonds_PayoutTokenTbv_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  payoutToken: String
  payoutToken_not: String
  payoutToken_gt: String
  payoutToken_lt: String
  payoutToken_gte: String
  payoutToken_lte: String
  payoutToken_in: [String!]
  payoutToken_not_in: [String!]
  payoutToken_contains: String
  payoutToken_contains_nocase: String
  payoutToken_not_contains: String
  payoutToken_not_contains_nocase: String
  payoutToken_starts_with: String
  payoutToken_starts_with_nocase: String
  payoutToken_not_starts_with: String
  payoutToken_not_starts_with_nocase: String
  payoutToken_ends_with: String
  payoutToken_ends_with_nocase: String
  payoutToken_not_ends_with: String
  payoutToken_not_ends_with_nocase: String
  payoutToken_: Bonds_Token_filter
  quoteToken: String
  quoteToken_not: String
  quoteToken_gt: String
  quoteToken_lt: String
  quoteToken_gte: String
  quoteToken_lte: String
  quoteToken_in: [String!]
  quoteToken_not_in: [String!]
  quoteToken_contains: String
  quoteToken_contains_nocase: String
  quoteToken_not_contains: String
  quoteToken_not_contains_nocase: String
  quoteToken_starts_with: String
  quoteToken_starts_with_nocase: String
  quoteToken_not_starts_with: String
  quoteToken_not_starts_with_nocase: String
  quoteToken_ends_with: String
  quoteToken_ends_with_nocase: String
  quoteToken_not_ends_with: String
  quoteToken_not_ends_with_nocase: String
  quoteToken_: Bonds_Token_filter
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  tbv: Bonds_BigDecimal
  tbv_not: Bonds_BigDecimal
  tbv_gt: Bonds_BigDecimal
  tbv_lt: Bonds_BigDecimal
  tbv_gte: Bonds_BigDecimal
  tbv_lte: Bonds_BigDecimal
  tbv_in: [Bonds_BigDecimal!]
  tbv_not_in: [Bonds_BigDecimal!]
  bondPurchases_: Bonds_BondPurchase_filter
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_PayoutTokenTbv_filter]
  or: [Bonds_PayoutTokenTbv_filter]
}

enum Bonds_PayoutTokenTbv_orderBy {
  id
  payoutToken
  payoutToken__id
  payoutToken__network
  payoutToken__chainId
  payoutToken__address
  payoutToken__decimals
  payoutToken__symbol
  payoutToken__name
  payoutToken__typeName
  payoutToken__usedAsPayout
  payoutToken__usedAsQuote
  payoutToken__totalPayoutAmount
  payoutToken__purchaseCount
  quoteToken
  quoteToken__id
  quoteToken__network
  quoteToken__chainId
  quoteToken__address
  quoteToken__decimals
  quoteToken__symbol
  quoteToken__name
  quoteToken__typeName
  quoteToken__usedAsPayout
  quoteToken__usedAsQuote
  quoteToken__totalPayoutAmount
  quoteToken__purchaseCount
  network
  chainId
  tbv
  bondPurchases
}

input Bonds_PayoutToken_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_PayoutToken_filter]
  or: [Bonds_PayoutToken_filter]
}

enum Bonds_PayoutToken_orderBy {
  id
}

"""
Workaround due to no simple entity count being available.

"""
type Bonds_PurchaseCount {
  """
  There should only be one PurchaseCount entry, with id "purchase-count".
  
  """
  id: String!
  """
  The total number of bond purchases across all markets on this chain.
  
  """
  count: BigInt!
}

input Bonds_PurchaseCount_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_PurchaseCount_filter]
  or: [Bonds_PurchaseCount_filter]
}

enum Bonds_PurchaseCount_orderBy {
  id
  count
}

type Query {
  Bonds_ownerBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_OwnerBalance
  Bonds_ownerBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_OwnerBalance_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_OwnerBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_OwnerBalance!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_uniqueBonder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueBonder
  Bonds_uniqueBonders(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueBonder_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueBonder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueBonder!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_uniqueBonderCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueBonderCount
  Bonds_uniqueBonderCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueBonderCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueBonderCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueBonderCount!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_uniqueTokenBonder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueTokenBonder
  Bonds_uniqueTokenBonders(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueTokenBonder_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueTokenBonder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueTokenBonder!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_uniqueTokenBonderCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueTokenBonderCount
  Bonds_uniqueTokenBonderCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueTokenBonderCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueTokenBonderCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueTokenBonderCount!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_bondToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_BondToken
  Bonds_bondTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_BondToken_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_BondToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_BondToken!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_ownerTokenTbv(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_OwnerTokenTbv
  Bonds_ownerTokenTbvs(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_OwnerTokenTbv_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_OwnerTokenTbv_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_OwnerTokenTbv!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_payoutTokenTbv(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_PayoutTokenTbv
  Bonds_payoutTokenTbvs(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_PayoutTokenTbv_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_PayoutTokenTbv_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_PayoutTokenTbv!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_bondPurchase(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_BondPurchase
  Bonds_bondPurchases(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_BondPurchase_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_BondPurchase_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_BondPurchase!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Token
  Bonds_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Token_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Token!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Market
  Bonds_markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Market_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Market!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Pair
  Bonds_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Pair_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Pair!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_balancerWeightedPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_BalancerWeightedPool
  Bonds_balancerWeightedPools(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_BalancerWeightedPool_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_BalancerWeightedPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_BalancerWeightedPool!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_tune(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Tune
  Bonds_tunes(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Tune_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Tune_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Tune!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_purchaseCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_PurchaseCount
  Bonds_purchaseCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_PurchaseCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_PurchaseCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_PurchaseCount!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_marketOwnerCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_MarketOwnerCount
  Bonds_marketOwnerCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_MarketOwnerCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_MarketOwnerCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_MarketOwnerCount!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_payoutToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_PayoutToken
  Bonds_payoutTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_PayoutToken_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_PayoutToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_PayoutToken!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_quoteToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_QuoteToken
  Bonds_quoteTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_QuoteToken_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_QuoteToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_QuoteToken!]! @merge(keyField: "id", keyArg: "where.id_in")
  """Access to subgraph metadata"""
  Bonds__meta(block: Bonds_Block_height): Bonds__Meta_
}

type Bonds_QuoteToken {
  id: String!
}

input Bonds_QuoteToken_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_QuoteToken_filter]
  or: [Bonds_QuoteToken_filter]
}

enum Bonds_QuoteToken_orderBy {
  id
}

type Subscription {
  Bonds_ownerBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_OwnerBalance
  Bonds_ownerBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_OwnerBalance_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_OwnerBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_OwnerBalance!]!
  Bonds_uniqueBonder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueBonder
  Bonds_uniqueBonders(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueBonder_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueBonder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueBonder!]!
  Bonds_uniqueBonderCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueBonderCount
  Bonds_uniqueBonderCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueBonderCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueBonderCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueBonderCount!]!
  Bonds_uniqueTokenBonder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueTokenBonder
  Bonds_uniqueTokenBonders(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueTokenBonder_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueTokenBonder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueTokenBonder!]!
  Bonds_uniqueTokenBonderCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueTokenBonderCount
  Bonds_uniqueTokenBonderCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueTokenBonderCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueTokenBonderCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueTokenBonderCount!]!
  Bonds_bondToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_BondToken
  Bonds_bondTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_BondToken_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_BondToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_BondToken!]!
  Bonds_ownerTokenTbv(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_OwnerTokenTbv
  Bonds_ownerTokenTbvs(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_OwnerTokenTbv_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_OwnerTokenTbv_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_OwnerTokenTbv!]!
  Bonds_payoutTokenTbv(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_PayoutTokenTbv
  Bonds_payoutTokenTbvs(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_PayoutTokenTbv_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_PayoutTokenTbv_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_PayoutTokenTbv!]!
  Bonds_bondPurchase(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_BondPurchase
  Bonds_bondPurchases(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_BondPurchase_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_BondPurchase_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_BondPurchase!]!
  Bonds_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Token
  Bonds_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Token_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Token!]!
  Bonds_market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Market
  Bonds_markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Market_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Market!]!
  Bonds_pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Pair
  Bonds_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Pair_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Pair!]!
  Bonds_balancerWeightedPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_BalancerWeightedPool
  Bonds_balancerWeightedPools(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_BalancerWeightedPool_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_BalancerWeightedPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_BalancerWeightedPool!]!
  Bonds_tune(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Tune
  Bonds_tunes(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Tune_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Tune_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Tune!]!
  Bonds_purchaseCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_PurchaseCount
  Bonds_purchaseCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_PurchaseCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_PurchaseCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_PurchaseCount!]!
  Bonds_marketOwnerCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_MarketOwnerCount
  Bonds_marketOwnerCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_MarketOwnerCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_MarketOwnerCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_MarketOwnerCount!]!
  Bonds_payoutToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_PayoutToken
  Bonds_payoutTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_PayoutToken_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_PayoutToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_PayoutToken!]!
  Bonds_quoteToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_QuoteToken
  Bonds_quoteTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_QuoteToken_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_QuoteToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_QuoteToken!]!
  """Access to subgraph metadata"""
  Bonds__meta(block: Bonds_Block_height): Bonds__Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

"""
The Token entity tracks all payout and quote tokens, including LP pairs, Balancer Pools etc and their constituent tokens.

"""
type Bonds_Token {
  """
  Unique ID for the Token entity, in the format:
  [chainId]_[token address]
  
  """
  id: String!
  """
  The network name, as used by Graph Protocol.
  **NOTE** This may not be the same as the name as used by wallets.
  As such, we use the chainId field to identify networks in our frontend.
  
  """
  network: String!
  """
  The numeric chain ID on which the contracts are deployed.
  
  """
  chainId: BigInt!
  """
  The address of the Token.
  
  """
  address: String!
  """
  The number of decimals for the Token.
  
  """
  decimals: BigInt!
  """
  The Token symbol.
  
  """
  symbol: String!
  """
  The Token name.
  
  """
  name: String!
  """
  The smart contract (as opposed to token) name - e.g. "ERC20", "SLP", "BalancerWeightedPool".
  
  """
  typeName: String!
  """
  A reference to the Pair record, if the Token is a Uniswap-V2 (or compatible) LP token, null if it is not.
  
  """
  lpPair: Bonds_Pair
  """
  A reference to the BalancerWeightedPool record, if the Token is a BalancerWeightedPool, or null if it is not.
  
  """
  balancerWeightedPool: Bonds_BalancerWeightedPool
  """
  Whether the Token has been used as a Payout Token for any Markets
  
  """
  usedAsPayout: Boolean!
  """
  Whether the Token has been used as a Quote Token for any Markets
  
  """
  usedAsQuote: Boolean!
  """
  The amount of the this token paid out across the owner's markets.
  
  """
  totalPayoutAmount: Bonds_BigDecimal!
  """
  The total number of times this Token has been purchased on this chain.
  
  """
  purchaseCount: BigInt!
  """
  A list of PayoutTokenTbv for this Token.
  
  """
  payoutTokenTbvs(skip: Int = 0, first: Int = 100, orderBy: Bonds_PayoutTokenTbv_orderBy, orderDirection: Bonds_OrderDirection, where: Bonds_PayoutTokenTbv_filter): [Bonds_PayoutTokenTbv!]
  """
  The UniqueTokenBonderCount for this Token
  
  """
  uniqueBonders: Bonds_UniqueTokenBonderCount
  """
  Markets for this Token
  
  """
  markets(skip: Int = 0, first: Int = 100, orderBy: Bonds_Market_orderBy, orderDirection: Bonds_OrderDirection, where: Bonds_Market_filter): [Bonds_Market!]
}

input Bonds_Token_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  typeName: String
  typeName_not: String
  typeName_gt: String
  typeName_lt: String
  typeName_gte: String
  typeName_lte: String
  typeName_in: [String!]
  typeName_not_in: [String!]
  typeName_contains: String
  typeName_contains_nocase: String
  typeName_not_contains: String
  typeName_not_contains_nocase: String
  typeName_starts_with: String
  typeName_starts_with_nocase: String
  typeName_not_starts_with: String
  typeName_not_starts_with_nocase: String
  typeName_ends_with: String
  typeName_ends_with_nocase: String
  typeName_not_ends_with: String
  typeName_not_ends_with_nocase: String
  lpPair: String
  lpPair_not: String
  lpPair_gt: String
  lpPair_lt: String
  lpPair_gte: String
  lpPair_lte: String
  lpPair_in: [String!]
  lpPair_not_in: [String!]
  lpPair_contains: String
  lpPair_contains_nocase: String
  lpPair_not_contains: String
  lpPair_not_contains_nocase: String
  lpPair_starts_with: String
  lpPair_starts_with_nocase: String
  lpPair_not_starts_with: String
  lpPair_not_starts_with_nocase: String
  lpPair_ends_with: String
  lpPair_ends_with_nocase: String
  lpPair_not_ends_with: String
  lpPair_not_ends_with_nocase: String
  lpPair_: Bonds_Pair_filter
  balancerWeightedPool: String
  balancerWeightedPool_not: String
  balancerWeightedPool_gt: String
  balancerWeightedPool_lt: String
  balancerWeightedPool_gte: String
  balancerWeightedPool_lte: String
  balancerWeightedPool_in: [String!]
  balancerWeightedPool_not_in: [String!]
  balancerWeightedPool_contains: String
  balancerWeightedPool_contains_nocase: String
  balancerWeightedPool_not_contains: String
  balancerWeightedPool_not_contains_nocase: String
  balancerWeightedPool_starts_with: String
  balancerWeightedPool_starts_with_nocase: String
  balancerWeightedPool_not_starts_with: String
  balancerWeightedPool_not_starts_with_nocase: String
  balancerWeightedPool_ends_with: String
  balancerWeightedPool_ends_with_nocase: String
  balancerWeightedPool_not_ends_with: String
  balancerWeightedPool_not_ends_with_nocase: String
  balancerWeightedPool_: Bonds_BalancerWeightedPool_filter
  usedAsPayout: Boolean
  usedAsPayout_not: Boolean
  usedAsPayout_in: [Boolean!]
  usedAsPayout_not_in: [Boolean!]
  usedAsQuote: Boolean
  usedAsQuote_not: Boolean
  usedAsQuote_in: [Boolean!]
  usedAsQuote_not_in: [Boolean!]
  totalPayoutAmount: Bonds_BigDecimal
  totalPayoutAmount_not: Bonds_BigDecimal
  totalPayoutAmount_gt: Bonds_BigDecimal
  totalPayoutAmount_lt: Bonds_BigDecimal
  totalPayoutAmount_gte: Bonds_BigDecimal
  totalPayoutAmount_lte: Bonds_BigDecimal
  totalPayoutAmount_in: [Bonds_BigDecimal!]
  totalPayoutAmount_not_in: [Bonds_BigDecimal!]
  purchaseCount: BigInt
  purchaseCount_not: BigInt
  purchaseCount_gt: BigInt
  purchaseCount_lt: BigInt
  purchaseCount_gte: BigInt
  purchaseCount_lte: BigInt
  purchaseCount_in: [BigInt!]
  purchaseCount_not_in: [BigInt!]
  payoutTokenTbvs_: Bonds_PayoutTokenTbv_filter
  uniqueBonders_: Bonds_UniqueTokenBonderCount_filter
  markets_: Bonds_Market_filter
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_Token_filter]
  or: [Bonds_Token_filter]
}

enum Bonds_Token_orderBy {
  id
  network
  chainId
  address
  decimals
  symbol
  name
  typeName
  lpPair
  lpPair__id
  balancerWeightedPool
  balancerWeightedPool__id
  balancerWeightedPool__vaultAddress
  balancerWeightedPool__poolId
  usedAsPayout
  usedAsQuote
  totalPayoutAmount
  purchaseCount
  payoutTokenTbvs
  uniqueBonders
  uniqueBonders__id
  uniqueBonders__count
  markets
}

"""
The Tune entity tracks Market tuning events.

"""
type Bonds_Tune {
  """
  The ID of the Market to which the event relates.
  
  """
  id: String!
  """
  A reference to the related Market record.
  
  """
  market: Bonds_Market!
  """
  The pre-tuning value of the control variable.
  
  """
  oldControlVariable: BigInt!
  """
  The post-tuning value of the control variable.
  
  """
  newControlVariable: BigInt!
  """
  The difference between the old and new control variables.
  oldControlVariable - newControlVariable
  
  """
  deltaTime: BigInt!
  """
  The timestamp at which the tuning event occurred.
  
  """
  timestamp: BigInt!
}

input Bonds_Tune_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Bonds_Market_filter
  oldControlVariable: BigInt
  oldControlVariable_not: BigInt
  oldControlVariable_gt: BigInt
  oldControlVariable_lt: BigInt
  oldControlVariable_gte: BigInt
  oldControlVariable_lte: BigInt
  oldControlVariable_in: [BigInt!]
  oldControlVariable_not_in: [BigInt!]
  newControlVariable: BigInt
  newControlVariable_not: BigInt
  newControlVariable_gt: BigInt
  newControlVariable_lt: BigInt
  newControlVariable_gte: BigInt
  newControlVariable_lte: BigInt
  newControlVariable_in: [BigInt!]
  newControlVariable_not_in: [BigInt!]
  deltaTime: BigInt
  deltaTime_not: BigInt
  deltaTime_gt: BigInt
  deltaTime_lt: BigInt
  deltaTime_gte: BigInt
  deltaTime_lte: BigInt
  deltaTime_in: [BigInt!]
  deltaTime_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_Tune_filter]
  or: [Bonds_Tune_filter]
}

enum Bonds_Tune_orderBy {
  id
  market
  market__id
  market__name
  market__type
  market__network
  market__chainId
  market__auctioneer
  market__teller
  market__marketId
  market__owner
  market__vesting
  market__start
  market__conclusion
  market__vestingType
  market__isInstantSwap
  market__hasClosed
  market__totalBondedAmount
  market__totalPayoutAmount
  market__creationBlockTimestamp
  market__callbackAddress
  market__capacity
  market__capacityInQuote
  market__minPrice
  market__price
  market__scale
  market__averageBondPrice
  market__bondsIssued
  oldControlVariable
  newControlVariable
  deltaTime
  timestamp
}

"""
A UniqueBonder record is created for each unique combination of chain, market owner, bond purchaser.

"""
type Bonds_UniqueBonder {
  """
  Unique ID for the UniqueBonder entity, in the format:
  [chainId]_[Market owner address]__[bond purchaser address]
  
  """
  id: String!
}

"""
Workaround due to no simple entity count being available.

"""
type Bonds_UniqueBonderCount {
  """
  There should be one UniqueBonderCount entry per market owner, with owner address as id.
  
  """
  id: String!
  """
  The total number of unique bonders for this token on this chain.
  
  """
  count: BigInt!
}

input Bonds_UniqueBonderCount_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_UniqueBonderCount_filter]
  or: [Bonds_UniqueBonderCount_filter]
}

enum Bonds_UniqueBonderCount_orderBy {
  id
  count
}

input Bonds_UniqueBonder_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_UniqueBonder_filter]
  or: [Bonds_UniqueBonder_filter]
}

enum Bonds_UniqueBonder_orderBy {
  id
}

"""
A UniqueTokenBonder record is created for each unique combination of chain, payout token address, bond purchaser.

"""
type Bonds_UniqueTokenBonder {
  """
  Unique ID for the UniqueTokenBonder entity, in the format:
  [chainId]_[payout token address]__[bond purchaser address]
  
  """
  id: String!
}

"""
Workaround due to no simple entity count being available.

"""
type Bonds_UniqueTokenBonderCount {
  """
  There should be one UniqueTokenBonderCount entry per token, with token address as id.
  
  """
  id: String!
  """
  The token for which bonders are being counted.
  
  """
  token: Bonds_Token!
  """
  The total number of unique bonders for this token on this chain.
  
  """
  count: BigInt!
}

input Bonds_UniqueTokenBonderCount_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Bonds_Token_filter
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_UniqueTokenBonderCount_filter]
  or: [Bonds_UniqueTokenBonderCount_filter]
}

enum Bonds_UniqueTokenBonderCount_orderBy {
  id
  token
  token__id
  token__network
  token__chainId
  token__address
  token__decimals
  token__symbol
  token__name
  token__typeName
  token__usedAsPayout
  token__usedAsQuote
  token__totalPayoutAmount
  token__purchaseCount
  count
}

input Bonds_UniqueTokenBonder_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_UniqueTokenBonder_filter]
  or: [Bonds_UniqueTokenBonder_filter]
}

enum Bonds_UniqueTokenBonder_orderBy {
  id
}

type Bonds__Block_ {
  """The hash of the block"""
  hash: Bonds_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bonds_Bytes
}

"""The type for the top-level _meta field"""
type Bonds__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: Bonds__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}