schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Query {
  block(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Block
  blocks(
    skip: Int = 0
    first: Int = 100
    orderBy: Block_orderBy
    orderDirection: OrderDirection
    where: Block_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Block!]! @merge(keyField: "id", keyArg: "where.id_in")
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  xsushi(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XSushi
  xsushis(
    skip: Int = 0
    first: Int = 100
    orderBy: XSushi_orderBy
    orderDirection: OrderDirection
    where: XSushi_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XSushi!]! @merge(keyField: "id", keyArg: "where.id_in")
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]! @merge(keyField: "id", keyArg: "where.id_in")
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]! @merge(keyField: "id", keyArg: "where.id_in")
  feeSender(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeeSender
  feeSenders(
    skip: Int = 0
    first: Int = 100
    orderBy: FeeSender_orderBy
    orderDirection: OrderDirection
    where: FeeSender_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeeSender!]! @merge(keyField: "id", keyArg: "where.id_in")
  fee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Fee
  fees(
    skip: Int = 0
    first: Int = 100
    orderBy: Fee_orderBy
    orderDirection: OrderDirection
    where: Fee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Fee!]! @merge(keyField: "id", keyArg: "where.id_in")
  hourSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HourSnapshot
  hourSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: HourSnapshot_orderBy
    orderDirection: OrderDirection
    where: HourSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HourSnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  daySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DaySnapshot
  daySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: DaySnapshot_orderBy
    orderDirection: OrderDirection
    where: DaySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DaySnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  weekSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WeekSnapshot
  weekSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: WeekSnapshot_orderBy
    orderDirection: OrderDirection
    where: WeekSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WeekSnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  bentoBox(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BentoBox
  bentoBoxes(
    skip: Int = 0
    first: Int = 100
    orderBy: BentoBox_orderBy
    orderDirection: OrderDirection
    where: BentoBox_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BentoBox!]! @merge(keyField: "id", keyArg: "where.id_in")
  bentoBoxKpi(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BentoBoxKpi
  bentoBoxKpis(
    skip: Int = 0
    first: Int = 100
    orderBy: BentoBoxKpi_orderBy
    orderDirection: OrderDirection
    where: BentoBoxKpi_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BentoBoxKpi!]! @merge(keyField: "id", keyArg: "where.id_in")
  masterContract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterContract
  masterContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterContract_orderBy
    orderDirection: OrderDirection
    where: MasterContract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterContract!]! @merge(keyField: "id", keyArg: "where.id_in")
  masterContractApproval(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterContractApproval
  masterContractApprovals(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterContractApproval_orderBy
    orderDirection: OrderDirection
    where: MasterContractApproval_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterContractApproval!]! @merge(keyField: "id", keyArg: "where.id_in")
  clone(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Clone
  clones(
    skip: Int = 0
    first: Int = 100
    orderBy: Clone_orderBy
    orderDirection: OrderDirection
    where: Clone_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Clone!]! @merge(keyField: "id", keyArg: "where.id_in")
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]! @merge(keyField: "id", keyArg: "where.id_in")
  tokenKpi(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenKpi
  tokenKpis(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenKpi_orderBy
    orderDirection: OrderDirection
    where: TokenKpi_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenKpi!]! @merge(keyField: "id", keyArg: "where.id_in")
  tokenStrategy(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenStrategy
  tokenStrategies(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenStrategy_orderBy
    orderDirection: OrderDirection
    where: TokenStrategy_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenStrategy!]! @merge(keyField: "id", keyArg: "where.id_in")
  strategy(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Strategy
  strategies(
    skip: Int = 0
    first: Int = 100
    orderBy: Strategy_orderBy
    orderDirection: OrderDirection
    where: Strategy_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Strategy!]! @merge(keyField: "id", keyArg: "where.id_in")
  strategyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StrategyData
  strategyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: StrategyData_orderBy
    orderDirection: OrderDirection
    where: StrategyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StrategyData!]! @merge(keyField: "id", keyArg: "where.id_in")
  strategyKpi(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StrategyKpi
  strategyKpis(
    skip: Int = 0
    first: Int = 100
    orderBy: StrategyKpi_orderBy
    orderDirection: OrderDirection
    where: StrategyKpi_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StrategyKpi!]! @merge(keyField: "id", keyArg: "where.id_in")
  harvest(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Harvest
  harvests(
    skip: Int = 0
    first: Int = 100
    orderBy: Harvest_orderBy
    orderDirection: OrderDirection
    where: Harvest_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Harvest!]! @merge(keyField: "id", keyArg: "where.id_in")
  profitOrLoss(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProfitOrLoss
  profitOrLosses(
    skip: Int = 0
    first: Int = 100
    orderBy: ProfitOrLoss_orderBy
    orderDirection: OrderDirection
    where: ProfitOrLoss_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProfitOrLoss!]! @merge(keyField: "id", keyArg: "where.id_in")
  investOrDivest(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): InvestOrDivest
  investOrDivests(
    skip: Int = 0
    first: Int = 100
    orderBy: InvestOrDivest_orderBy
    orderDirection: OrderDirection
    where: InvestOrDivest_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [InvestOrDivest!]! @merge(keyField: "id", keyArg: "where.id_in")
  rebase(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Rebase
  rebases(
    skip: Int = 0
    first: Int = 100
    orderBy: Rebase_orderBy
    orderDirection: OrderDirection
    where: Rebase_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Rebase!]! @merge(keyField: "id", keyArg: "where.id_in")
  flashLoan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FlashLoan
  flashLoans(
    skip: Int = 0
    first: Int = 100
    orderBy: FlashLoan_orderBy
    orderDirection: OrderDirection
    where: FlashLoan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FlashLoan!]! @merge(keyField: "id", keyArg: "where.id_in")
  protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]! @merge(keyField: "id", keyArg: "where.id_in")
  balance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Balance
  balances(
    skip: Int = 0
    first: Int = 100
    orderBy: Balance_orderBy
    orderDirection: OrderDirection
    where: Balance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Balance!]! @merge(keyField: "id", keyArg: "where.id_in")
  global(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Global
  globals(
    skip: Int = 0
    first: Int = 100
    orderBy: Global_orderBy
    orderDirection: OrderDirection
    where: Global_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Global!]! @merge(keyField: "id", keyArg: "where.id_in")
  stream(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Stream
  streams(
    skip: Int = 0
    first: Int = 100
    orderBy: Stream_orderBy
    orderDirection: OrderDirection
    where: Stream_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Stream!]! @merge(keyField: "id", keyArg: "where.id_in")
  vesting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vesting
  vestings(
    skip: Int = 0
    first: Int = 100
    orderBy: Vesting_orderBy
    orderDirection: OrderDirection
    where: Vesting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vesting!]! @merge(keyField: "id", keyArg: "where.id_in")
  tokenHourSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenHourSnapshot
  tokenHourSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenHourSnapshot_orderBy
    orderDirection: OrderDirection
    where: TokenHourSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenHourSnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  tokenDaySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenDaySnapshot
  tokenDaySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenDaySnapshot_orderBy
    orderDirection: OrderDirection
    where: TokenDaySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenDaySnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Factory
  factories(
    skip: Int = 0
    first: Int = 100
    orderBy: Factory_orderBy
    orderDirection: OrderDirection
    where: Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Factory!]! @merge(keyField: "id", keyArg: "where.id_in")
  bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bundle
  bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: Bundle_orderBy
    orderDirection: OrderDirection
    where: Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bundle!]! @merge(keyField: "id", keyArg: "where.id_in")
  tokenPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenPrice
  tokenPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenPrice_orderBy
    orderDirection: OrderDirection
    where: TokenPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenPrice!]! @merge(keyField: "id", keyArg: "where.id_in")
  tokenPair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _TokenPair
  tokenPairs(
    skip: Int = 0
    first: Int = 100
    orderBy: _TokenPair_orderBy
    orderDirection: OrderDirection
    where: _TokenPair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_TokenPair!]! @merge(keyField: "id", keyArg: "where.id_in")
  pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pair
  pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: Pair_orderBy
    orderDirection: OrderDirection
    where: Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pair!]! @merge(keyField: "id", keyArg: "where.id_in")
  liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPosition
  liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPosition_orderBy
    orderDirection: OrderDirection
    where: LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPosition!]! @merge(keyField: "id", keyArg: "where.id_in")
  mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Mint
  v2Mints(
    skip: Int = 0
    first: Int = 100
    orderBy: Mint_orderBy
    orderDirection: OrderDirection
    where: Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [V2Mint!]! @merge(keyField: "id", keyArg: "where.id_in")
  burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Burn
  v2Burns(
    skip: Int = 0
    first: Int = 100
    orderBy: Burn_orderBy
    orderDirection: OrderDirection
    where: Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [V2Burn!]! @merge(keyField: "id", keyArg: "where.id_in")
  swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Swap
  v2Swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Swap_orderBy
    orderDirection: OrderDirection
    where: Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [V2Swap!]! @merge(keyField: "id", keyArg: "where.id_in")
  v2Transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [V2Transaction!]! @merge(keyField: "id", keyArg: "where.id_in")
  liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPositionSnapshot
  liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPositionSnapshot_orderBy
    orderDirection: OrderDirection
    where: LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPositionSnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  pairHourSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairHourSnapshot
  pairHourSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PairHourSnapshot_orderBy
    orderDirection: OrderDirection
    where: PairHourSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairHourSnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  pairDaySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairDaySnapshot
  pairDaySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PairDaySnapshot_orderBy
    orderDirection: OrderDirection
    where: PairDaySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairDaySnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  pairWeeklySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairWeeklySnapshot
  pairWeeklySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PairWeeklySnapshot_orderBy
    orderDirection: OrderDirection
    where: PairWeeklySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairWeeklySnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  factoryDaySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FactoryDaySnapshot
  factoryDaySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FactoryDaySnapshot_orderBy
    orderDirection: OrderDirection
    where: FactoryDaySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FactoryDaySnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  indexingStatusForCurrentVersion(subgraphName: String!): SubgraphIndexingStatus
  indexingStatusForPendingVersion(subgraphName: String!): SubgraphIndexingStatus
  indexingStatusesForSubgraphName(subgraphName: String!): [SubgraphIndexingStatus!]!
  indexingStatuses(subgraphs: [String!]): [SubgraphIndexingStatus!]!
  proofOfIndexing(subgraph: String!, blockNumber: Int!, blockHash: Bytes!, indexer: Bytes): Bytes
  """
  Proofs of indexing for several deployments and blocks that can be shared and
  compared in public without revealing the _actual_ proof of indexing that every
  indexer has in their database
  
  """
  publicProofsOfIndexing(requests: [PublicProofOfIndexingRequest!]!): [PublicProofOfIndexingResult!]!
  subgraphFeatures(subgraphId: String!): SubgraphFeatures!
  entityChangesInBlock(subgraphId: String!, blockNumber: Int!): EntityChanges!
  blockData(network: String!, blockHash: Bytes!): JSONObject
  blockHashFromNumber(network: String!, blockNumber: Int!): Bytes
  version: Version!
  cachedEthereumCalls(network: String!, blockHash: Bytes!): [CachedEthereumCall!]
  apiVersions(subgraphId: String!): [ApiVersion!]!
  MASTERCHEF_V2_masterChef(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChef
  MASTERCHEF_V2_masterChefs(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChef_orderBy
    orderDirection: OrderDirection
    where: MasterChef_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChef!]! @merge(keyField: "id", keyArg: "where.id_in")
  MASTERCHEF_V2_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  MASTERCHEF_V2_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]! @merge(keyField: "id", keyArg: "where.id_in")
  MASTERCHEF_V2_rewarder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Rewarder
  MASTERCHEF_V2_rewarders(
    skip: Int = 0
    first: Int = 100
    orderBy: Rewarder_orderBy
    orderDirection: OrderDirection
    where: Rewarder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Rewarder!]! @merge(keyField: "id", keyArg: "where.id_in")
  MASTERCHEF_V2_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  MASTERCHEF_V2_users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]! @merge(keyField: "id", keyArg: "where.id_in")
  """Access to subgraph metadata"""
  MASTERCHEF_V2__meta(block: Block_height): _Meta_
  MASTERCHEF_V2_sourceName: String
  MASTERCHEF_V1_masterChef(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChef
  MASTERCHEF_V1_masterChefs(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChef_orderBy
    orderDirection: OrderDirection
    where: MasterChef_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChef!]! @merge(keyField: "id", keyArg: "where.id_in")
  MASTERCHEF_V1_history(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): History
  MASTERCHEF_V1_histories(
    skip: Int = 0
    first: Int = 100
    orderBy: History_orderBy
    orderDirection: OrderDirection
    where: History_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [History!]! @merge(keyField: "id", keyArg: "where.id_in")
  MASTERCHEF_V1_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  MASTERCHEF_V1_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]! @merge(keyField: "id", keyArg: "where.id_in")
  MASTERCHEF_V1_poolHistory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolHistory
  MASTERCHEF_V1_poolHistories(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolHistory_orderBy
    orderDirection: OrderDirection
    where: PoolHistory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolHistory!]! @merge(keyField: "id", keyArg: "where.id_in")
  MASTERCHEF_V1_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  MASTERCHEF_V1_users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]! @merge(keyField: "id", keyArg: "where.id_in")
  """Access to subgraph metadata"""
  MASTERCHEF_V1__meta(block: Block_height): _Meta_
  MASTERCHEF_V1_sourceName: String
  deprecated_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_User
  deprecated_users(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_User_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_User!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Bundle
  deprecated_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Bundle_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Bundle!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Factory
  deprecated_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Factory_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Factory!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_hourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_HourData
  deprecated_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_HourData_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_HourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_HourData!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_dayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_DayData
  deprecated_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_DayData_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_DayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_DayData!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Token
  deprecated_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Token_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Token!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_TokenHourData
  deprecated_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_TokenHourData_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_TokenHourData!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_TokenDayData
  deprecated_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_TokenDayData_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_TokenDayData!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Pair
  deprecated_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Pair_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Pair!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_pairHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_PairHourData
  deprecated_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_PairHourData_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_PairHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_PairHourData!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_pairDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_PairDayData
  deprecated_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_PairDayData_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_PairDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_PairDayData!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_LiquidityPosition
  deprecated_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_LiquidityPosition_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_LiquidityPosition!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_LiquidityPositionSnapshot
  deprecated_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_LiquidityPositionSnapshot_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_LiquidityPositionSnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Transaction
  deprecated_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Transaction_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Transaction!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Mint
  deprecated_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Mint_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Mint!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Burn
  deprecated_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Burn_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Burn!]! @merge(keyField: "id", keyArg: "where.id_in")
  deprecated_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Swap
  deprecated_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Swap_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Swap!]! @merge(keyField: "id", keyArg: "where.id_in")
  """Access to subgraph metadata"""
  deprecated__meta(block: deprecated_Block_height): deprecated__Meta_
  factoryToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _FactoryToken
  factoryTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: _FactoryToken_orderBy
    orderDirection: OrderDirection
    where: _FactoryToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_FactoryToken!]! @merge(keyField: "id", keyArg: "where.id_in")
  factoryUser(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _FactoryUser
  factoryUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: _FactoryUser_orderBy
    orderDirection: OrderDirection
    where: _FactoryUser_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_FactoryUser!]! @merge(keyField: "id", keyArg: "where.id_in")
  mints(
    skip: Int = 0
    first: Int = 100
    orderBy: Mint_orderBy
    orderDirection: OrderDirection
    where: Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Mint!]! @merge(keyField: "id", keyArg: "where.id_in")
  burns(
    skip: Int = 0
    first: Int = 100
    orderBy: Burn_orderBy
    orderDirection: OrderDirection
    where: Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Burn!]! @merge(keyField: "id", keyArg: "where.id_in")
  swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Swap_orderBy
    orderDirection: OrderDirection
    where: Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Swap!]! @merge(keyField: "id", keyArg: "where.id_in")
  factoryHourSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FactoryHourSnapshot
  factoryHourSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FactoryHourSnapshot_orderBy
    orderDirection: OrderDirection
    where: FactoryHourSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FactoryHourSnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_ownerBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_OwnerBalance
  Bonds_ownerBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_OwnerBalance_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_OwnerBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_OwnerBalance!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_uniqueBonder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueBonder
  Bonds_uniqueBonders(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueBonder_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueBonder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueBonder!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_uniqueBonderCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueBonderCount
  Bonds_uniqueBonderCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueBonderCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueBonderCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueBonderCount!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_uniqueTokenBonder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueTokenBonder
  Bonds_uniqueTokenBonders(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueTokenBonder_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueTokenBonder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueTokenBonder!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_uniqueTokenBonderCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueTokenBonderCount
  Bonds_uniqueTokenBonderCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueTokenBonderCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueTokenBonderCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueTokenBonderCount!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_bondToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_BondToken
  Bonds_bondTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_BondToken_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_BondToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_BondToken!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_ownerTokenTbv(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_OwnerTokenTbv
  Bonds_ownerTokenTbvs(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_OwnerTokenTbv_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_OwnerTokenTbv_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_OwnerTokenTbv!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_payoutTokenTbv(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_PayoutTokenTbv
  Bonds_payoutTokenTbvs(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_PayoutTokenTbv_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_PayoutTokenTbv_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_PayoutTokenTbv!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_bondPurchase(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_BondPurchase
  Bonds_bondPurchases(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_BondPurchase_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_BondPurchase_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_BondPurchase!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Token
  Bonds_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Token_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Token!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Market
  Bonds_markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Market_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Market!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Pair
  Bonds_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Pair_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Pair!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_balancerWeightedPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_BalancerWeightedPool
  Bonds_balancerWeightedPools(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_BalancerWeightedPool_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_BalancerWeightedPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_BalancerWeightedPool!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_tune(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Tune
  Bonds_tunes(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Tune_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Tune_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Tune!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_purchaseCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_PurchaseCount
  Bonds_purchaseCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_PurchaseCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_PurchaseCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_PurchaseCount!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_marketOwnerCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_MarketOwnerCount
  Bonds_marketOwnerCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_MarketOwnerCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_MarketOwnerCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_MarketOwnerCount!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_payoutToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_PayoutToken
  Bonds_payoutTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_PayoutToken_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_PayoutToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_PayoutToken!]! @merge(keyField: "id", keyArg: "where.id_in")
  Bonds_quoteToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_QuoteToken
  Bonds_quoteTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_QuoteToken_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_QuoteToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_QuoteToken!]! @merge(keyField: "id", keyArg: "where.id_in")
  """Access to subgraph metadata"""
  Bonds__meta(block: Bonds_Block_height): Bonds__Meta_
  SUSHISWAP_V3_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Factory
  SUSHISWAP_V3_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Factory_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Factory!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Bundle
  SUSHISWAP_V3_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Bundle_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Bundle!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Token
  SUSHISWAP_V3_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Token_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Token!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Pool
  SUSHISWAP_V3_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Pool_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Pool!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Tick
  SUSHISWAP_V3_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Tick_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Tick!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Position
  SUSHISWAP_V3_positions(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Position_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Position!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_PositionSnapshot
  SUSHISWAP_V3_positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_PositionSnapshot_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_PositionSnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Transaction
  SUSHISWAP_V3_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Transaction_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Transaction!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Mint
  SUSHISWAP_V3_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Mint_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Mint!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Burn
  SUSHISWAP_V3_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Burn_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Burn!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Swap
  SUSHISWAP_V3_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Swap_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Swap!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_collect(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Collect
  SUSHISWAP_V3_collects(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Collect_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Collect_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Collect!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_flash(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Flash
  SUSHISWAP_V3_flashes(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Flash_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Flash_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Flash!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_uniswapDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_UniswapDayData
  SUSHISWAP_V3_uniswapDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_UniswapDayData_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_UniswapDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_UniswapDayData!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_PoolDayData
  SUSHISWAP_V3_poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_PoolDayData_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_PoolDayData!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_poolHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_PoolHourData
  SUSHISWAP_V3_poolHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_PoolHourData_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_PoolHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_PoolHourData!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_tickHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_TickHourData
  SUSHISWAP_V3_tickHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_TickHourData_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_TickHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_TickHourData!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_tickDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_TickDayData
  SUSHISWAP_V3_tickDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_TickDayData_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_TickDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_TickDayData!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_TokenDayData
  SUSHISWAP_V3_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_TokenDayData_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_TokenDayData!]! @merge(keyField: "id", keyArg: "where.id_in")
  SUSHISWAP_V3_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_TokenHourData
  SUSHISWAP_V3_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_TokenHourData_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_TokenHourData!]! @merge(keyField: "id", keyArg: "where.id_in")
  """Access to subgraph metadata"""
  SUSHISWAP_V3__meta(block: SUSHISWAP_V3_Block_height): SUSHISWAP_V3__Meta_
  CONCENTRATED_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Factory
  CONCENTRATED_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Factory_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Factory!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Bundle
  CONCENTRATED_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Bundle_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Bundle!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Token
  CONCENTRATED_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Token_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Token!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Pool
  CONCENTRATED_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Pool_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Pool!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Tick
  CONCENTRATED_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Tick_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Tick!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Position
  CONCENTRATED_positions(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Position_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Position!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_PositionSnapshot
  CONCENTRATED_positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_PositionSnapshot_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_PositionSnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Transaction
  CONCENTRATED_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Transaction_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Transaction!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Mint
  CONCENTRATED_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Mint_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Mint!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Burn
  CONCENTRATED_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Burn_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Burn!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Swap
  CONCENTRATED_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Swap_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Swap!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_collect(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Collect
  CONCENTRATED_collects(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Collect_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Collect_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Collect!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_flash(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Flash
  CONCENTRATED_flashes(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Flash_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Flash_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Flash!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_uniswapDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_UniswapDayData
  CONCENTRATED_uniswapDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_UniswapDayData_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_UniswapDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_UniswapDayData!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_PoolDayData
  CONCENTRATED_poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_PoolDayData_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_PoolDayData!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_poolHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_PoolHourData
  CONCENTRATED_poolHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_PoolHourData_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_PoolHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_PoolHourData!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_tickHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_TickHourData
  CONCENTRATED_tickHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_TickHourData_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_TickHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_TickHourData!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_tickDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_TickDayData
  CONCENTRATED_tickDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_TickDayData_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_TickDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_TickDayData!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_TokenDayData
  CONCENTRATED_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_TokenDayData_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_TokenDayData!]! @merge(keyField: "id", keyArg: "where.id_in")
  CONCENTRATED_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_TokenHourData
  CONCENTRATED_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_TokenHourData_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_TokenHourData!]! @merge(keyField: "id", keyArg: "where.id_in")
  """Access to subgraph metadata"""
  CONCENTRATED__meta(block: CONCENTRATED_Block_height): CONCENTRATED__Meta_
  subgraphs(subgraphs: [SubgraphWithNode!]!, type: SubgraphType!): [Subgraph!]!
  crossChainBentoBoxKpis(first: Int!, chainIds: [BigInt!]!): [BentoBoxKpi!]!
  crossChainStrategyKpis(skip: Int = 0, first: Int = 100, where: StrategyKpi_filter, orderBy: StrategyKpi_orderBy, orderDirection: OrderDirection, block: Block_height, chainIds: [BigInt!]!): [StrategyKpi!]! @merge(keyField: "id", keyArg: "where.id_in")
  furoTokensByChainIds(skip: Int = 0, chainIds: [BigInt!]!, orderBy: Token_orderBy, orderDirection: OrderDirection, first: Int = 100, where: Token_filter): [Furo_token!]! @merge(keyField: "id", keyArg: "where.id_in")
  bundlesByChainIds(chainIds: [BigInt!]!): [Bundle!]!
  blocksByChainIds(skip: Int = 0, first: Int = 100, where: Block_filter, orderBy: Block_orderBy, orderDirection: OrderDirection, chainIds: [BigInt!]!): [Block!]! @merge(keyField: "id", keyArg: "where.id_in")
  factoriesByChainIds(chainIds: [BigInt!]!): [Factory!]!
  v3factoriesByChainIds(chainIds: [BigInt!]!): [SUSHISWAP_V3_Factory!]!
  liquidityPositionsByChainIds(skip: Int = 0, first: Int = 100, where: LiquidityPosition_filter, orderBy: LiquidityPosition_orderBy, orderDirection: OrderDirection, block: Block_height, chainIds: [BigInt!]!): [LiquidityPosition!]! @merge(keyField: "id", keyArg: "where.id_in")
  pairsWithIncentives(skip: Int = 0, first: Int = 100, where: Pair_filter, orderBy: Pair_orderBy, orderDirection: OrderDirection, block: Block_height, chainIds: [BigInt!]!, farmsOnly: Boolean, pagination: Pagination): [Pair!]! @merge(keyField: "id", keyArg: "where.id_in")
  pairsByChainId(skip: Int = 0, first: Int = 100, where: Pair_filter, orderBy: Pair_orderBy, orderDirection: OrderDirection, block: Block_height, chainId: BigInt!): [Pair!]! @merge(keyField: "id", keyArg: "where.id_in")
  pairsByChainIds(skip: Int = 0, first: Int = 100, where: Pair_filter, orderBy: Pair_orderBy, orderDirection: OrderDirection, block: Block_height, chainIds: [BigInt!]!, blocks: [Block_height!]): [Pair!]! @merge(keyField: "id", keyArg: "where.id_in")
  pairById(id: ID!, block: Block_height): Pair
  pairsByIds(ids: [ID!]!, block: Block_height): [Pair!]!
  rebasesByChainIds(skip: Int = 0, first: Int = 100, where: Rebase_filter, chainIds: [BigInt!]!): [Rebase!]! @merge(keyField: "id", keyArg: "where.id_in")
  tokensByChainIds(skip: Int = 0, first: Int = 100, where: Token_filter, orderBy: Token_orderBy, orderDirection: OrderDirection, block: Block_height, pagination: Pagination, chainIds: [BigInt!]!): [Token!]! @merge(keyField: "id", keyArg: "where.id_in")
  tokensByChainId(skip: Int = 0, first: Int = 100, where: Token_filter, orderBy: Token_orderBy, orderDirection: OrderDirection, block: Block_height, chainId: BigInt!): [Token!]! @merge(keyField: "id", keyArg: "where.id_in")
  tokenById(id: ID!, block: Block_height): Token!
  tokensByIds(ids: [ID!]!, block: Block_height): [Token!]!
  ticksById(id: ID!): [CONCENTRATED_Tick!]!
  poolsByTokenPair(tokenId0: String!, tokenId1: String!): [CONCENTRATED_Pool!]!
  crossChainChefUser(skip: Int = 0, first: Int = 100, where: User_filter, orderBy: User_orderBy, orderDirection: OrderDirection, block: Block_height, chainIds: [BigInt!]!): [ChefUser!]! @merge(keyField: "id", keyArg: "where.id_in")
  crossChainUserPositions(id: ID!, chainIds: [BigInt!]!): [UserPosition!]!
  factoryDaySnapshotsByChainIds(first: Int, skip: Int, where: FactoryDaySnapshot_filter, orderBy: FactoryDaySnapshot_orderBy, orderDirection: OrderDirection, block: Block_height, chainIds: [BigInt!]!): [FactoryDaySnapshot!]! @merge(keyField: "id", keyArg: "where.id_in")
  crossChainToken(id: ID!, now: Int!, chainId: BigInt!): Token!
  crossChainStats(first: Int, skip: Int, where: Pair_filter, orderBy: Pair_orderBy, orderDirection: OrderDirection, block: Block_height, chainIds: [BigInt!]!, now: Int!): [Pair!]! @merge(keyField: "id", keyArg: "where.id_in")
  oneDayBlocks(skip: Int = 0, first: Int = 100, chainIds: [BigInt!]!): [Block!]!
  twoDayBlocks(skip: Int = 0, first: Int = 100, chainIds: [BigInt!]!): [Block!]!
  oneWeekBlocks(skip: Int = 0, first: Int = 100, chainIds: [BigInt!]!): [Block!]!
  customBlocks(skip: Int = 0, first: Int = 100, timestamp: Int!, chainIds: [BigInt!]!): [Block!]!
  sourceName: String
}

type Subscription {
  block(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Block
  blocks(
    skip: Int = 0
    first: Int = 100
    orderBy: Block_orderBy
    orderDirection: OrderDirection
    where: Block_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Block!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  xsushi(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XSushi
  xsushis(
    skip: Int = 0
    first: Int = 100
    orderBy: XSushi_orderBy
    orderDirection: OrderDirection
    where: XSushi_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XSushi!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  feeSender(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeeSender
  feeSenders(
    skip: Int = 0
    first: Int = 100
    orderBy: FeeSender_orderBy
    orderDirection: OrderDirection
    where: FeeSender_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeeSender!]!
  fee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Fee
  fees(
    skip: Int = 0
    first: Int = 100
    orderBy: Fee_orderBy
    orderDirection: OrderDirection
    where: Fee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Fee!]!
  hourSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HourSnapshot
  hourSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: HourSnapshot_orderBy
    orderDirection: OrderDirection
    where: HourSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HourSnapshot!]!
  daySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DaySnapshot
  daySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: DaySnapshot_orderBy
    orderDirection: OrderDirection
    where: DaySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DaySnapshot!]!
  weekSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WeekSnapshot
  weekSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: WeekSnapshot_orderBy
    orderDirection: OrderDirection
    where: WeekSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WeekSnapshot!]!
  bentoBox(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BentoBox
  bentoBoxes(
    skip: Int = 0
    first: Int = 100
    orderBy: BentoBox_orderBy
    orderDirection: OrderDirection
    where: BentoBox_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BentoBox!]!
  bentoBoxKpi(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BentoBoxKpi
  bentoBoxKpis(
    skip: Int = 0
    first: Int = 100
    orderBy: BentoBoxKpi_orderBy
    orderDirection: OrderDirection
    where: BentoBoxKpi_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BentoBoxKpi!]!
  masterContract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterContract
  masterContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterContract_orderBy
    orderDirection: OrderDirection
    where: MasterContract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterContract!]!
  masterContractApproval(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterContractApproval
  masterContractApprovals(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterContractApproval_orderBy
    orderDirection: OrderDirection
    where: MasterContractApproval_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterContractApproval!]!
  clone(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Clone
  clones(
    skip: Int = 0
    first: Int = 100
    orderBy: Clone_orderBy
    orderDirection: OrderDirection
    where: Clone_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Clone!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  tokenKpi(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenKpi
  tokenKpis(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenKpi_orderBy
    orderDirection: OrderDirection
    where: TokenKpi_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenKpi!]!
  tokenStrategy(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenStrategy
  tokenStrategies(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenStrategy_orderBy
    orderDirection: OrderDirection
    where: TokenStrategy_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenStrategy!]!
  strategy(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Strategy
  strategies(
    skip: Int = 0
    first: Int = 100
    orderBy: Strategy_orderBy
    orderDirection: OrderDirection
    where: Strategy_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Strategy!]!
  strategyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StrategyData
  strategyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: StrategyData_orderBy
    orderDirection: OrderDirection
    where: StrategyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StrategyData!]!
  strategyKpi(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StrategyKpi
  strategyKpis(
    skip: Int = 0
    first: Int = 100
    orderBy: StrategyKpi_orderBy
    orderDirection: OrderDirection
    where: StrategyKpi_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StrategyKpi!]!
  harvest(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Harvest
  harvests(
    skip: Int = 0
    first: Int = 100
    orderBy: Harvest_orderBy
    orderDirection: OrderDirection
    where: Harvest_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Harvest!]!
  profitOrLoss(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProfitOrLoss
  profitOrLosses(
    skip: Int = 0
    first: Int = 100
    orderBy: ProfitOrLoss_orderBy
    orderDirection: OrderDirection
    where: ProfitOrLoss_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProfitOrLoss!]!
  investOrDivest(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): InvestOrDivest
  investOrDivests(
    skip: Int = 0
    first: Int = 100
    orderBy: InvestOrDivest_orderBy
    orderDirection: OrderDirection
    where: InvestOrDivest_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [InvestOrDivest!]!
  rebase(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Rebase
  rebases(
    skip: Int = 0
    first: Int = 100
    orderBy: Rebase_orderBy
    orderDirection: OrderDirection
    where: Rebase_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Rebase!]!
  flashLoan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FlashLoan
  flashLoans(
    skip: Int = 0
    first: Int = 100
    orderBy: FlashLoan_orderBy
    orderDirection: OrderDirection
    where: FlashLoan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FlashLoan!]!
  protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  balance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Balance
  balances(
    skip: Int = 0
    first: Int = 100
    orderBy: Balance_orderBy
    orderDirection: OrderDirection
    where: Balance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Balance!]!
  global(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Global
  globals(
    skip: Int = 0
    first: Int = 100
    orderBy: Global_orderBy
    orderDirection: OrderDirection
    where: Global_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Global!]!
  stream(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Stream
  streams(
    skip: Int = 0
    first: Int = 100
    orderBy: Stream_orderBy
    orderDirection: OrderDirection
    where: Stream_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Stream!]!
  vesting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vesting
  vestings(
    skip: Int = 0
    first: Int = 100
    orderBy: Vesting_orderBy
    orderDirection: OrderDirection
    where: Vesting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vesting!]!
  tokenHourSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenHourSnapshot
  tokenHourSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenHourSnapshot_orderBy
    orderDirection: OrderDirection
    where: TokenHourSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenHourSnapshot!]!
  tokenDaySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenDaySnapshot
  tokenDaySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenDaySnapshot_orderBy
    orderDirection: OrderDirection
    where: TokenDaySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenDaySnapshot!]!
  factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Factory
  factories(
    skip: Int = 0
    first: Int = 100
    orderBy: Factory_orderBy
    orderDirection: OrderDirection
    where: Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Factory!]!
  bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bundle
  bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: Bundle_orderBy
    orderDirection: OrderDirection
    where: Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bundle!]!
  tokenPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenPrice
  tokenPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenPrice_orderBy
    orderDirection: OrderDirection
    where: TokenPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenPrice!]!
  tokenPair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _TokenPair
  tokenPairs(
    skip: Int = 0
    first: Int = 100
    orderBy: _TokenPair_orderBy
    orderDirection: OrderDirection
    where: _TokenPair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_TokenPair!]!
  pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pair
  pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: Pair_orderBy
    orderDirection: OrderDirection
    where: Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pair!]!
  liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPosition
  liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPosition_orderBy
    orderDirection: OrderDirection
    where: LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPosition!]!
  mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Mint
  mints(
    skip: Int = 0
    first: Int = 100
    orderBy: Mint_orderBy
    orderDirection: OrderDirection
    where: Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Mint!]!
  burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Burn
  burns(
    skip: Int = 0
    first: Int = 100
    orderBy: Burn_orderBy
    orderDirection: OrderDirection
    where: Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Burn!]!
  swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Swap
  swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Swap_orderBy
    orderDirection: OrderDirection
    where: Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Swap!]!
  liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPositionSnapshot
  liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPositionSnapshot_orderBy
    orderDirection: OrderDirection
    where: LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPositionSnapshot!]!
  pairHourSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairHourSnapshot
  pairHourSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PairHourSnapshot_orderBy
    orderDirection: OrderDirection
    where: PairHourSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairHourSnapshot!]!
  pairDaySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairDaySnapshot
  pairDaySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PairDaySnapshot_orderBy
    orderDirection: OrderDirection
    where: PairDaySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairDaySnapshot!]!
  pairWeeklySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairWeeklySnapshot
  pairWeeklySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PairWeeklySnapshot_orderBy
    orderDirection: OrderDirection
    where: PairWeeklySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairWeeklySnapshot!]!
  factoryDaySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FactoryDaySnapshot
  factoryDaySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FactoryDaySnapshot_orderBy
    orderDirection: OrderDirection
    where: FactoryDaySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FactoryDaySnapshot!]!
  MASTERCHEF_V2_masterChef(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChef
  MASTERCHEF_V2_masterChefs(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChef_orderBy
    orderDirection: OrderDirection
    where: MasterChef_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChef!]!
  MASTERCHEF_V2_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  MASTERCHEF_V2_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  MASTERCHEF_V2_rewarder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Rewarder
  MASTERCHEF_V2_rewarders(
    skip: Int = 0
    first: Int = 100
    orderBy: Rewarder_orderBy
    orderDirection: OrderDirection
    where: Rewarder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Rewarder!]!
  MASTERCHEF_V2_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  MASTERCHEF_V2_users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  """Access to subgraph metadata"""
  MASTERCHEF_V2__meta(block: Block_height): _Meta_
  MASTERCHEF_V2_sourceName: String
  MASTERCHEF_V1_masterChef(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MasterChef
  MASTERCHEF_V1_masterChefs(
    skip: Int = 0
    first: Int = 100
    orderBy: MasterChef_orderBy
    orderDirection: OrderDirection
    where: MasterChef_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MasterChef!]!
  MASTERCHEF_V1_history(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): History
  MASTERCHEF_V1_histories(
    skip: Int = 0
    first: Int = 100
    orderBy: History_orderBy
    orderDirection: OrderDirection
    where: History_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [History!]!
  MASTERCHEF_V1_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  MASTERCHEF_V1_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  MASTERCHEF_V1_poolHistory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolHistory
  MASTERCHEF_V1_poolHistories(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolHistory_orderBy
    orderDirection: OrderDirection
    where: PoolHistory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolHistory!]!
  MASTERCHEF_V1_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  MASTERCHEF_V1_users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  """Access to subgraph metadata"""
  MASTERCHEF_V1__meta(block: Block_height): _Meta_
  MASTERCHEF_V1_sourceName: String
  deprecated_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_User
  deprecated_users(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_User_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_User!]!
  deprecated_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Bundle
  deprecated_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Bundle_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Bundle!]!
  deprecated_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Factory
  deprecated_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Factory_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Factory!]!
  deprecated_hourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_HourData
  deprecated_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_HourData_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_HourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_HourData!]!
  deprecated_dayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_DayData
  deprecated_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_DayData_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_DayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_DayData!]!
  deprecated_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Token
  deprecated_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Token_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Token!]!
  deprecated_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_TokenHourData
  deprecated_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_TokenHourData_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_TokenHourData!]!
  deprecated_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_TokenDayData
  deprecated_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_TokenDayData_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_TokenDayData!]!
  deprecated_pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Pair
  deprecated_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Pair_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Pair!]!
  deprecated_pairHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_PairHourData
  deprecated_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_PairHourData_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_PairHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_PairHourData!]!
  deprecated_pairDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_PairDayData
  deprecated_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_PairDayData_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_PairDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_PairDayData!]!
  deprecated_liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_LiquidityPosition
  deprecated_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_LiquidityPosition_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_LiquidityPosition!]!
  deprecated_liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_LiquidityPositionSnapshot
  deprecated_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_LiquidityPositionSnapshot_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_LiquidityPositionSnapshot!]!
  deprecated_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Transaction
  deprecated_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Transaction_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Transaction!]!
  deprecated_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Mint
  deprecated_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Mint_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Mint!]!
  deprecated_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Burn
  deprecated_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Burn_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Burn!]!
  deprecated_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): deprecated_Swap
  deprecated_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: deprecated_Swap_orderBy
    orderDirection: deprecated_OrderDirection
    where: deprecated_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: deprecated_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: deprecated__SubgraphErrorPolicy_! = deny
  ): [deprecated_Swap!]!
  """Access to subgraph metadata"""
  deprecated__meta(block: deprecated_Block_height): deprecated__Meta_
  factoryToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _FactoryToken
  factoryTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: _FactoryToken_orderBy
    orderDirection: OrderDirection
    where: _FactoryToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_FactoryToken!]!
  factoryUser(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _FactoryUser
  factoryUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: _FactoryUser_orderBy
    orderDirection: OrderDirection
    where: _FactoryUser_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_FactoryUser!]!
  factoryHourSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FactoryHourSnapshot
  factoryHourSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FactoryHourSnapshot_orderBy
    orderDirection: OrderDirection
    where: FactoryHourSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FactoryHourSnapshot!]!
  Bonds_ownerBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_OwnerBalance
  Bonds_ownerBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_OwnerBalance_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_OwnerBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_OwnerBalance!]!
  Bonds_uniqueBonder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueBonder
  Bonds_uniqueBonders(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueBonder_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueBonder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueBonder!]!
  Bonds_uniqueBonderCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueBonderCount
  Bonds_uniqueBonderCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueBonderCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueBonderCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueBonderCount!]!
  Bonds_uniqueTokenBonder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueTokenBonder
  Bonds_uniqueTokenBonders(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueTokenBonder_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueTokenBonder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueTokenBonder!]!
  Bonds_uniqueTokenBonderCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_UniqueTokenBonderCount
  Bonds_uniqueTokenBonderCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_UniqueTokenBonderCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_UniqueTokenBonderCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_UniqueTokenBonderCount!]!
  Bonds_bondToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_BondToken
  Bonds_bondTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_BondToken_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_BondToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_BondToken!]!
  Bonds_ownerTokenTbv(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_OwnerTokenTbv
  Bonds_ownerTokenTbvs(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_OwnerTokenTbv_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_OwnerTokenTbv_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_OwnerTokenTbv!]!
  Bonds_payoutTokenTbv(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_PayoutTokenTbv
  Bonds_payoutTokenTbvs(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_PayoutTokenTbv_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_PayoutTokenTbv_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_PayoutTokenTbv!]!
  Bonds_bondPurchase(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_BondPurchase
  Bonds_bondPurchases(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_BondPurchase_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_BondPurchase_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_BondPurchase!]!
  Bonds_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Token
  Bonds_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Token_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Token!]!
  Bonds_market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Market
  Bonds_markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Market_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Market!]!
  Bonds_pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Pair
  Bonds_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Pair_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Pair!]!
  Bonds_balancerWeightedPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_BalancerWeightedPool
  Bonds_balancerWeightedPools(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_BalancerWeightedPool_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_BalancerWeightedPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_BalancerWeightedPool!]!
  Bonds_tune(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_Tune
  Bonds_tunes(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_Tune_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_Tune_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_Tune!]!
  Bonds_purchaseCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_PurchaseCount
  Bonds_purchaseCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_PurchaseCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_PurchaseCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_PurchaseCount!]!
  Bonds_marketOwnerCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_MarketOwnerCount
  Bonds_marketOwnerCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_MarketOwnerCount_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_MarketOwnerCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_MarketOwnerCount!]!
  Bonds_payoutToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_PayoutToken
  Bonds_payoutTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_PayoutToken_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_PayoutToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_PayoutToken!]!
  Bonds_quoteToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bonds_QuoteToken
  Bonds_quoteTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Bonds_QuoteToken_orderBy
    orderDirection: Bonds_OrderDirection
    where: Bonds_QuoteToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Bonds_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bonds_QuoteToken!]!
  """Access to subgraph metadata"""
  Bonds__meta(block: Bonds_Block_height): Bonds__Meta_
  SUSHISWAP_V3_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Factory
  SUSHISWAP_V3_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Factory_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Factory!]!
  SUSHISWAP_V3_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Bundle
  SUSHISWAP_V3_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Bundle_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Bundle!]!
  SUSHISWAP_V3_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Token
  SUSHISWAP_V3_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Token_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Token!]!
  SUSHISWAP_V3_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Pool
  SUSHISWAP_V3_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Pool_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Pool!]!
  SUSHISWAP_V3_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Tick
  SUSHISWAP_V3_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Tick_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Tick!]!
  SUSHISWAP_V3_position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Position
  SUSHISWAP_V3_positions(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Position_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Position!]!
  SUSHISWAP_V3_positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_PositionSnapshot
  SUSHISWAP_V3_positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_PositionSnapshot_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_PositionSnapshot!]!
  SUSHISWAP_V3_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Transaction
  SUSHISWAP_V3_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Transaction_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Transaction!]!
  SUSHISWAP_V3_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Mint
  SUSHISWAP_V3_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Mint_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Mint!]!
  SUSHISWAP_V3_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Burn
  SUSHISWAP_V3_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Burn_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Burn!]!
  SUSHISWAP_V3_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Swap
  SUSHISWAP_V3_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Swap_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Swap!]!
  SUSHISWAP_V3_collect(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Collect
  SUSHISWAP_V3_collects(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Collect_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Collect_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Collect!]!
  SUSHISWAP_V3_flash(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_Flash
  SUSHISWAP_V3_flashes(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_Flash_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_Flash_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_Flash!]!
  SUSHISWAP_V3_uniswapDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_UniswapDayData
  SUSHISWAP_V3_uniswapDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_UniswapDayData_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_UniswapDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_UniswapDayData!]!
  SUSHISWAP_V3_poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_PoolDayData
  SUSHISWAP_V3_poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_PoolDayData_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_PoolDayData!]!
  SUSHISWAP_V3_poolHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_PoolHourData
  SUSHISWAP_V3_poolHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_PoolHourData_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_PoolHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_PoolHourData!]!
  SUSHISWAP_V3_tickHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_TickHourData
  SUSHISWAP_V3_tickHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_TickHourData_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_TickHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_TickHourData!]!
  SUSHISWAP_V3_tickDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_TickDayData
  SUSHISWAP_V3_tickDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_TickDayData_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_TickDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_TickDayData!]!
  SUSHISWAP_V3_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_TokenDayData
  SUSHISWAP_V3_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_TokenDayData_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_TokenDayData!]!
  SUSHISWAP_V3_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SUSHISWAP_V3_TokenHourData
  SUSHISWAP_V3_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: SUSHISWAP_V3_TokenHourData_orderBy
    orderDirection: SUSHISWAP_V3_OrderDirection
    where: SUSHISWAP_V3_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: SUSHISWAP_V3_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SUSHISWAP_V3_TokenHourData!]!
  """Access to subgraph metadata"""
  SUSHISWAP_V3__meta(block: SUSHISWAP_V3_Block_height): SUSHISWAP_V3__Meta_
  CONCENTRATED_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Factory
  CONCENTRATED_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Factory_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Factory!]!
  CONCENTRATED_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Bundle
  CONCENTRATED_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Bundle_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Bundle!]!
  CONCENTRATED_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Token
  CONCENTRATED_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Token_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Token!]!
  CONCENTRATED_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Pool
  CONCENTRATED_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Pool_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Pool!]!
  CONCENTRATED_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Tick
  CONCENTRATED_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Tick_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Tick!]!
  CONCENTRATED_position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Position
  CONCENTRATED_positions(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Position_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Position!]!
  CONCENTRATED_positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_PositionSnapshot
  CONCENTRATED_positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_PositionSnapshot_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_PositionSnapshot!]!
  CONCENTRATED_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Transaction
  CONCENTRATED_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Transaction_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Transaction!]!
  CONCENTRATED_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Mint
  CONCENTRATED_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Mint_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Mint!]!
  CONCENTRATED_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Burn
  CONCENTRATED_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Burn_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Burn!]!
  CONCENTRATED_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Swap
  CONCENTRATED_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Swap_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Swap!]!
  CONCENTRATED_collect(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Collect
  CONCENTRATED_collects(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Collect_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Collect_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Collect!]!
  CONCENTRATED_flash(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_Flash
  CONCENTRATED_flashes(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_Flash_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_Flash_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_Flash!]!
  CONCENTRATED_uniswapDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_UniswapDayData
  CONCENTRATED_uniswapDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_UniswapDayData_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_UniswapDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_UniswapDayData!]!
  CONCENTRATED_poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_PoolDayData
  CONCENTRATED_poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_PoolDayData_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_PoolDayData!]!
  CONCENTRATED_poolHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_PoolHourData
  CONCENTRATED_poolHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_PoolHourData_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_PoolHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_PoolHourData!]!
  CONCENTRATED_tickHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_TickHourData
  CONCENTRATED_tickHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_TickHourData_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_TickHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_TickHourData!]!
  CONCENTRATED_tickDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_TickDayData
  CONCENTRATED_tickDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_TickDayData_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_TickDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_TickDayData!]!
  CONCENTRATED_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_TokenDayData
  CONCENTRATED_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_TokenDayData_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_TokenDayData!]!
  CONCENTRATED_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CONCENTRATED_TokenHourData
  CONCENTRATED_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CONCENTRATED_TokenHourData_orderBy
    orderDirection: CONCENTRATED_OrderDirection
    where: CONCENTRATED_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CONCENTRATED_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CONCENTRATED_TokenHourData!]!
  """Access to subgraph metadata"""
  CONCENTRATED__meta(block: CONCENTRATED_Block_height): CONCENTRATED__Meta_
  sourceName: String
}

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

type Block {
  id: ID!
  number: BigInt!
  timestamp: BigInt!
  parentHash: String
  author: String
  difficulty: BigInt
  totalDifficulty: BigInt
  gasUsed: BigInt
  gasLimit: BigInt
  receiptsRoot: String
  transactionsRoot: String
  stateRoot: String
  size: BigInt
  unclesHash: String
  hash: Bytes!
  chainId: BigInt!
  sourceName: String
}

input BlockChangedFilter {
  number_gte: Int!
}

input Block_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  number: BigInt
  number_not: BigInt
  number_gt: BigInt
  number_lt: BigInt
  number_gte: BigInt
  number_lte: BigInt
  number_in: [BigInt!]
  number_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  parentHash: String
  parentHash_not: String
  parentHash_gt: String
  parentHash_lt: String
  parentHash_gte: String
  parentHash_lte: String
  parentHash_in: [String!]
  parentHash_not_in: [String!]
  parentHash_contains: String
  parentHash_contains_nocase: String
  parentHash_not_contains: String
  parentHash_not_contains_nocase: String
  parentHash_starts_with: String
  parentHash_starts_with_nocase: String
  parentHash_not_starts_with: String
  parentHash_not_starts_with_nocase: String
  parentHash_ends_with: String
  parentHash_ends_with_nocase: String
  parentHash_not_ends_with: String
  parentHash_not_ends_with_nocase: String
  author: String
  author_not: String
  author_gt: String
  author_lt: String
  author_gte: String
  author_lte: String
  author_in: [String!]
  author_not_in: [String!]
  author_contains: String
  author_contains_nocase: String
  author_not_contains: String
  author_not_contains_nocase: String
  author_starts_with: String
  author_starts_with_nocase: String
  author_not_starts_with: String
  author_not_starts_with_nocase: String
  author_ends_with: String
  author_ends_with_nocase: String
  author_not_ends_with: String
  author_not_ends_with_nocase: String
  difficulty: BigInt
  difficulty_not: BigInt
  difficulty_gt: BigInt
  difficulty_lt: BigInt
  difficulty_gte: BigInt
  difficulty_lte: BigInt
  difficulty_in: [BigInt!]
  difficulty_not_in: [BigInt!]
  totalDifficulty: BigInt
  totalDifficulty_not: BigInt
  totalDifficulty_gt: BigInt
  totalDifficulty_lt: BigInt
  totalDifficulty_gte: BigInt
  totalDifficulty_lte: BigInt
  totalDifficulty_in: [BigInt!]
  totalDifficulty_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  receiptsRoot: String
  receiptsRoot_not: String
  receiptsRoot_gt: String
  receiptsRoot_lt: String
  receiptsRoot_gte: String
  receiptsRoot_lte: String
  receiptsRoot_in: [String!]
  receiptsRoot_not_in: [String!]
  receiptsRoot_contains: String
  receiptsRoot_contains_nocase: String
  receiptsRoot_not_contains: String
  receiptsRoot_not_contains_nocase: String
  receiptsRoot_starts_with: String
  receiptsRoot_starts_with_nocase: String
  receiptsRoot_not_starts_with: String
  receiptsRoot_not_starts_with_nocase: String
  receiptsRoot_ends_with: String
  receiptsRoot_ends_with_nocase: String
  receiptsRoot_not_ends_with: String
  receiptsRoot_not_ends_with_nocase: String
  transactionsRoot: String
  transactionsRoot_not: String
  transactionsRoot_gt: String
  transactionsRoot_lt: String
  transactionsRoot_gte: String
  transactionsRoot_lte: String
  transactionsRoot_in: [String!]
  transactionsRoot_not_in: [String!]
  transactionsRoot_contains: String
  transactionsRoot_contains_nocase: String
  transactionsRoot_not_contains: String
  transactionsRoot_not_contains_nocase: String
  transactionsRoot_starts_with: String
  transactionsRoot_starts_with_nocase: String
  transactionsRoot_not_starts_with: String
  transactionsRoot_not_starts_with_nocase: String
  transactionsRoot_ends_with: String
  transactionsRoot_ends_with_nocase: String
  transactionsRoot_not_ends_with: String
  transactionsRoot_not_ends_with_nocase: String
  stateRoot: String
  stateRoot_not: String
  stateRoot_gt: String
  stateRoot_lt: String
  stateRoot_gte: String
  stateRoot_lte: String
  stateRoot_in: [String!]
  stateRoot_not_in: [String!]
  stateRoot_contains: String
  stateRoot_contains_nocase: String
  stateRoot_not_contains: String
  stateRoot_not_contains_nocase: String
  stateRoot_starts_with: String
  stateRoot_starts_with_nocase: String
  stateRoot_not_starts_with: String
  stateRoot_not_starts_with_nocase: String
  stateRoot_ends_with: String
  stateRoot_ends_with_nocase: String
  stateRoot_not_ends_with: String
  stateRoot_not_ends_with_nocase: String
  size: BigInt
  size_not: BigInt
  size_gt: BigInt
  size_lt: BigInt
  size_gte: BigInt
  size_lte: BigInt
  size_in: [BigInt!]
  size_not_in: [BigInt!]
  unclesHash: String
  unclesHash_not: String
  unclesHash_gt: String
  unclesHash_lt: String
  unclesHash_gte: String
  unclesHash_lte: String
  unclesHash_in: [String!]
  unclesHash_not_in: [String!]
  unclesHash_contains: String
  unclesHash_contains_nocase: String
  unclesHash_not_contains: String
  unclesHash_not_contains_nocase: String
  unclesHash_starts_with: String
  unclesHash_starts_with_nocase: String
  unclesHash_not_starts_with: String
  unclesHash_not_starts_with_nocase: String
  unclesHash_ends_with: String
  unclesHash_ends_with_nocase: String
  unclesHash_not_ends_with: String
  unclesHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Block_filter]
  or: [Block_filter]
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

enum Block_orderBy {
  id
  number
  timestamp
  parentHash
  author
  difficulty
  totalDifficulty
  gasUsed
  gasLimit
  receiptsRoot
  transactionsRoot
  stateRoot
  size
  unclesHash
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
  sourceName: String
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
  sourceName: String
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type DaySnapshot {
  """ {day}-{date} """
  id: ID!
  date: Int!
  userCount: BigInt!
  transactionCount: BigInt!
  sushiSupply: BigDecimal!
  xSushiSupply: BigDecimal!
  sushiStaked: BigDecimal!
  sushiHarvested: BigDecimal!
  totalFeeAmount: BigDecimal!
  xSushiBurned: BigDecimal!
  xSushiMinted: BigDecimal!
  xSushiSushiRatio: BigDecimal!
  sushiXsushiRatio: BigDecimal!
  apr1m: BigDecimal!
  apr3m: BigDecimal!
  apr6m: BigDecimal!
  apr12m: BigDecimal!
  newTransactions: BigInt!
  newSushiStaked: BigDecimal!
  newSushiHarvested: BigDecimal!
  newFeeAmount: BigDecimal!
  newXSushiBurned: BigDecimal!
  newXSushiMinted: BigDecimal!
  sourceName: String
}

input DaySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  sushiSupply: BigDecimal
  sushiSupply_not: BigDecimal
  sushiSupply_gt: BigDecimal
  sushiSupply_lt: BigDecimal
  sushiSupply_gte: BigDecimal
  sushiSupply_lte: BigDecimal
  sushiSupply_in: [BigDecimal!]
  sushiSupply_not_in: [BigDecimal!]
  xSushiSupply: BigDecimal
  xSushiSupply_not: BigDecimal
  xSushiSupply_gt: BigDecimal
  xSushiSupply_lt: BigDecimal
  xSushiSupply_gte: BigDecimal
  xSushiSupply_lte: BigDecimal
  xSushiSupply_in: [BigDecimal!]
  xSushiSupply_not_in: [BigDecimal!]
  sushiStaked: BigDecimal
  sushiStaked_not: BigDecimal
  sushiStaked_gt: BigDecimal
  sushiStaked_lt: BigDecimal
  sushiStaked_gte: BigDecimal
  sushiStaked_lte: BigDecimal
  sushiStaked_in: [BigDecimal!]
  sushiStaked_not_in: [BigDecimal!]
  sushiHarvested: BigDecimal
  sushiHarvested_not: BigDecimal
  sushiHarvested_gt: BigDecimal
  sushiHarvested_lt: BigDecimal
  sushiHarvested_gte: BigDecimal
  sushiHarvested_lte: BigDecimal
  sushiHarvested_in: [BigDecimal!]
  sushiHarvested_not_in: [BigDecimal!]
  totalFeeAmount: BigDecimal
  totalFeeAmount_not: BigDecimal
  totalFeeAmount_gt: BigDecimal
  totalFeeAmount_lt: BigDecimal
  totalFeeAmount_gte: BigDecimal
  totalFeeAmount_lte: BigDecimal
  totalFeeAmount_in: [BigDecimal!]
  totalFeeAmount_not_in: [BigDecimal!]
  xSushiBurned: BigDecimal
  xSushiBurned_not: BigDecimal
  xSushiBurned_gt: BigDecimal
  xSushiBurned_lt: BigDecimal
  xSushiBurned_gte: BigDecimal
  xSushiBurned_lte: BigDecimal
  xSushiBurned_in: [BigDecimal!]
  xSushiBurned_not_in: [BigDecimal!]
  xSushiMinted: BigDecimal
  xSushiMinted_not: BigDecimal
  xSushiMinted_gt: BigDecimal
  xSushiMinted_lt: BigDecimal
  xSushiMinted_gte: BigDecimal
  xSushiMinted_lte: BigDecimal
  xSushiMinted_in: [BigDecimal!]
  xSushiMinted_not_in: [BigDecimal!]
  xSushiSushiRatio: BigDecimal
  xSushiSushiRatio_not: BigDecimal
  xSushiSushiRatio_gt: BigDecimal
  xSushiSushiRatio_lt: BigDecimal
  xSushiSushiRatio_gte: BigDecimal
  xSushiSushiRatio_lte: BigDecimal
  xSushiSushiRatio_in: [BigDecimal!]
  xSushiSushiRatio_not_in: [BigDecimal!]
  sushiXsushiRatio: BigDecimal
  sushiXsushiRatio_not: BigDecimal
  sushiXsushiRatio_gt: BigDecimal
  sushiXsushiRatio_lt: BigDecimal
  sushiXsushiRatio_gte: BigDecimal
  sushiXsushiRatio_lte: BigDecimal
  sushiXsushiRatio_in: [BigDecimal!]
  sushiXsushiRatio_not_in: [BigDecimal!]
  apr1m: BigDecimal
  apr1m_not: BigDecimal
  apr1m_gt: BigDecimal
  apr1m_lt: BigDecimal
  apr1m_gte: BigDecimal
  apr1m_lte: BigDecimal
  apr1m_in: [BigDecimal!]
  apr1m_not_in: [BigDecimal!]
  apr3m: BigDecimal
  apr3m_not: BigDecimal
  apr3m_gt: BigDecimal
  apr3m_lt: BigDecimal
  apr3m_gte: BigDecimal
  apr3m_lte: BigDecimal
  apr3m_in: [BigDecimal!]
  apr3m_not_in: [BigDecimal!]
  apr6m: BigDecimal
  apr6m_not: BigDecimal
  apr6m_gt: BigDecimal
  apr6m_lt: BigDecimal
  apr6m_gte: BigDecimal
  apr6m_lte: BigDecimal
  apr6m_in: [BigDecimal!]
  apr6m_not_in: [BigDecimal!]
  apr12m: BigDecimal
  apr12m_not: BigDecimal
  apr12m_gt: BigDecimal
  apr12m_lt: BigDecimal
  apr12m_gte: BigDecimal
  apr12m_lte: BigDecimal
  apr12m_in: [BigDecimal!]
  apr12m_not_in: [BigDecimal!]
  newTransactions: BigInt
  newTransactions_not: BigInt
  newTransactions_gt: BigInt
  newTransactions_lt: BigInt
  newTransactions_gte: BigInt
  newTransactions_lte: BigInt
  newTransactions_in: [BigInt!]
  newTransactions_not_in: [BigInt!]
  newSushiStaked: BigDecimal
  newSushiStaked_not: BigDecimal
  newSushiStaked_gt: BigDecimal
  newSushiStaked_lt: BigDecimal
  newSushiStaked_gte: BigDecimal
  newSushiStaked_lte: BigDecimal
  newSushiStaked_in: [BigDecimal!]
  newSushiStaked_not_in: [BigDecimal!]
  newSushiHarvested: BigDecimal
  newSushiHarvested_not: BigDecimal
  newSushiHarvested_gt: BigDecimal
  newSushiHarvested_lt: BigDecimal
  newSushiHarvested_gte: BigDecimal
  newSushiHarvested_lte: BigDecimal
  newSushiHarvested_in: [BigDecimal!]
  newSushiHarvested_not_in: [BigDecimal!]
  newFeeAmount: BigDecimal
  newFeeAmount_not: BigDecimal
  newFeeAmount_gt: BigDecimal
  newFeeAmount_lt: BigDecimal
  newFeeAmount_gte: BigDecimal
  newFeeAmount_lte: BigDecimal
  newFeeAmount_in: [BigDecimal!]
  newFeeAmount_not_in: [BigDecimal!]
  newXSushiBurned: BigDecimal
  newXSushiBurned_not: BigDecimal
  newXSushiBurned_gt: BigDecimal
  newXSushiBurned_lt: BigDecimal
  newXSushiBurned_gte: BigDecimal
  newXSushiBurned_lte: BigDecimal
  newXSushiBurned_in: [BigDecimal!]
  newXSushiBurned_not_in: [BigDecimal!]
  newXSushiMinted: BigDecimal
  newXSushiMinted_not: BigDecimal
  newXSushiMinted_gt: BigDecimal
  newXSushiMinted_lt: BigDecimal
  newXSushiMinted_gte: BigDecimal
  newXSushiMinted_lte: BigDecimal
  newXSushiMinted_in: [BigDecimal!]
  newXSushiMinted_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DaySnapshot_filter]
  or: [DaySnapshot_filter]
}

enum DaySnapshot_orderBy {
  id
  date
  userCount
  transactionCount
  sushiSupply
  xSushiSupply
  sushiStaked
  sushiHarvested
  totalFeeAmount
  xSushiBurned
  xSushiMinted
  xSushiSushiRatio
  sushiXsushiRatio
  apr1m
  apr3m
  apr6m
  apr12m
  newTransactions
  newSushiStaked
  newSushiHarvested
  newFeeAmount
  newXSushiBurned
  newXSushiMinted
}

type Fee {
  id: ID!
  sender: FeeSender!
  amount: BigInt!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  sourceName: String
}

type FeeSender {
  id: ID!
  totalFeeSent: BigInt!
  fees(skip: Int = 0, first: Int = 100, orderBy: Fee_orderBy, orderDirection: OrderDirection, where: Fee_filter): [Fee!]!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  modifiedAtBlock: BigInt!
  modifiedAtTimestamp: BigInt!
  sourceName: String
}

input FeeSender_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalFeeSent: BigInt
  totalFeeSent_not: BigInt
  totalFeeSent_gt: BigInt
  totalFeeSent_lt: BigInt
  totalFeeSent_gte: BigInt
  totalFeeSent_lte: BigInt
  totalFeeSent_in: [BigInt!]
  totalFeeSent_not_in: [BigInt!]
  fees_: Fee_filter
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  modifiedAtBlock: BigInt
  modifiedAtBlock_not: BigInt
  modifiedAtBlock_gt: BigInt
  modifiedAtBlock_lt: BigInt
  modifiedAtBlock_gte: BigInt
  modifiedAtBlock_lte: BigInt
  modifiedAtBlock_in: [BigInt!]
  modifiedAtBlock_not_in: [BigInt!]
  modifiedAtTimestamp: BigInt
  modifiedAtTimestamp_not: BigInt
  modifiedAtTimestamp_gt: BigInt
  modifiedAtTimestamp_lt: BigInt
  modifiedAtTimestamp_gte: BigInt
  modifiedAtTimestamp_lte: BigInt
  modifiedAtTimestamp_in: [BigInt!]
  modifiedAtTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeeSender_filter]
  or: [FeeSender_filter]
}

enum FeeSender_orderBy {
  id
  totalFeeSent
  fees
  createdAtBlock
  createdAtTimestamp
  modifiedAtBlock
  modifiedAtTimestamp
}

input Fee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  sender_: FeeSender_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Fee_filter]
  or: [Fee_filter]
}

enum Fee_orderBy {
  id
  sender
  sender__id
  sender__totalFeeSent
  sender__createdAtBlock
  sender__createdAtTimestamp
  sender__modifiedAtBlock
  sender__modifiedAtTimestamp
  amount
  createdAtBlock
  createdAtTimestamp
}

type HourSnapshot {
  """ {hour}-{date} """
  id: ID!
  date: Int!
  userCount: BigInt!
  transactionCount: BigInt!
  sushiSupply: BigDecimal!
  xSushiSupply: BigDecimal!
  sushiStaked: BigDecimal!
  sushiHarvested: BigDecimal!
  totalFeeAmount: BigDecimal!
  xSushiBurned: BigDecimal!
  xSushiMinted: BigDecimal!
  xSushiSushiRatio: BigDecimal!
  sushiXsushiRatio: BigDecimal!
  apr1m: BigDecimal!
  apr3m: BigDecimal!
  apr6m: BigDecimal!
  apr12m: BigDecimal!
  newTransactions: BigInt!
  newSushiStaked: BigDecimal!
  newSushiHarvested: BigDecimal!
  newFeeAmount: BigDecimal!
  newXSushiBurned: BigDecimal!
  newXSushiMinted: BigDecimal!
  sourceName: String
}

input HourSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  sushiSupply: BigDecimal
  sushiSupply_not: BigDecimal
  sushiSupply_gt: BigDecimal
  sushiSupply_lt: BigDecimal
  sushiSupply_gte: BigDecimal
  sushiSupply_lte: BigDecimal
  sushiSupply_in: [BigDecimal!]
  sushiSupply_not_in: [BigDecimal!]
  xSushiSupply: BigDecimal
  xSushiSupply_not: BigDecimal
  xSushiSupply_gt: BigDecimal
  xSushiSupply_lt: BigDecimal
  xSushiSupply_gte: BigDecimal
  xSushiSupply_lte: BigDecimal
  xSushiSupply_in: [BigDecimal!]
  xSushiSupply_not_in: [BigDecimal!]
  sushiStaked: BigDecimal
  sushiStaked_not: BigDecimal
  sushiStaked_gt: BigDecimal
  sushiStaked_lt: BigDecimal
  sushiStaked_gte: BigDecimal
  sushiStaked_lte: BigDecimal
  sushiStaked_in: [BigDecimal!]
  sushiStaked_not_in: [BigDecimal!]
  sushiHarvested: BigDecimal
  sushiHarvested_not: BigDecimal
  sushiHarvested_gt: BigDecimal
  sushiHarvested_lt: BigDecimal
  sushiHarvested_gte: BigDecimal
  sushiHarvested_lte: BigDecimal
  sushiHarvested_in: [BigDecimal!]
  sushiHarvested_not_in: [BigDecimal!]
  totalFeeAmount: BigDecimal
  totalFeeAmount_not: BigDecimal
  totalFeeAmount_gt: BigDecimal
  totalFeeAmount_lt: BigDecimal
  totalFeeAmount_gte: BigDecimal
  totalFeeAmount_lte: BigDecimal
  totalFeeAmount_in: [BigDecimal!]
  totalFeeAmount_not_in: [BigDecimal!]
  xSushiBurned: BigDecimal
  xSushiBurned_not: BigDecimal
  xSushiBurned_gt: BigDecimal
  xSushiBurned_lt: BigDecimal
  xSushiBurned_gte: BigDecimal
  xSushiBurned_lte: BigDecimal
  xSushiBurned_in: [BigDecimal!]
  xSushiBurned_not_in: [BigDecimal!]
  xSushiMinted: BigDecimal
  xSushiMinted_not: BigDecimal
  xSushiMinted_gt: BigDecimal
  xSushiMinted_lt: BigDecimal
  xSushiMinted_gte: BigDecimal
  xSushiMinted_lte: BigDecimal
  xSushiMinted_in: [BigDecimal!]
  xSushiMinted_not_in: [BigDecimal!]
  xSushiSushiRatio: BigDecimal
  xSushiSushiRatio_not: BigDecimal
  xSushiSushiRatio_gt: BigDecimal
  xSushiSushiRatio_lt: BigDecimal
  xSushiSushiRatio_gte: BigDecimal
  xSushiSushiRatio_lte: BigDecimal
  xSushiSushiRatio_in: [BigDecimal!]
  xSushiSushiRatio_not_in: [BigDecimal!]
  sushiXsushiRatio: BigDecimal
  sushiXsushiRatio_not: BigDecimal
  sushiXsushiRatio_gt: BigDecimal
  sushiXsushiRatio_lt: BigDecimal
  sushiXsushiRatio_gte: BigDecimal
  sushiXsushiRatio_lte: BigDecimal
  sushiXsushiRatio_in: [BigDecimal!]
  sushiXsushiRatio_not_in: [BigDecimal!]
  apr1m: BigDecimal
  apr1m_not: BigDecimal
  apr1m_gt: BigDecimal
  apr1m_lt: BigDecimal
  apr1m_gte: BigDecimal
  apr1m_lte: BigDecimal
  apr1m_in: [BigDecimal!]
  apr1m_not_in: [BigDecimal!]
  apr3m: BigDecimal
  apr3m_not: BigDecimal
  apr3m_gt: BigDecimal
  apr3m_lt: BigDecimal
  apr3m_gte: BigDecimal
  apr3m_lte: BigDecimal
  apr3m_in: [BigDecimal!]
  apr3m_not_in: [BigDecimal!]
  apr6m: BigDecimal
  apr6m_not: BigDecimal
  apr6m_gt: BigDecimal
  apr6m_lt: BigDecimal
  apr6m_gte: BigDecimal
  apr6m_lte: BigDecimal
  apr6m_in: [BigDecimal!]
  apr6m_not_in: [BigDecimal!]
  apr12m: BigDecimal
  apr12m_not: BigDecimal
  apr12m_gt: BigDecimal
  apr12m_lt: BigDecimal
  apr12m_gte: BigDecimal
  apr12m_lte: BigDecimal
  apr12m_in: [BigDecimal!]
  apr12m_not_in: [BigDecimal!]
  newTransactions: BigInt
  newTransactions_not: BigInt
  newTransactions_gt: BigInt
  newTransactions_lt: BigInt
  newTransactions_gte: BigInt
  newTransactions_lte: BigInt
  newTransactions_in: [BigInt!]
  newTransactions_not_in: [BigInt!]
  newSushiStaked: BigDecimal
  newSushiStaked_not: BigDecimal
  newSushiStaked_gt: BigDecimal
  newSushiStaked_lt: BigDecimal
  newSushiStaked_gte: BigDecimal
  newSushiStaked_lte: BigDecimal
  newSushiStaked_in: [BigDecimal!]
  newSushiStaked_not_in: [BigDecimal!]
  newSushiHarvested: BigDecimal
  newSushiHarvested_not: BigDecimal
  newSushiHarvested_gt: BigDecimal
  newSushiHarvested_lt: BigDecimal
  newSushiHarvested_gte: BigDecimal
  newSushiHarvested_lte: BigDecimal
  newSushiHarvested_in: [BigDecimal!]
  newSushiHarvested_not_in: [BigDecimal!]
  newFeeAmount: BigDecimal
  newFeeAmount_not: BigDecimal
  newFeeAmount_gt: BigDecimal
  newFeeAmount_lt: BigDecimal
  newFeeAmount_gte: BigDecimal
  newFeeAmount_lte: BigDecimal
  newFeeAmount_in: [BigDecimal!]
  newFeeAmount_not_in: [BigDecimal!]
  newXSushiBurned: BigDecimal
  newXSushiBurned_not: BigDecimal
  newXSushiBurned_gt: BigDecimal
  newXSushiBurned_lt: BigDecimal
  newXSushiBurned_gte: BigDecimal
  newXSushiBurned_lte: BigDecimal
  newXSushiBurned_in: [BigDecimal!]
  newXSushiBurned_not_in: [BigDecimal!]
  newXSushiMinted: BigDecimal
  newXSushiMinted_not: BigDecimal
  newXSushiMinted_gt: BigDecimal
  newXSushiMinted_lt: BigDecimal
  newXSushiMinted_gte: BigDecimal
  newXSushiMinted_lte: BigDecimal
  newXSushiMinted_in: [BigDecimal!]
  newXSushiMinted_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [HourSnapshot_filter]
  or: [HourSnapshot_filter]
}

enum HourSnapshot_orderBy {
  id
  date
  userCount
  transactionCount
  sushiSupply
  xSushiSupply
  sushiStaked
  sushiHarvested
  totalFeeAmount
  xSushiBurned
  xSushiMinted
  xSushiSushiRatio
  sushiXsushiRatio
  apr1m
  apr3m
  apr6m
  apr12m
  newTransactions
  newSushiStaked
  newSushiHarvested
  newFeeAmount
  newXSushiBurned
  newXSushiMinted
}

type Transaction {
  """ Tx hash """
  id: ID!
  """ User from whom this transaction is made """
  from: User!
  to: User!
  amount: BigInt!
  type: TransactionType!
  gasUsed: BigInt!
  gasLimit: BigInt!
  gasPrice: BigInt!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  """ BentoBox this transaction belongs to """
  bentoBox: BentoBox!
  token: Token!
  """ Share of this transaction """
  share: BigInt!
  """ Block number of this transaction """
  block: BigInt!
  """ Timestamp of this transaction """
  timestamp: BigInt!
  stream: Stream
  vesting: Vesting
  toBentoBox: Boolean!
  txHash: String!
  mints(skip: Int = 0, first: Int = 100, orderBy: Mint_orderBy, orderDirection: OrderDirection, where: Mint_filter): [Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: Burn_orderBy, orderDirection: OrderDirection, where: Burn_filter): [Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, where: Swap_filter): [Swap!]!
  sourceName: String
}

enum TransactionType {
  TRANSFER
  MINT
  BURN
  deposit
  transfer
  withdraw
  DEPOSIT
  EXTEND
  WITHDRAWAL
  DISBURSEMENT
}

input Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: User_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: User_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  type: TransactionType
  type_not: TransactionType
  type_in: [TransactionType!]
  type_not_in: [TransactionType!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transaction_filter]
  or: [Transaction_filter]
  bentoBox: String
  bentoBox_not: String
  bentoBox_gt: String
  bentoBox_lt: String
  bentoBox_gte: String
  bentoBox_lte: String
  bentoBox_in: [String!]
  bentoBox_not_in: [String!]
  bentoBox_contains: String
  bentoBox_contains_nocase: String
  bentoBox_not_contains: String
  bentoBox_not_contains_nocase: String
  bentoBox_starts_with: String
  bentoBox_starts_with_nocase: String
  bentoBox_not_starts_with: String
  bentoBox_not_starts_with_nocase: String
  bentoBox_ends_with: String
  bentoBox_ends_with_nocase: String
  bentoBox_not_ends_with: String
  bentoBox_not_ends_with_nocase: String
  bentoBox_: BentoBox_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  share: BigInt
  share_not: BigInt
  share_gt: BigInt
  share_lt: BigInt
  share_gte: BigInt
  share_lte: BigInt
  share_in: [BigInt!]
  share_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  stream: String
  stream_not: String
  stream_gt: String
  stream_lt: String
  stream_gte: String
  stream_lte: String
  stream_in: [String!]
  stream_not_in: [String!]
  stream_contains: String
  stream_contains_nocase: String
  stream_not_contains: String
  stream_not_contains_nocase: String
  stream_starts_with: String
  stream_starts_with_nocase: String
  stream_not_starts_with: String
  stream_not_starts_with_nocase: String
  stream_ends_with: String
  stream_ends_with_nocase: String
  stream_not_ends_with: String
  stream_not_ends_with_nocase: String
  stream_: Stream_filter
  vesting: String
  vesting_not: String
  vesting_gt: String
  vesting_lt: String
  vesting_gte: String
  vesting_lte: String
  vesting_in: [String!]
  vesting_not_in: [String!]
  vesting_contains: String
  vesting_contains_nocase: String
  vesting_not_contains: String
  vesting_not_contains_nocase: String
  vesting_starts_with: String
  vesting_starts_with_nocase: String
  vesting_not_starts_with: String
  vesting_not_starts_with_nocase: String
  vesting_ends_with: String
  vesting_ends_with_nocase: String
  vesting_not_ends_with: String
  vesting_not_ends_with_nocase: String
  vesting_: Vesting_filter
  toBentoBox: Boolean
  toBentoBox_not: Boolean
  toBentoBox_in: [Boolean!]
  toBentoBox_not_in: [Boolean!]
  txHash: String
  txHash_not: String
  txHash_gt: String
  txHash_lt: String
  txHash_gte: String
  txHash_lte: String
  txHash_in: [String!]
  txHash_not_in: [String!]
  txHash_contains: String
  txHash_contains_nocase: String
  txHash_not_contains: String
  txHash_not_contains_nocase: String
  txHash_starts_with: String
  txHash_starts_with_nocase: String
  txHash_not_starts_with: String
  txHash_not_starts_with_nocase: String
  txHash_ends_with: String
  txHash_ends_with_nocase: String
  txHash_not_ends_with: String
  txHash_not_ends_with_nocase: String
  cumulativeGasUsed: BigInt
  cumulativeGasUsed_not: BigInt
  cumulativeGasUsed_gt: BigInt
  cumulativeGasUsed_lt: BigInt
  cumulativeGasUsed_gte: BigInt
  cumulativeGasUsed_lte: BigInt
  cumulativeGasUsed_in: [BigInt!]
  cumulativeGasUsed_not_in: [BigInt!]
  gasUsedUSD: BigDecimal
  gasUsedUSD_not: BigDecimal
  gasUsedUSD_gt: BigDecimal
  gasUsedUSD_lt: BigDecimal
  gasUsedUSD_gte: BigDecimal
  gasUsedUSD_lte: BigDecimal
  gasUsedUSD_in: [BigDecimal!]
  gasUsedUSD_not_in: [BigDecimal!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  mints_: Mint_filter
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  burns_: Burn_filter
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]
  swaps_: Swap_filter
}

enum Transaction_orderBy {
  id
  from
  from__id
  from__balance
  from__createdAtBlock
  from__createdAtTimestamp
  from__modifiedAtBlock
  from__modifiedAtTimestamp
  to
  to__id
  to__balance
  to__createdAtBlock
  to__createdAtTimestamp
  to__modifiedAtBlock
  to__modifiedAtTimestamp
  amount
  type
  gasUsed
  gasLimit
  gasPrice
  createdAtBlock
  createdAtTimestamp
  bentoBox
  bentoBox__id
  from__block
  from__timestamp
  to__block
  to__timestamp
  token
  token__id
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  share
  block
  timestamp
  stream
  stream__id
  stream__initialShares
  stream__initialAmount
  stream__extendedShares
  stream__initialSharesExtended
  stream__withdrawnAmountAfterExtension
  stream__remainingShares
  stream__withdrawnAmount
  stream__status
  stream__fromBentoBox
  stream__startedAt
  stream__expiresAt
  stream__txHash
  stream__transactionCount
  stream__createdAtBlock
  stream__createdAtTimestamp
  stream__extendedAtBlock
  stream__extendedAtTimestamp
  stream__modifiedAtBlock
  stream__modifiedAtTimestamp
  vesting
  vesting__id
  vesting__cliffDuration
  vesting__stepDuration
  vesting__steps
  vesting__cliffShares
  vesting__stepShares
  vesting__remainingShares
  vesting__initialShares
  vesting__initialAmount
  vesting__withdrawnAmount
  vesting__status
  vesting__fromBentoBox
  vesting__startedAt
  vesting__expiresAt
  vesting__txHash
  vesting__transactionCount
  vesting__createdAtBlock
  vesting__createdAtTimestamp
  vesting__modifiedAtBlock
  vesting__modifiedAtTimestamp
  vesting__cancelledAtBlock
  vesting__cancelledAtTimestamp
  token__liquidityShares
  token__createdAtBlock
  token__createdAtTimestamp
  toBentoBox
  txHash
  cumulativeGasUsed
  gasUsedUSD
  mints
  burns
  swaps
}

type User {
  id: ID!
  balance: BigInt!
  withdrawals(skip: Int = 0, first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, where: Transaction_filter): [Transaction!]!
  deposits(skip: Int = 0, first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, where: Transaction_filter): [Transaction!]!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  modifiedAtBlock: BigInt!
  modifiedAtTimestamp: BigInt!
  """ BentoBox this user belongs to """
  bentoBox: BentoBox!
  """ MasterContractApprovals that belong to this user """
  masterContractApprovals(skip: Int = 0, first: Int = 100, orderBy: MasterContractApproval_orderBy, orderDirection: OrderDirection, where: MasterContractApproval_filter): [MasterContractApproval!]
  """ Balances that belong to this user """
  balances(skip: Int = 0, first: Int = 100, orderBy: Balance_orderBy, orderDirection: OrderDirection, where: Balance_filter): [Balance!]
  block: BigInt!
  timestamp: BigInt!
  incomingStreams(skip: Int = 0, first: Int = 100, orderBy: Stream_orderBy, orderDirection: OrderDirection, where: Stream_filter): [Stream!]!
  outgoingStreams(skip: Int = 0, first: Int = 100, orderBy: Stream_orderBy, orderDirection: OrderDirection, where: Stream_filter): [Stream!]!
  incomingVestings(skip: Int = 0, first: Int = 100, orderBy: Vesting_orderBy, orderDirection: OrderDirection, where: Vesting_filter): [Vesting!]!
  outgoingVestings(skip: Int = 0, first: Int = 100, orderBy: Vesting_orderBy, orderDirection: OrderDirection, where: Vesting_filter): [Vesting!]!
  lpSnapshotsCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: LiquidityPosition_orderBy, orderDirection: OrderDirection, where: LiquidityPosition_filter): [LiquidityPosition!]
  address: Bytes!
  pool: Pool
  amount: BigInt!
  rewardDebt: BigInt!
  sushiHarvested: BigDecimal!
  sourceName: String
  entryUSD: BigDecimal!
  exitUSD: BigDecimal!
  sushiHarvestedUSD: BigDecimal!
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  withdrawals_: Transaction_filter
  deposits_: Transaction_filter
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  modifiedAtBlock: BigInt
  modifiedAtBlock_not: BigInt
  modifiedAtBlock_gt: BigInt
  modifiedAtBlock_lt: BigInt
  modifiedAtBlock_gte: BigInt
  modifiedAtBlock_lte: BigInt
  modifiedAtBlock_in: [BigInt!]
  modifiedAtBlock_not_in: [BigInt!]
  modifiedAtTimestamp: BigInt
  modifiedAtTimestamp_not: BigInt
  modifiedAtTimestamp_gt: BigInt
  modifiedAtTimestamp_lt: BigInt
  modifiedAtTimestamp_gte: BigInt
  modifiedAtTimestamp_lte: BigInt
  modifiedAtTimestamp_in: [BigInt!]
  modifiedAtTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
  bentoBox: String
  bentoBox_not: String
  bentoBox_gt: String
  bentoBox_lt: String
  bentoBox_gte: String
  bentoBox_lte: String
  bentoBox_in: [String!]
  bentoBox_not_in: [String!]
  bentoBox_contains: String
  bentoBox_contains_nocase: String
  bentoBox_not_contains: String
  bentoBox_not_contains_nocase: String
  bentoBox_starts_with: String
  bentoBox_starts_with_nocase: String
  bentoBox_not_starts_with: String
  bentoBox_not_starts_with_nocase: String
  bentoBox_ends_with: String
  bentoBox_ends_with_nocase: String
  bentoBox_not_ends_with: String
  bentoBox_not_ends_with_nocase: String
  bentoBox_: BentoBox_filter
  masterContractApprovals_: MasterContractApproval_filter
  balances_: Balance_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  incomingStreams_: Stream_filter
  outgoingStreams_: Stream_filter
  incomingVestings_: Vesting_filter
  outgoingVestings_: Vesting_filter
  lpSnapshotsCount: BigInt
  lpSnapshotsCount_not: BigInt
  lpSnapshotsCount_gt: BigInt
  lpSnapshotsCount_lt: BigInt
  lpSnapshotsCount_gte: BigInt
  lpSnapshotsCount_lte: BigInt
  lpSnapshotsCount_in: [BigInt!]
  lpSnapshotsCount_not_in: [BigInt!]
  liquidityPositions_: LiquidityPosition_filter
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  rewardDebt: BigInt
  rewardDebt_not: BigInt
  rewardDebt_gt: BigInt
  rewardDebt_lt: BigInt
  rewardDebt_gte: BigInt
  rewardDebt_lte: BigInt
  rewardDebt_in: [BigInt!]
  rewardDebt_not_in: [BigInt!]
  sushiHarvested: BigDecimal
  sushiHarvested_not: BigDecimal
  sushiHarvested_gt: BigDecimal
  sushiHarvested_lt: BigDecimal
  sushiHarvested_gte: BigDecimal
  sushiHarvested_lte: BigDecimal
  sushiHarvested_in: [BigDecimal!]
  sushiHarvested_not_in: [BigDecimal!]
  entryUSD: BigDecimal
  entryUSD_not: BigDecimal
  entryUSD_gt: BigDecimal
  entryUSD_lt: BigDecimal
  entryUSD_gte: BigDecimal
  entryUSD_lte: BigDecimal
  entryUSD_in: [BigDecimal!]
  entryUSD_not_in: [BigDecimal!]
  exitUSD: BigDecimal
  exitUSD_not: BigDecimal
  exitUSD_gt: BigDecimal
  exitUSD_lt: BigDecimal
  exitUSD_gte: BigDecimal
  exitUSD_lte: BigDecimal
  exitUSD_in: [BigDecimal!]
  exitUSD_not_in: [BigDecimal!]
  sushiHarvestedUSD: BigDecimal
  sushiHarvestedUSD_not: BigDecimal
  sushiHarvestedUSD_gt: BigDecimal
  sushiHarvestedUSD_lt: BigDecimal
  sushiHarvestedUSD_gte: BigDecimal
  sushiHarvestedUSD_lte: BigDecimal
  sushiHarvestedUSD_in: [BigDecimal!]
  sushiHarvestedUSD_not_in: [BigDecimal!]
}

enum User_orderBy {
  id
  balance
  withdrawals
  deposits
  createdAtBlock
  createdAtTimestamp
  modifiedAtBlock
  modifiedAtTimestamp
  bentoBox
  bentoBox__id
  masterContractApprovals
  balances
  block
  timestamp
  incomingStreams
  outgoingStreams
  incomingVestings
  outgoingVestings
  lpSnapshotsCount
  liquidityPositions
  address
  pool
  pool__id
  pool__pair
  pool__allocPoint
  pool__lastRewardBlock
  pool__accSushiPerShare
  pool__slpBalance
  pool__userCount
  pool__timestamp
  pool__block
  amount
  rewardDebt
  sushiHarvested
  pool__balance
  pool__slpAge
  pool__slpAgeRemoved
  pool__slpDeposited
  pool__slpWithdrawn
  pool__updatedAt
  pool__entryUSD
  pool__exitUSD
  pool__sushiHarvested
  pool__sushiHarvestedUSD
  entryUSD
  exitUSD
  sushiHarvestedUSD
}

type WeekSnapshot {
  """ {week}-{date} """
  id: ID!
  date: Int!
  userCount: BigInt!
  transactionCount: BigInt!
  sushiSupply: BigDecimal!
  xSushiSupply: BigDecimal!
  sushiStaked: BigDecimal!
  sushiHarvested: BigDecimal!
  totalFeeAmount: BigDecimal!
  xSushiBurned: BigDecimal!
  xSushiMinted: BigDecimal!
  xSushiSushiRatio: BigDecimal!
  sushiXsushiRatio: BigDecimal!
  apr1m: BigDecimal!
  apr3m: BigDecimal!
  apr6m: BigDecimal!
  apr12m: BigDecimal!
  newTransactions: BigInt!
  newSushiStaked: BigDecimal!
  newSushiHarvested: BigDecimal!
  newFeeAmount: BigDecimal!
  newXSushiBurned: BigDecimal!
  newXSushiMinted: BigDecimal!
  sourceName: String
}

input WeekSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  sushiSupply: BigDecimal
  sushiSupply_not: BigDecimal
  sushiSupply_gt: BigDecimal
  sushiSupply_lt: BigDecimal
  sushiSupply_gte: BigDecimal
  sushiSupply_lte: BigDecimal
  sushiSupply_in: [BigDecimal!]
  sushiSupply_not_in: [BigDecimal!]
  xSushiSupply: BigDecimal
  xSushiSupply_not: BigDecimal
  xSushiSupply_gt: BigDecimal
  xSushiSupply_lt: BigDecimal
  xSushiSupply_gte: BigDecimal
  xSushiSupply_lte: BigDecimal
  xSushiSupply_in: [BigDecimal!]
  xSushiSupply_not_in: [BigDecimal!]
  sushiStaked: BigDecimal
  sushiStaked_not: BigDecimal
  sushiStaked_gt: BigDecimal
  sushiStaked_lt: BigDecimal
  sushiStaked_gte: BigDecimal
  sushiStaked_lte: BigDecimal
  sushiStaked_in: [BigDecimal!]
  sushiStaked_not_in: [BigDecimal!]
  sushiHarvested: BigDecimal
  sushiHarvested_not: BigDecimal
  sushiHarvested_gt: BigDecimal
  sushiHarvested_lt: BigDecimal
  sushiHarvested_gte: BigDecimal
  sushiHarvested_lte: BigDecimal
  sushiHarvested_in: [BigDecimal!]
  sushiHarvested_not_in: [BigDecimal!]
  totalFeeAmount: BigDecimal
  totalFeeAmount_not: BigDecimal
  totalFeeAmount_gt: BigDecimal
  totalFeeAmount_lt: BigDecimal
  totalFeeAmount_gte: BigDecimal
  totalFeeAmount_lte: BigDecimal
  totalFeeAmount_in: [BigDecimal!]
  totalFeeAmount_not_in: [BigDecimal!]
  xSushiBurned: BigDecimal
  xSushiBurned_not: BigDecimal
  xSushiBurned_gt: BigDecimal
  xSushiBurned_lt: BigDecimal
  xSushiBurned_gte: BigDecimal
  xSushiBurned_lte: BigDecimal
  xSushiBurned_in: [BigDecimal!]
  xSushiBurned_not_in: [BigDecimal!]
  xSushiMinted: BigDecimal
  xSushiMinted_not: BigDecimal
  xSushiMinted_gt: BigDecimal
  xSushiMinted_lt: BigDecimal
  xSushiMinted_gte: BigDecimal
  xSushiMinted_lte: BigDecimal
  xSushiMinted_in: [BigDecimal!]
  xSushiMinted_not_in: [BigDecimal!]
  xSushiSushiRatio: BigDecimal
  xSushiSushiRatio_not: BigDecimal
  xSushiSushiRatio_gt: BigDecimal
  xSushiSushiRatio_lt: BigDecimal
  xSushiSushiRatio_gte: BigDecimal
  xSushiSushiRatio_lte: BigDecimal
  xSushiSushiRatio_in: [BigDecimal!]
  xSushiSushiRatio_not_in: [BigDecimal!]
  sushiXsushiRatio: BigDecimal
  sushiXsushiRatio_not: BigDecimal
  sushiXsushiRatio_gt: BigDecimal
  sushiXsushiRatio_lt: BigDecimal
  sushiXsushiRatio_gte: BigDecimal
  sushiXsushiRatio_lte: BigDecimal
  sushiXsushiRatio_in: [BigDecimal!]
  sushiXsushiRatio_not_in: [BigDecimal!]
  apr1m: BigDecimal
  apr1m_not: BigDecimal
  apr1m_gt: BigDecimal
  apr1m_lt: BigDecimal
  apr1m_gte: BigDecimal
  apr1m_lte: BigDecimal
  apr1m_in: [BigDecimal!]
  apr1m_not_in: [BigDecimal!]
  apr3m: BigDecimal
  apr3m_not: BigDecimal
  apr3m_gt: BigDecimal
  apr3m_lt: BigDecimal
  apr3m_gte: BigDecimal
  apr3m_lte: BigDecimal
  apr3m_in: [BigDecimal!]
  apr3m_not_in: [BigDecimal!]
  apr6m: BigDecimal
  apr6m_not: BigDecimal
  apr6m_gt: BigDecimal
  apr6m_lt: BigDecimal
  apr6m_gte: BigDecimal
  apr6m_lte: BigDecimal
  apr6m_in: [BigDecimal!]
  apr6m_not_in: [BigDecimal!]
  apr12m: BigDecimal
  apr12m_not: BigDecimal
  apr12m_gt: BigDecimal
  apr12m_lt: BigDecimal
  apr12m_gte: BigDecimal
  apr12m_lte: BigDecimal
  apr12m_in: [BigDecimal!]
  apr12m_not_in: [BigDecimal!]
  newTransactions: BigInt
  newTransactions_not: BigInt
  newTransactions_gt: BigInt
  newTransactions_lt: BigInt
  newTransactions_gte: BigInt
  newTransactions_lte: BigInt
  newTransactions_in: [BigInt!]
  newTransactions_not_in: [BigInt!]
  newSushiStaked: BigDecimal
  newSushiStaked_not: BigDecimal
  newSushiStaked_gt: BigDecimal
  newSushiStaked_lt: BigDecimal
  newSushiStaked_gte: BigDecimal
  newSushiStaked_lte: BigDecimal
  newSushiStaked_in: [BigDecimal!]
  newSushiStaked_not_in: [BigDecimal!]
  newSushiHarvested: BigDecimal
  newSushiHarvested_not: BigDecimal
  newSushiHarvested_gt: BigDecimal
  newSushiHarvested_lt: BigDecimal
  newSushiHarvested_gte: BigDecimal
  newSushiHarvested_lte: BigDecimal
  newSushiHarvested_in: [BigDecimal!]
  newSushiHarvested_not_in: [BigDecimal!]
  newFeeAmount: BigDecimal
  newFeeAmount_not: BigDecimal
  newFeeAmount_gt: BigDecimal
  newFeeAmount_lt: BigDecimal
  newFeeAmount_gte: BigDecimal
  newFeeAmount_lte: BigDecimal
  newFeeAmount_in: [BigDecimal!]
  newFeeAmount_not_in: [BigDecimal!]
  newXSushiBurned: BigDecimal
  newXSushiBurned_not: BigDecimal
  newXSushiBurned_gt: BigDecimal
  newXSushiBurned_lt: BigDecimal
  newXSushiBurned_gte: BigDecimal
  newXSushiBurned_lte: BigDecimal
  newXSushiBurned_in: [BigDecimal!]
  newXSushiBurned_not_in: [BigDecimal!]
  newXSushiMinted: BigDecimal
  newXSushiMinted_not: BigDecimal
  newXSushiMinted_gt: BigDecimal
  newXSushiMinted_lt: BigDecimal
  newXSushiMinted_gte: BigDecimal
  newXSushiMinted_lte: BigDecimal
  newXSushiMinted_in: [BigDecimal!]
  newXSushiMinted_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WeekSnapshot_filter]
  or: [WeekSnapshot_filter]
}

enum WeekSnapshot_orderBy {
  id
  date
  userCount
  transactionCount
  sushiSupply
  xSushiSupply
  sushiStaked
  sushiHarvested
  totalFeeAmount
  xSushiBurned
  xSushiMinted
  xSushiSushiRatio
  sushiXsushiRatio
  apr1m
  apr3m
  apr6m
  apr12m
  newTransactions
  newSushiStaked
  newSushiHarvested
  newFeeAmount
  newXSushiBurned
  newXSushiMinted
}

type XSushi {
  id: ID!
  userCount: BigInt!
  transactionCount: BigInt!
  sushiSupply: BigDecimal!
  xSushiSupply: BigDecimal!
  sushiStaked: BigDecimal!
  sushiHarvested: BigDecimal!
  totalFeeAmount: BigDecimal!
  xSushiBurned: BigDecimal!
  xSushiMinted: BigDecimal!
  xSushiSushiRatio: BigDecimal!
  sushiXsushiRatio: BigDecimal!
  apr1m: BigDecimal!
  apr3m: BigDecimal!
  apr6m: BigDecimal!
  apr12m: BigDecimal!
  aprUpdatedAtTimestamp: BigInt!
  sourceName: String
}

input XSushi_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  sushiSupply: BigDecimal
  sushiSupply_not: BigDecimal
  sushiSupply_gt: BigDecimal
  sushiSupply_lt: BigDecimal
  sushiSupply_gte: BigDecimal
  sushiSupply_lte: BigDecimal
  sushiSupply_in: [BigDecimal!]
  sushiSupply_not_in: [BigDecimal!]
  xSushiSupply: BigDecimal
  xSushiSupply_not: BigDecimal
  xSushiSupply_gt: BigDecimal
  xSushiSupply_lt: BigDecimal
  xSushiSupply_gte: BigDecimal
  xSushiSupply_lte: BigDecimal
  xSushiSupply_in: [BigDecimal!]
  xSushiSupply_not_in: [BigDecimal!]
  sushiStaked: BigDecimal
  sushiStaked_not: BigDecimal
  sushiStaked_gt: BigDecimal
  sushiStaked_lt: BigDecimal
  sushiStaked_gte: BigDecimal
  sushiStaked_lte: BigDecimal
  sushiStaked_in: [BigDecimal!]
  sushiStaked_not_in: [BigDecimal!]
  sushiHarvested: BigDecimal
  sushiHarvested_not: BigDecimal
  sushiHarvested_gt: BigDecimal
  sushiHarvested_lt: BigDecimal
  sushiHarvested_gte: BigDecimal
  sushiHarvested_lte: BigDecimal
  sushiHarvested_in: [BigDecimal!]
  sushiHarvested_not_in: [BigDecimal!]
  totalFeeAmount: BigDecimal
  totalFeeAmount_not: BigDecimal
  totalFeeAmount_gt: BigDecimal
  totalFeeAmount_lt: BigDecimal
  totalFeeAmount_gte: BigDecimal
  totalFeeAmount_lte: BigDecimal
  totalFeeAmount_in: [BigDecimal!]
  totalFeeAmount_not_in: [BigDecimal!]
  xSushiBurned: BigDecimal
  xSushiBurned_not: BigDecimal
  xSushiBurned_gt: BigDecimal
  xSushiBurned_lt: BigDecimal
  xSushiBurned_gte: BigDecimal
  xSushiBurned_lte: BigDecimal
  xSushiBurned_in: [BigDecimal!]
  xSushiBurned_not_in: [BigDecimal!]
  xSushiMinted: BigDecimal
  xSushiMinted_not: BigDecimal
  xSushiMinted_gt: BigDecimal
  xSushiMinted_lt: BigDecimal
  xSushiMinted_gte: BigDecimal
  xSushiMinted_lte: BigDecimal
  xSushiMinted_in: [BigDecimal!]
  xSushiMinted_not_in: [BigDecimal!]
  xSushiSushiRatio: BigDecimal
  xSushiSushiRatio_not: BigDecimal
  xSushiSushiRatio_gt: BigDecimal
  xSushiSushiRatio_lt: BigDecimal
  xSushiSushiRatio_gte: BigDecimal
  xSushiSushiRatio_lte: BigDecimal
  xSushiSushiRatio_in: [BigDecimal!]
  xSushiSushiRatio_not_in: [BigDecimal!]
  sushiXsushiRatio: BigDecimal
  sushiXsushiRatio_not: BigDecimal
  sushiXsushiRatio_gt: BigDecimal
  sushiXsushiRatio_lt: BigDecimal
  sushiXsushiRatio_gte: BigDecimal
  sushiXsushiRatio_lte: BigDecimal
  sushiXsushiRatio_in: [BigDecimal!]
  sushiXsushiRatio_not_in: [BigDecimal!]
  apr1m: BigDecimal
  apr1m_not: BigDecimal
  apr1m_gt: BigDecimal
  apr1m_lt: BigDecimal
  apr1m_gte: BigDecimal
  apr1m_lte: BigDecimal
  apr1m_in: [BigDecimal!]
  apr1m_not_in: [BigDecimal!]
  apr3m: BigDecimal
  apr3m_not: BigDecimal
  apr3m_gt: BigDecimal
  apr3m_lt: BigDecimal
  apr3m_gte: BigDecimal
  apr3m_lte: BigDecimal
  apr3m_in: [BigDecimal!]
  apr3m_not_in: [BigDecimal!]
  apr6m: BigDecimal
  apr6m_not: BigDecimal
  apr6m_gt: BigDecimal
  apr6m_lt: BigDecimal
  apr6m_gte: BigDecimal
  apr6m_lte: BigDecimal
  apr6m_in: [BigDecimal!]
  apr6m_not_in: [BigDecimal!]
  apr12m: BigDecimal
  apr12m_not: BigDecimal
  apr12m_gt: BigDecimal
  apr12m_lt: BigDecimal
  apr12m_gte: BigDecimal
  apr12m_lte: BigDecimal
  apr12m_in: [BigDecimal!]
  apr12m_not_in: [BigDecimal!]
  aprUpdatedAtTimestamp: BigInt
  aprUpdatedAtTimestamp_not: BigInt
  aprUpdatedAtTimestamp_gt: BigInt
  aprUpdatedAtTimestamp_lt: BigInt
  aprUpdatedAtTimestamp_gte: BigInt
  aprUpdatedAtTimestamp_lte: BigInt
  aprUpdatedAtTimestamp_in: [BigInt!]
  aprUpdatedAtTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [XSushi_filter]
  or: [XSushi_filter]
}

enum XSushi_orderBy {
  id
  userCount
  transactionCount
  sushiSupply
  xSushiSupply
  sushiStaked
  sushiHarvested
  totalFeeAmount
  xSushiBurned
  xSushiMinted
  xSushiSushiRatio
  sushiXsushiRatio
  apr1m
  apr3m
  apr6m
  apr12m
  aprUpdatedAtTimestamp
}

type Balance {
  id: ID!
  token: Token!
  user: User!
  share: BigInt!
  sourceName: String
}

input Balance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  share: BigInt
  share_not: BigInt
  share_gt: BigInt
  share_lt: BigInt
  share_gte: BigInt
  share_lte: BigInt
  share_in: [BigInt!]
  share_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Balance_filter]
  or: [Balance_filter]
}

enum Balance_orderBy {
  id
  token
  token__id
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  user
  user__id
  user__block
  user__timestamp
  share
}

type BentoBox {
  """ BentoBox address """
  id: ID!
  """ Protocols that belong to this bento box """
  protocols(skip: Int = 0, first: Int = 100, orderBy: Protocol_orderBy, orderDirection: OrderDirection, where: Protocol_filter): [Protocol!]
  """ Users that belong to this bento box """
  users(skip: Int = 0, first: Int = 100, orderBy: User_orderBy, orderDirection: OrderDirection, where: User_filter): [User!]
  """ Tokens that belong to this bento box """
  tokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]
  """ Master contracts that belong to this bento box """
  masterContracts(skip: Int = 0, first: Int = 100, orderBy: MasterContract_orderBy, orderDirection: OrderDirection, where: MasterContract_filter): [MasterContract!]!
  """ Clones that belong to this bento box """
  clones(skip: Int = 0, first: Int = 100, orderBy: Clone_orderBy, orderDirection: OrderDirection, where: Clone_filter): [Clone!]
  """ Flash loans that belong to this bento box """
  flashloans(skip: Int = 0, first: Int = 100, orderBy: FlashLoan_orderBy, orderDirection: OrderDirection, where: FlashLoan_filter): [FlashLoan!]
  """ Transactions that belong to this bento box """
  transactions(skip: Int = 0, first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, where: Transaction_filter): [Transaction!]
  """ Totals that belong to this bento box """
  totals(skip: Int = 0, first: Int = 100, orderBy: Rebase_orderBy, orderDirection: OrderDirection, where: Rebase_filter): [Rebase!]
  sourceName: String
}

type BentoBoxKpi {
  """ BentoBox address """
  id: ID!
  """ Deposit count """
  depositCount: BigInt!
  """ Withdraw count """
  withdrawCount: BigInt!
  """ Transfer count """
  transferCount: BigInt!
  """ Protocol count """
  protocolCount: BigInt!
  """ User count """
  userCount: BigInt!
  """ Token count """
  tokenCount: BigInt!
  """ Master contract count """
  masterContractCount: BigInt!
  """ Clone count """
  cloneCount: BigInt!
  """ Flash loan count """
  flashloanCount: BigInt!
  """ Transaction count """
  transactionCount: BigInt!
  """ Strategy count """
  strategyCount: BigInt!
  """ Active strategy count """
  activeStrategyCount: BigInt!
  """ Pending strategy count """
  pendingStrategyCount: BigInt!
  chainId: BigInt
  sourceName: String
}

input BentoBoxKpi_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  depositCount: BigInt
  depositCount_not: BigInt
  depositCount_gt: BigInt
  depositCount_lt: BigInt
  depositCount_gte: BigInt
  depositCount_lte: BigInt
  depositCount_in: [BigInt!]
  depositCount_not_in: [BigInt!]
  withdrawCount: BigInt
  withdrawCount_not: BigInt
  withdrawCount_gt: BigInt
  withdrawCount_lt: BigInt
  withdrawCount_gte: BigInt
  withdrawCount_lte: BigInt
  withdrawCount_in: [BigInt!]
  withdrawCount_not_in: [BigInt!]
  transferCount: BigInt
  transferCount_not: BigInt
  transferCount_gt: BigInt
  transferCount_lt: BigInt
  transferCount_gte: BigInt
  transferCount_lte: BigInt
  transferCount_in: [BigInt!]
  transferCount_not_in: [BigInt!]
  protocolCount: BigInt
  protocolCount_not: BigInt
  protocolCount_gt: BigInt
  protocolCount_lt: BigInt
  protocolCount_gte: BigInt
  protocolCount_lte: BigInt
  protocolCount_in: [BigInt!]
  protocolCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  masterContractCount: BigInt
  masterContractCount_not: BigInt
  masterContractCount_gt: BigInt
  masterContractCount_lt: BigInt
  masterContractCount_gte: BigInt
  masterContractCount_lte: BigInt
  masterContractCount_in: [BigInt!]
  masterContractCount_not_in: [BigInt!]
  cloneCount: BigInt
  cloneCount_not: BigInt
  cloneCount_gt: BigInt
  cloneCount_lt: BigInt
  cloneCount_gte: BigInt
  cloneCount_lte: BigInt
  cloneCount_in: [BigInt!]
  cloneCount_not_in: [BigInt!]
  flashloanCount: BigInt
  flashloanCount_not: BigInt
  flashloanCount_gt: BigInt
  flashloanCount_lt: BigInt
  flashloanCount_gte: BigInt
  flashloanCount_lte: BigInt
  flashloanCount_in: [BigInt!]
  flashloanCount_not_in: [BigInt!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  strategyCount: BigInt
  strategyCount_not: BigInt
  strategyCount_gt: BigInt
  strategyCount_lt: BigInt
  strategyCount_gte: BigInt
  strategyCount_lte: BigInt
  strategyCount_in: [BigInt!]
  strategyCount_not_in: [BigInt!]
  activeStrategyCount: BigInt
  activeStrategyCount_not: BigInt
  activeStrategyCount_gt: BigInt
  activeStrategyCount_lt: BigInt
  activeStrategyCount_gte: BigInt
  activeStrategyCount_lte: BigInt
  activeStrategyCount_in: [BigInt!]
  activeStrategyCount_not_in: [BigInt!]
  pendingStrategyCount: BigInt
  pendingStrategyCount_not: BigInt
  pendingStrategyCount_gt: BigInt
  pendingStrategyCount_lt: BigInt
  pendingStrategyCount_gte: BigInt
  pendingStrategyCount_lte: BigInt
  pendingStrategyCount_in: [BigInt!]
  pendingStrategyCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BentoBoxKpi_filter]
  or: [BentoBoxKpi_filter]
}

enum BentoBoxKpi_orderBy {
  id
  depositCount
  withdrawCount
  transferCount
  protocolCount
  userCount
  tokenCount
  masterContractCount
  cloneCount
  flashloanCount
  transactionCount
  strategyCount
  activeStrategyCount
  pendingStrategyCount
}

input BentoBox_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocols_: Protocol_filter
  users_: User_filter
  tokens_: Token_filter
  masterContracts_: MasterContract_filter
  clones_: Clone_filter
  flashloans_: FlashLoan_filter
  transactions_: Transaction_filter
  totals_: Rebase_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BentoBox_filter]
  or: [BentoBox_filter]
}

enum BentoBox_orderBy {
  id
  protocols
  users
  tokens
  masterContracts
  clones
  flashloans
  transactions
  totals
}

type Clone {
  """ Clone address """
  id: ID!
  """ BentoBox this clone belongs to """
  bentoBox: BentoBox!
  """ Master contract this clone belongs to """
  masterContract: MasterContract!
  """ Clone data """
  data: Bytes!
  """ Block number of this clone """
  block: BigInt!
  """ Timestamp of this clone """
  timestamp: BigInt!
  sourceName: String
}

input Clone_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bentoBox: String
  bentoBox_not: String
  bentoBox_gt: String
  bentoBox_lt: String
  bentoBox_gte: String
  bentoBox_lte: String
  bentoBox_in: [String!]
  bentoBox_not_in: [String!]
  bentoBox_contains: String
  bentoBox_contains_nocase: String
  bentoBox_not_contains: String
  bentoBox_not_contains_nocase: String
  bentoBox_starts_with: String
  bentoBox_starts_with_nocase: String
  bentoBox_not_starts_with: String
  bentoBox_not_starts_with_nocase: String
  bentoBox_ends_with: String
  bentoBox_ends_with_nocase: String
  bentoBox_not_ends_with: String
  bentoBox_not_ends_with_nocase: String
  bentoBox_: BentoBox_filter
  masterContract: String
  masterContract_not: String
  masterContract_gt: String
  masterContract_lt: String
  masterContract_gte: String
  masterContract_lte: String
  masterContract_in: [String!]
  masterContract_not_in: [String!]
  masterContract_contains: String
  masterContract_contains_nocase: String
  masterContract_not_contains: String
  masterContract_not_contains_nocase: String
  masterContract_starts_with: String
  masterContract_starts_with_nocase: String
  masterContract_not_starts_with: String
  masterContract_not_starts_with_nocase: String
  masterContract_ends_with: String
  masterContract_ends_with_nocase: String
  masterContract_not_ends_with: String
  masterContract_not_ends_with_nocase: String
  masterContract_: MasterContract_filter
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Clone_filter]
  or: [Clone_filter]
}

enum Clone_orderBy {
  id
  bentoBox
  bentoBox__id
  masterContract
  masterContract__id
  masterContract__approved
  data
  block
  timestamp
}

type FlashLoan {
  """ Concatenation of transaction and log index """
  id: ID!
  """ BentoBox this flash loan belongs to """
  bentoBox: BentoBox!
  """ Borrower address """
  borrower: Bytes!
  """ Receiver address """
  receiver: Bytes!
  """ Token this flash loan belongs to """
  token: Token!
  """ Amount of this flash loan """
  amount: BigInt!
  """ Fee amount of this flash loan """
  feeAmount: BigInt!
  """ Block number of this flash loan """
  block: BigInt!
  """ Timestamp of this flash loan """
  timestamp: BigInt!
  sourceName: String
}

input FlashLoan_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bentoBox: String
  bentoBox_not: String
  bentoBox_gt: String
  bentoBox_lt: String
  bentoBox_gte: String
  bentoBox_lte: String
  bentoBox_in: [String!]
  bentoBox_not_in: [String!]
  bentoBox_contains: String
  bentoBox_contains_nocase: String
  bentoBox_not_contains: String
  bentoBox_not_contains_nocase: String
  bentoBox_starts_with: String
  bentoBox_starts_with_nocase: String
  bentoBox_not_starts_with: String
  bentoBox_not_starts_with_nocase: String
  bentoBox_ends_with: String
  bentoBox_ends_with_nocase: String
  bentoBox_not_ends_with: String
  bentoBox_not_ends_with_nocase: String
  bentoBox_: BentoBox_filter
  borrower: Bytes
  borrower_not: Bytes
  borrower_gt: Bytes
  borrower_lt: Bytes
  borrower_gte: Bytes
  borrower_lte: Bytes
  borrower_in: [Bytes!]
  borrower_not_in: [Bytes!]
  borrower_contains: Bytes
  borrower_not_contains: Bytes
  receiver: Bytes
  receiver_not: Bytes
  receiver_gt: Bytes
  receiver_lt: Bytes
  receiver_gte: Bytes
  receiver_lte: Bytes
  receiver_in: [Bytes!]
  receiver_not_in: [Bytes!]
  receiver_contains: Bytes
  receiver_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  feeAmount: BigInt
  feeAmount_not: BigInt
  feeAmount_gt: BigInt
  feeAmount_lt: BigInt
  feeAmount_gte: BigInt
  feeAmount_lte: BigInt
  feeAmount_in: [BigInt!]
  feeAmount_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FlashLoan_filter]
  or: [FlashLoan_filter]
}

enum FlashLoan_orderBy {
  id
  bentoBox
  bentoBox__id
  borrower
  receiver
  token
  token__id
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  amount
  feeAmount
  block
  timestamp
}

type Harvest {
  """ Concatenation of strategy and block number """
  id: ID!
  """ The Token this harvest belongs to """
  token: Token!
  """ The Strategy this harvest belongs to """
  strategy: Strategy!
  """ The ProfitOrLoss of this harvest """
  profitOrLoss: ProfitOrLoss
  """ The InvestOrDivest of this harvest """
  investOrDivest: InvestOrDivest
  """ Block number of this harvest """
  block: BigInt!
  """ Timestamp of this harvest """
  timestamp: BigInt!
  sourceName: String
}

input Harvest_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  strategy: String
  strategy_not: String
  strategy_gt: String
  strategy_lt: String
  strategy_gte: String
  strategy_lte: String
  strategy_in: [String!]
  strategy_not_in: [String!]
  strategy_contains: String
  strategy_contains_nocase: String
  strategy_not_contains: String
  strategy_not_contains_nocase: String
  strategy_starts_with: String
  strategy_starts_with_nocase: String
  strategy_not_starts_with: String
  strategy_not_starts_with_nocase: String
  strategy_ends_with: String
  strategy_ends_with_nocase: String
  strategy_not_ends_with: String
  strategy_not_ends_with_nocase: String
  strategy_: Strategy_filter
  profitOrLoss: String
  profitOrLoss_not: String
  profitOrLoss_gt: String
  profitOrLoss_lt: String
  profitOrLoss_gte: String
  profitOrLoss_lte: String
  profitOrLoss_in: [String!]
  profitOrLoss_not_in: [String!]
  profitOrLoss_contains: String
  profitOrLoss_contains_nocase: String
  profitOrLoss_not_contains: String
  profitOrLoss_not_contains_nocase: String
  profitOrLoss_starts_with: String
  profitOrLoss_starts_with_nocase: String
  profitOrLoss_not_starts_with: String
  profitOrLoss_not_starts_with_nocase: String
  profitOrLoss_ends_with: String
  profitOrLoss_ends_with_nocase: String
  profitOrLoss_not_ends_with: String
  profitOrLoss_not_ends_with_nocase: String
  profitOrLoss_: ProfitOrLoss_filter
  investOrDivest: String
  investOrDivest_not: String
  investOrDivest_gt: String
  investOrDivest_lt: String
  investOrDivest_gte: String
  investOrDivest_lte: String
  investOrDivest_in: [String!]
  investOrDivest_not_in: [String!]
  investOrDivest_contains: String
  investOrDivest_contains_nocase: String
  investOrDivest_not_contains: String
  investOrDivest_not_contains_nocase: String
  investOrDivest_starts_with: String
  investOrDivest_starts_with_nocase: String
  investOrDivest_not_starts_with: String
  investOrDivest_not_starts_with_nocase: String
  investOrDivest_ends_with: String
  investOrDivest_ends_with_nocase: String
  investOrDivest_not_ends_with: String
  investOrDivest_not_ends_with_nocase: String
  investOrDivest_: InvestOrDivest_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Harvest_filter]
  or: [Harvest_filter]
}

enum Harvest_orderBy {
  id
  token
  token__id
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  strategy
  strategy__id
  strategy__block
  strategy__timestamp
  profitOrLoss
  profitOrLoss__id
  profitOrLoss__elastic
  profitOrLoss__base
  profitOrLoss__amount
  profitOrLoss__block
  profitOrLoss__timestamp
  investOrDivest
  investOrDivest__id
  investOrDivest__elastic
  investOrDivest__base
  investOrDivest__amount
  investOrDivest__block
  investOrDivest__timestamp
  block
  timestamp
}

type InvestOrDivest {
  """ Concatenation of strategy and invest or divest count """
  id: ID!
  """ The Harvest this invest or divest belongs to """
  harvest: Harvest!
  """ The cached token elastic at time of invest or divest"""
  elastic: BigInt!
  """ The cached token base at time of invest or divest"""
  base: BigInt!
  """ Amount of invest or divest """
  amount: BigInt!
  """ Block number of this invest or divest """
  block: BigInt!
  """ Timestamp of this invest or divest """
  timestamp: BigInt!
  sourceName: String
}

input InvestOrDivest_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  harvest: String
  harvest_not: String
  harvest_gt: String
  harvest_lt: String
  harvest_gte: String
  harvest_lte: String
  harvest_in: [String!]
  harvest_not_in: [String!]
  harvest_contains: String
  harvest_contains_nocase: String
  harvest_not_contains: String
  harvest_not_contains_nocase: String
  harvest_starts_with: String
  harvest_starts_with_nocase: String
  harvest_not_starts_with: String
  harvest_not_starts_with_nocase: String
  harvest_ends_with: String
  harvest_ends_with_nocase: String
  harvest_not_ends_with: String
  harvest_not_ends_with_nocase: String
  harvest_: Harvest_filter
  elastic: BigInt
  elastic_not: BigInt
  elastic_gt: BigInt
  elastic_lt: BigInt
  elastic_gte: BigInt
  elastic_lte: BigInt
  elastic_in: [BigInt!]
  elastic_not_in: [BigInt!]
  base: BigInt
  base_not: BigInt
  base_gt: BigInt
  base_lt: BigInt
  base_gte: BigInt
  base_lte: BigInt
  base_in: [BigInt!]
  base_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [InvestOrDivest_filter]
  or: [InvestOrDivest_filter]
}

enum InvestOrDivest_orderBy {
  id
  harvest
  harvest__id
  harvest__block
  harvest__timestamp
  elastic
  base
  amount
  block
  timestamp
}

type MasterContract {
  """ MasterContract address """
  id: ID!
  """ BentoBox this master contract belongs to """
  bentoBox: BentoBox!
  """ Clones that belong to this master contract """
  clones(skip: Int = 0, first: Int = 100, orderBy: Clone_orderBy, orderDirection: OrderDirection, where: Clone_filter): [Clone!]
  """ MasterContractApprovals that belong to this master contract """
  masterContractApprovals(skip: Int = 0, first: Int = 100, orderBy: MasterContractApproval_orderBy, orderDirection: OrderDirection, where: MasterContractApproval_filter): [MasterContractApproval!]
  """ MasterContract is whitelisted by Sushi Operations"""
  approved: Boolean!
  sourceName: String
}

type MasterContractApproval {
  """Concatenation of user adddress and master contract address"""
  id: ID!
  """ MasterContract this master contract approval belongs to """
  masterContract: MasterContract!
  """ User this master contract approval belongs to """
  user: User!
  """ If user has approved this master contract """
  approved: Boolean!
  sourceName: String
}

input MasterContractApproval_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  masterContract: String
  masterContract_not: String
  masterContract_gt: String
  masterContract_lt: String
  masterContract_gte: String
  masterContract_lte: String
  masterContract_in: [String!]
  masterContract_not_in: [String!]
  masterContract_contains: String
  masterContract_contains_nocase: String
  masterContract_not_contains: String
  masterContract_not_contains_nocase: String
  masterContract_starts_with: String
  masterContract_starts_with_nocase: String
  masterContract_not_starts_with: String
  masterContract_not_starts_with_nocase: String
  masterContract_ends_with: String
  masterContract_ends_with_nocase: String
  masterContract_not_ends_with: String
  masterContract_not_ends_with_nocase: String
  masterContract_: MasterContract_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  approved: Boolean
  approved_not: Boolean
  approved_in: [Boolean!]
  approved_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MasterContractApproval_filter]
  or: [MasterContractApproval_filter]
}

enum MasterContractApproval_orderBy {
  id
  masterContract
  masterContract__id
  masterContract__approved
  user
  user__id
  user__block
  user__timestamp
  approved
}

input MasterContract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bentoBox: String
  bentoBox_not: String
  bentoBox_gt: String
  bentoBox_lt: String
  bentoBox_gte: String
  bentoBox_lte: String
  bentoBox_in: [String!]
  bentoBox_not_in: [String!]
  bentoBox_contains: String
  bentoBox_contains_nocase: String
  bentoBox_not_contains: String
  bentoBox_not_contains_nocase: String
  bentoBox_starts_with: String
  bentoBox_starts_with_nocase: String
  bentoBox_not_starts_with: String
  bentoBox_not_starts_with_nocase: String
  bentoBox_ends_with: String
  bentoBox_ends_with_nocase: String
  bentoBox_not_ends_with: String
  bentoBox_not_ends_with_nocase: String
  bentoBox_: BentoBox_filter
  clones_: Clone_filter
  masterContractApprovals_: MasterContractApproval_filter
  approved: Boolean
  approved_not: Boolean
  approved_in: [Boolean!]
  approved_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MasterContract_filter]
  or: [MasterContract_filter]
}

enum MasterContract_orderBy {
  id
  bentoBox
  bentoBox__id
  clones
  masterContractApprovals
  approved
}

type ProfitOrLoss {
  """ Concatenation of strategy and profit or loss count """
  id: ID!
  """ The Harvest this profit or loss belongs to """
  harvest: Harvest!
  """ The cached token elastic at time of profit or loss"""
  elastic: BigInt!
  """ The cached token base at time of profit or loss"""
  base: BigInt!
  """ Amount of profit or loss """
  amount: BigInt!
  """ Block number of this profit or loss """
  block: BigInt!
  """ Timestamp of this profit or loss """
  timestamp: BigInt!
  sourceName: String
}

input ProfitOrLoss_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  harvest: String
  harvest_not: String
  harvest_gt: String
  harvest_lt: String
  harvest_gte: String
  harvest_lte: String
  harvest_in: [String!]
  harvest_not_in: [String!]
  harvest_contains: String
  harvest_contains_nocase: String
  harvest_not_contains: String
  harvest_not_contains_nocase: String
  harvest_starts_with: String
  harvest_starts_with_nocase: String
  harvest_not_starts_with: String
  harvest_not_starts_with_nocase: String
  harvest_ends_with: String
  harvest_ends_with_nocase: String
  harvest_not_ends_with: String
  harvest_not_ends_with_nocase: String
  harvest_: Harvest_filter
  elastic: BigInt
  elastic_not: BigInt
  elastic_gt: BigInt
  elastic_lt: BigInt
  elastic_gte: BigInt
  elastic_lte: BigInt
  elastic_in: [BigInt!]
  elastic_not_in: [BigInt!]
  base: BigInt
  base_not: BigInt
  base_gt: BigInt
  base_lt: BigInt
  base_gte: BigInt
  base_lte: BigInt
  base_in: [BigInt!]
  base_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProfitOrLoss_filter]
  or: [ProfitOrLoss_filter]
}

enum ProfitOrLoss_orderBy {
  id
  harvest
  harvest__id
  harvest__block
  harvest__timestamp
  elastic
  base
  amount
  block
  timestamp
}

type Protocol {
  """ Protocol address """
  id: ID!
  """ BentoBox this protocol belongs to """
  bentoBox: BentoBox!
  sourceName: String
}

input Protocol_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bentoBox: String
  bentoBox_not: String
  bentoBox_gt: String
  bentoBox_lt: String
  bentoBox_gte: String
  bentoBox_lte: String
  bentoBox_in: [String!]
  bentoBox_not_in: [String!]
  bentoBox_contains: String
  bentoBox_contains_nocase: String
  bentoBox_not_contains: String
  bentoBox_not_contains_nocase: String
  bentoBox_starts_with: String
  bentoBox_starts_with_nocase: String
  bentoBox_not_starts_with: String
  bentoBox_not_starts_with_nocase: String
  bentoBox_ends_with: String
  bentoBox_ends_with_nocase: String
  bentoBox_not_ends_with: String
  bentoBox_not_ends_with_nocase: String
  bentoBox_: BentoBox_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Protocol_filter]
  or: [Protocol_filter]
}

enum Protocol_orderBy {
  id
  bentoBox
  bentoBox__id
}

type Rebase {
  """ Token address """
  id: ID!
  """ BentoBox this rebase belongs to """
  bentoBox: BentoBox!
  """ Token this rebase belongs to """
  token: Token!
  """ Base (Share) """
  base: BigInt!
  """ Elastic (Amount) """
  elastic: BigInt!
  """ created at block, used internally to know when to ignore updates for the rebase 
  """
  createdAtBlock: BigInt!
  chainId: BigInt!
  sourceName: String
}

input Rebase_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bentoBox: String
  bentoBox_not: String
  bentoBox_gt: String
  bentoBox_lt: String
  bentoBox_gte: String
  bentoBox_lte: String
  bentoBox_in: [String!]
  bentoBox_not_in: [String!]
  bentoBox_contains: String
  bentoBox_contains_nocase: String
  bentoBox_not_contains: String
  bentoBox_not_contains_nocase: String
  bentoBox_starts_with: String
  bentoBox_starts_with_nocase: String
  bentoBox_not_starts_with: String
  bentoBox_not_starts_with_nocase: String
  bentoBox_ends_with: String
  bentoBox_ends_with_nocase: String
  bentoBox_not_ends_with: String
  bentoBox_not_ends_with_nocase: String
  bentoBox_: BentoBox_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  base: BigInt
  base_not: BigInt
  base_gt: BigInt
  base_lt: BigInt
  base_gte: BigInt
  base_lte: BigInt
  base_in: [BigInt!]
  base_not_in: [BigInt!]
  elastic: BigInt
  elastic_not: BigInt
  elastic_gt: BigInt
  elastic_lt: BigInt
  elastic_gte: BigInt
  elastic_lte: BigInt
  elastic_in: [BigInt!]
  elastic_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Rebase_filter]
  or: [Rebase_filter]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
}

enum Rebase_orderBy {
  id
  bentoBox
  bentoBox__id
  token
  token__id
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  base
  elastic
  token__liquidityShares
  token__createdAtBlock
  token__createdAtTimestamp
  createdAtBlock
  token__liquidity
  token__liquidityNative
  token__liquidityUSD
  token__volume
  token__volumeNative
  token__volumeUSD
  token__feesNative
  token__feesUSD
  token__txCount
  token__pairCount
}

type Strategy {
  """ Strategy address """
  id: ID!
  """ StrategyKpi of this strategy """
  kpi: StrategyKpi!
  """ Harvests which belong to this strategy """
  harvests(skip: Int = 0, first: Int = 100, orderBy: Harvest_orderBy, orderDirection: OrderDirection, where: Harvest_filter): [Harvest!]
  """ The Token this strategy belongs to """
  token: Token!
  """ Block number of this strategy """
  block: BigInt!
  """ Timestamp of this strategy """
  timestamp: BigInt!
  sourceName: String
}

type StrategyData {
  """ Token address """
  id: ID!
  """ Strategy start date """
  strategyStartDate: BigInt!
  """ Target percentage """
  targetPercentage: BigInt!
  """ BentoBox's understanding of the balance """
  balance: BigInt!
  sourceName: String
}

input StrategyData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  strategyStartDate: BigInt
  strategyStartDate_not: BigInt
  strategyStartDate_gt: BigInt
  strategyStartDate_lt: BigInt
  strategyStartDate_gte: BigInt
  strategyStartDate_lte: BigInt
  strategyStartDate_in: [BigInt!]
  strategyStartDate_not_in: [BigInt!]
  targetPercentage: BigInt
  targetPercentage_not: BigInt
  targetPercentage_gt: BigInt
  targetPercentage_lt: BigInt
  targetPercentage_gte: BigInt
  targetPercentage_lte: BigInt
  targetPercentage_in: [BigInt!]
  targetPercentage_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [StrategyData_filter]
  or: [StrategyData_filter]
}

enum StrategyData_orderBy {
  id
  strategyStartDate
  targetPercentage
  balance
}

type StrategyKpi {
  """ Strategy address """
  id: ID!
  """ Harvest count """
  harvestCount: BigInt!
  """ Invest or divest count """
  investOrDivestCount: BigInt!
  """ Invest count """
  investCount: BigInt!
  """ Invested """
  invested: BigInt!
  """ Divest count """
  divestCount: BigInt!
  """ Divested"""
  divested: BigInt!
  """ Profit or loss count """
  profitOrLossCount: BigInt!
  """ Profit count """
  profitCount: BigInt!
  """ Loss count """
  lossCount: BigInt!
  """ Profit & Loss"""
  profitAndLoss: BigInt!
  """ APR """
  apr: BigDecimal
  """ Utilization """
  utilization: BigDecimal
  chainId: BigInt
  sourceName: String
}

input StrategyKpi_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  harvestCount: BigInt
  harvestCount_not: BigInt
  harvestCount_gt: BigInt
  harvestCount_lt: BigInt
  harvestCount_gte: BigInt
  harvestCount_lte: BigInt
  harvestCount_in: [BigInt!]
  harvestCount_not_in: [BigInt!]
  investOrDivestCount: BigInt
  investOrDivestCount_not: BigInt
  investOrDivestCount_gt: BigInt
  investOrDivestCount_lt: BigInt
  investOrDivestCount_gte: BigInt
  investOrDivestCount_lte: BigInt
  investOrDivestCount_in: [BigInt!]
  investOrDivestCount_not_in: [BigInt!]
  investCount: BigInt
  investCount_not: BigInt
  investCount_gt: BigInt
  investCount_lt: BigInt
  investCount_gte: BigInt
  investCount_lte: BigInt
  investCount_in: [BigInt!]
  investCount_not_in: [BigInt!]
  invested: BigInt
  invested_not: BigInt
  invested_gt: BigInt
  invested_lt: BigInt
  invested_gte: BigInt
  invested_lte: BigInt
  invested_in: [BigInt!]
  invested_not_in: [BigInt!]
  divestCount: BigInt
  divestCount_not: BigInt
  divestCount_gt: BigInt
  divestCount_lt: BigInt
  divestCount_gte: BigInt
  divestCount_lte: BigInt
  divestCount_in: [BigInt!]
  divestCount_not_in: [BigInt!]
  divested: BigInt
  divested_not: BigInt
  divested_gt: BigInt
  divested_lt: BigInt
  divested_gte: BigInt
  divested_lte: BigInt
  divested_in: [BigInt!]
  divested_not_in: [BigInt!]
  profitOrLossCount: BigInt
  profitOrLossCount_not: BigInt
  profitOrLossCount_gt: BigInt
  profitOrLossCount_lt: BigInt
  profitOrLossCount_gte: BigInt
  profitOrLossCount_lte: BigInt
  profitOrLossCount_in: [BigInt!]
  profitOrLossCount_not_in: [BigInt!]
  profitCount: BigInt
  profitCount_not: BigInt
  profitCount_gt: BigInt
  profitCount_lt: BigInt
  profitCount_gte: BigInt
  profitCount_lte: BigInt
  profitCount_in: [BigInt!]
  profitCount_not_in: [BigInt!]
  lossCount: BigInt
  lossCount_not: BigInt
  lossCount_gt: BigInt
  lossCount_lt: BigInt
  lossCount_gte: BigInt
  lossCount_lte: BigInt
  lossCount_in: [BigInt!]
  lossCount_not_in: [BigInt!]
  profitAndLoss: BigInt
  profitAndLoss_not: BigInt
  profitAndLoss_gt: BigInt
  profitAndLoss_lt: BigInt
  profitAndLoss_gte: BigInt
  profitAndLoss_lte: BigInt
  profitAndLoss_in: [BigInt!]
  profitAndLoss_not_in: [BigInt!]
  apr: BigDecimal
  apr_not: BigDecimal
  apr_gt: BigDecimal
  apr_lt: BigDecimal
  apr_gte: BigDecimal
  apr_lte: BigDecimal
  apr_in: [BigDecimal!]
  apr_not_in: [BigDecimal!]
  utilization: BigDecimal
  utilization_not: BigDecimal
  utilization_gt: BigDecimal
  utilization_lt: BigDecimal
  utilization_gte: BigDecimal
  utilization_lte: BigDecimal
  utilization_in: [BigDecimal!]
  utilization_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [StrategyKpi_filter]
  or: [StrategyKpi_filter]
}

enum StrategyKpi_orderBy {
  id
  harvestCount
  investOrDivestCount
  investCount
  invested
  divestCount
  divested
  profitOrLossCount
  profitCount
  lossCount
  profitAndLoss
  apr
  utilization
}

input Strategy_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  kpi: String
  kpi_not: String
  kpi_gt: String
  kpi_lt: String
  kpi_gte: String
  kpi_lte: String
  kpi_in: [String!]
  kpi_not_in: [String!]
  kpi_contains: String
  kpi_contains_nocase: String
  kpi_not_contains: String
  kpi_not_contains_nocase: String
  kpi_starts_with: String
  kpi_starts_with_nocase: String
  kpi_not_starts_with: String
  kpi_not_starts_with_nocase: String
  kpi_ends_with: String
  kpi_ends_with_nocase: String
  kpi_not_ends_with: String
  kpi_not_ends_with_nocase: String
  kpi_: StrategyKpi_filter
  harvests_: Harvest_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Strategy_filter]
  or: [Strategy_filter]
}

enum Strategy_orderBy {
  id
  kpi
  kpi__id
  kpi__harvestCount
  kpi__investOrDivestCount
  kpi__investCount
  kpi__invested
  kpi__divestCount
  kpi__divested
  kpi__profitOrLossCount
  kpi__profitCount
  kpi__lossCount
  kpi__profitAndLoss
  kpi__apr
  kpi__utilization
  harvests
  token
  token__id
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  block
  timestamp
}

type Token {
  """ Token address """
  id: ID!
  """ The BentoBox this token belongs to """
  bentoBox: BentoBox!
  """ Rebase """
  rebase: Rebase!
  """ Strategies, past and present, which belong to this token """
  strategies(skip: Int = 0, first: Int = 100, orderBy: Strategy_orderBy, orderDirection: OrderDirection, where: Strategy_filter): [Strategy!]
  """ Symbol of the token """
  symbol: String!
  """ if symbol was successfully retrieved """
  symbolSuccess: Boolean!
  """ Name of the token """
  name: String!
  """ if name was successfully retrieved """
  nameSuccess: Boolean!
  """ Decimals of the token """
  decimals: BigInt!
  """ if decimals were successfully retrieved """
  decimalsSuccess: Boolean!
  liquidityShares: BigInt!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  """ Token Price """
  price: TokenPrice!
  """ Liquidity """
  liquidity: BigInt!
  """ Liquidity in native """
  liquidityNative: BigDecimal!
  """ Liquidity in USD """
  liquidityUSD: BigDecimal!
  """ Volume """
  volume: BigDecimal!
  """ Volume in native """
  volumeNative: BigDecimal!
  """ Volume in USD """
  volumeUSD: BigDecimal!
  """ Untracked Volume in USD """
  untrackedVolumeUSD: BigDecimal!
  """ Fee in USD """
  feesNative: BigDecimal!
  """ Volume in USD """
  feesUSD: BigDecimal!
  """ Count of all the transactions """
  txCount: BigInt!
  """ Count of all the pairs """
  pairCount: BigInt!
  """ All pairs where this token is involved in """
  pairs(skip: Int = 0, first: Int = 100, orderBy: _TokenPair_orderBy, orderDirection: OrderDirection, where: _TokenPair_filter): [_TokenPair!]!
  chainId: BigInt!
  source: String!
  sourceName: String
}

type TokenKpi {
  """ Token address """
  id: ID!
  """ Liquidity """
  liquidity: BigInt!
  """ Strategy count """
  strategyCount: BigInt!
  sourceName: String
}

input TokenKpi_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  strategyCount: BigInt
  strategyCount_not: BigInt
  strategyCount_gt: BigInt
  strategyCount_lt: BigInt
  strategyCount_gte: BigInt
  strategyCount_lte: BigInt
  strategyCount_in: [BigInt!]
  strategyCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenKpi_filter]
  or: [TokenKpi_filter]
}

enum TokenKpi_orderBy {
  id
  liquidity
  strategyCount
}

type TokenStrategy {
  """ Token address """
  id: ID!
  """ The Token this strategy belongs to """
  token: Token!
  """ Strategy address """
  strategy: Strategy
  """ Pending strategy address """
  pendingStrategy: Strategy
  """ The Strategy data """
  data: StrategyData!
  """ The block number of this strategy """
  block: BigInt!
  """ The timestamp of this strategy """
  timestamp: BigInt!
  sourceName: String
}

input TokenStrategy_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  strategy: String
  strategy_not: String
  strategy_gt: String
  strategy_lt: String
  strategy_gte: String
  strategy_lte: String
  strategy_in: [String!]
  strategy_not_in: [String!]
  strategy_contains: String
  strategy_contains_nocase: String
  strategy_not_contains: String
  strategy_not_contains_nocase: String
  strategy_starts_with: String
  strategy_starts_with_nocase: String
  strategy_not_starts_with: String
  strategy_not_starts_with_nocase: String
  strategy_ends_with: String
  strategy_ends_with_nocase: String
  strategy_not_ends_with: String
  strategy_not_ends_with_nocase: String
  strategy_: Strategy_filter
  pendingStrategy: String
  pendingStrategy_not: String
  pendingStrategy_gt: String
  pendingStrategy_lt: String
  pendingStrategy_gte: String
  pendingStrategy_lte: String
  pendingStrategy_in: [String!]
  pendingStrategy_not_in: [String!]
  pendingStrategy_contains: String
  pendingStrategy_contains_nocase: String
  pendingStrategy_not_contains: String
  pendingStrategy_not_contains_nocase: String
  pendingStrategy_starts_with: String
  pendingStrategy_starts_with_nocase: String
  pendingStrategy_not_starts_with: String
  pendingStrategy_not_starts_with_nocase: String
  pendingStrategy_ends_with: String
  pendingStrategy_ends_with_nocase: String
  pendingStrategy_not_ends_with: String
  pendingStrategy_not_ends_with_nocase: String
  pendingStrategy_: Strategy_filter
  data: String
  data_not: String
  data_gt: String
  data_lt: String
  data_gte: String
  data_lte: String
  data_in: [String!]
  data_not_in: [String!]
  data_contains: String
  data_contains_nocase: String
  data_not_contains: String
  data_not_contains_nocase: String
  data_starts_with: String
  data_starts_with_nocase: String
  data_not_starts_with: String
  data_not_starts_with_nocase: String
  data_ends_with: String
  data_ends_with_nocase: String
  data_not_ends_with: String
  data_not_ends_with_nocase: String
  data_: StrategyData_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenStrategy_filter]
  or: [TokenStrategy_filter]
}

enum TokenStrategy_orderBy {
  id
  token
  token__id
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  strategy
  strategy__id
  strategy__block
  strategy__timestamp
  pendingStrategy
  pendingStrategy__id
  pendingStrategy__block
  pendingStrategy__timestamp
  data
  data__id
  data__strategyStartDate
  data__targetPercentage
  data__balance
  block
  timestamp
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bentoBox: String
  bentoBox_not: String
  bentoBox_gt: String
  bentoBox_lt: String
  bentoBox_gte: String
  bentoBox_lte: String
  bentoBox_in: [String!]
  bentoBox_not_in: [String!]
  bentoBox_contains: String
  bentoBox_contains_nocase: String
  bentoBox_not_contains: String
  bentoBox_not_contains_nocase: String
  bentoBox_starts_with: String
  bentoBox_starts_with_nocase: String
  bentoBox_not_starts_with: String
  bentoBox_not_starts_with_nocase: String
  bentoBox_ends_with: String
  bentoBox_ends_with_nocase: String
  bentoBox_not_ends_with: String
  bentoBox_not_ends_with_nocase: String
  bentoBox_: BentoBox_filter
  rebase: String
  rebase_not: String
  rebase_gt: String
  rebase_lt: String
  rebase_gte: String
  rebase_lte: String
  rebase_in: [String!]
  rebase_not_in: [String!]
  rebase_contains: String
  rebase_contains_nocase: String
  rebase_not_contains: String
  rebase_not_contains_nocase: String
  rebase_starts_with: String
  rebase_starts_with_nocase: String
  rebase_not_starts_with: String
  rebase_not_starts_with_nocase: String
  rebase_ends_with: String
  rebase_ends_with_nocase: String
  rebase_not_ends_with: String
  rebase_not_ends_with_nocase: String
  rebase_: Rebase_filter
  strategies_: Strategy_filter
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  symbolSuccess: Boolean
  symbolSuccess_not: Boolean
  symbolSuccess_in: [Boolean!]
  symbolSuccess_not_in: [Boolean!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  nameSuccess: Boolean
  nameSuccess_not: Boolean
  nameSuccess_in: [Boolean!]
  nameSuccess_not_in: [Boolean!]
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  decimalsSuccess: Boolean
  decimalsSuccess_not: Boolean
  decimalsSuccess_in: [Boolean!]
  decimalsSuccess_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
  liquidityShares: BigInt
  liquidityShares_not: BigInt
  liquidityShares_gt: BigInt
  liquidityShares_lt: BigInt
  liquidityShares_gte: BigInt
  liquidityShares_lte: BigInt
  liquidityShares_in: [BigInt!]
  liquidityShares_not_in: [BigInt!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  price: String
  price_not: String
  price_gt: String
  price_lt: String
  price_gte: String
  price_lte: String
  price_in: [String!]
  price_not_in: [String!]
  price_contains: String
  price_contains_nocase: String
  price_not_contains: String
  price_not_contains_nocase: String
  price_starts_with: String
  price_starts_with_nocase: String
  price_not_starts_with: String
  price_not_starts_with_nocase: String
  price_ends_with: String
  price_ends_with_nocase: String
  price_not_ends_with: String
  price_not_ends_with_nocase: String
  price_: TokenPrice_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  liquidityNative: BigDecimal
  liquidityNative_not: BigDecimal
  liquidityNative_gt: BigDecimal
  liquidityNative_lt: BigDecimal
  liquidityNative_gte: BigDecimal
  liquidityNative_lte: BigDecimal
  liquidityNative_in: [BigDecimal!]
  liquidityNative_not_in: [BigDecimal!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  volume: BigDecimal
  volume_not: BigDecimal
  volume_gt: BigDecimal
  volume_lt: BigDecimal
  volume_gte: BigDecimal
  volume_lte: BigDecimal
  volume_in: [BigDecimal!]
  volume_not_in: [BigDecimal!]
  volumeNative: BigDecimal
  volumeNative_not: BigDecimal
  volumeNative_gt: BigDecimal
  volumeNative_lt: BigDecimal
  volumeNative_gte: BigDecimal
  volumeNative_lte: BigDecimal
  volumeNative_in: [BigDecimal!]
  volumeNative_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  feesNative: BigDecimal
  feesNative_not: BigDecimal
  feesNative_gt: BigDecimal
  feesNative_lt: BigDecimal
  feesNative_gte: BigDecimal
  feesNative_lte: BigDecimal
  feesNative_in: [BigDecimal!]
  feesNative_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  pairs_: _TokenPair_filter
}

enum Token_orderBy {
  id
  bentoBox
  bentoBox__id
  rebase
  rebase__id
  rebase__base
  rebase__elastic
  strategies
  symbol
  symbolSuccess
  name
  nameSuccess
  decimals
  decimalsSuccess
  liquidityShares
  rebase__createdAtBlock
  createdAtBlock
  createdAtTimestamp
  price
  price__id
  price__derivedNative
  price__lastUsdPrice
  liquidity
  liquidityNative
  liquidityUSD
  volume
  volumeNative
  volumeUSD
  untrackedVolumeUSD
  feesNative
  feesUSD
  txCount
  pairCount
  pairs
}

enum FuroStatus {
  ACTIVE
  CANCELLED
}

type Global {
  id: ID!
  vestingCount: BigInt!
  streamCount: BigInt!
  userCount: BigInt!
  transactionCount: BigInt!
  sourceName: String
}

input Global_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  vestingCount: BigInt
  vestingCount_not: BigInt
  vestingCount_gt: BigInt
  vestingCount_lt: BigInt
  vestingCount_gte: BigInt
  vestingCount_lte: BigInt
  vestingCount_in: [BigInt!]
  vestingCount_not_in: [BigInt!]
  streamCount: BigInt
  streamCount_not: BigInt
  streamCount_gt: BigInt
  streamCount_lt: BigInt
  streamCount_gte: BigInt
  streamCount_lte: BigInt
  streamCount_in: [BigInt!]
  streamCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Global_filter]
  or: [Global_filter]
}

enum Global_orderBy {
  id
  vestingCount
  streamCount
  userCount
  transactionCount
}

type Stream {
  id: ID!
  recipient: User!
  """ Initial shares """
  initialShares: BigInt!
  """ Initial amount """
  initialAmount: BigInt!
  """ Extended shares, increases for each time the stream is updated with a top up amount 
  """
  extendedShares: BigInt!
  """ Set when a stream is extended, useful to keep track of how much many shares a stream contained after extending 
  """
  initialSharesExtended: BigInt!
  """ Amount that has been withdrawn after extending the stream """
  withdrawnAmountAfterExtension: BigInt!
  """ Remaining shares """
  remainingShares: BigInt!
  """ Withdrawn amount """
  withdrawnAmount: BigInt!
  token: Token!
  status: FuroStatus!
  createdBy: User!
  fromBentoBox: Boolean!
  startedAt: BigInt!
  expiresAt: BigInt!
  txHash: String!
  transactionCount: BigInt!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  extendedAtBlock: BigInt!
  extendedAtTimestamp: BigInt!
  modifiedAtBlock: BigInt!
  modifiedAtTimestamp: BigInt!
  sourceName: String
}

input Stream_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  recipient: String
  recipient_not: String
  recipient_gt: String
  recipient_lt: String
  recipient_gte: String
  recipient_lte: String
  recipient_in: [String!]
  recipient_not_in: [String!]
  recipient_contains: String
  recipient_contains_nocase: String
  recipient_not_contains: String
  recipient_not_contains_nocase: String
  recipient_starts_with: String
  recipient_starts_with_nocase: String
  recipient_not_starts_with: String
  recipient_not_starts_with_nocase: String
  recipient_ends_with: String
  recipient_ends_with_nocase: String
  recipient_not_ends_with: String
  recipient_not_ends_with_nocase: String
  recipient_: User_filter
  initialShares: BigInt
  initialShares_not: BigInt
  initialShares_gt: BigInt
  initialShares_lt: BigInt
  initialShares_gte: BigInt
  initialShares_lte: BigInt
  initialShares_in: [BigInt!]
  initialShares_not_in: [BigInt!]
  initialAmount: BigInt
  initialAmount_not: BigInt
  initialAmount_gt: BigInt
  initialAmount_lt: BigInt
  initialAmount_gte: BigInt
  initialAmount_lte: BigInt
  initialAmount_in: [BigInt!]
  initialAmount_not_in: [BigInt!]
  extendedShares: BigInt
  extendedShares_not: BigInt
  extendedShares_gt: BigInt
  extendedShares_lt: BigInt
  extendedShares_gte: BigInt
  extendedShares_lte: BigInt
  extendedShares_in: [BigInt!]
  extendedShares_not_in: [BigInt!]
  initialSharesExtended: BigInt
  initialSharesExtended_not: BigInt
  initialSharesExtended_gt: BigInt
  initialSharesExtended_lt: BigInt
  initialSharesExtended_gte: BigInt
  initialSharesExtended_lte: BigInt
  initialSharesExtended_in: [BigInt!]
  initialSharesExtended_not_in: [BigInt!]
  withdrawnAmountAfterExtension: BigInt
  withdrawnAmountAfterExtension_not: BigInt
  withdrawnAmountAfterExtension_gt: BigInt
  withdrawnAmountAfterExtension_lt: BigInt
  withdrawnAmountAfterExtension_gte: BigInt
  withdrawnAmountAfterExtension_lte: BigInt
  withdrawnAmountAfterExtension_in: [BigInt!]
  withdrawnAmountAfterExtension_not_in: [BigInt!]
  remainingShares: BigInt
  remainingShares_not: BigInt
  remainingShares_gt: BigInt
  remainingShares_lt: BigInt
  remainingShares_gte: BigInt
  remainingShares_lte: BigInt
  remainingShares_in: [BigInt!]
  remainingShares_not_in: [BigInt!]
  withdrawnAmount: BigInt
  withdrawnAmount_not: BigInt
  withdrawnAmount_gt: BigInt
  withdrawnAmount_lt: BigInt
  withdrawnAmount_gte: BigInt
  withdrawnAmount_lte: BigInt
  withdrawnAmount_in: [BigInt!]
  withdrawnAmount_not_in: [BigInt!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  status: FuroStatus
  status_not: FuroStatus
  status_in: [FuroStatus!]
  status_not_in: [FuroStatus!]
  createdBy: String
  createdBy_not: String
  createdBy_gt: String
  createdBy_lt: String
  createdBy_gte: String
  createdBy_lte: String
  createdBy_in: [String!]
  createdBy_not_in: [String!]
  createdBy_contains: String
  createdBy_contains_nocase: String
  createdBy_not_contains: String
  createdBy_not_contains_nocase: String
  createdBy_starts_with: String
  createdBy_starts_with_nocase: String
  createdBy_not_starts_with: String
  createdBy_not_starts_with_nocase: String
  createdBy_ends_with: String
  createdBy_ends_with_nocase: String
  createdBy_not_ends_with: String
  createdBy_not_ends_with_nocase: String
  createdBy_: User_filter
  fromBentoBox: Boolean
  fromBentoBox_not: Boolean
  fromBentoBox_in: [Boolean!]
  fromBentoBox_not_in: [Boolean!]
  startedAt: BigInt
  startedAt_not: BigInt
  startedAt_gt: BigInt
  startedAt_lt: BigInt
  startedAt_gte: BigInt
  startedAt_lte: BigInt
  startedAt_in: [BigInt!]
  startedAt_not_in: [BigInt!]
  expiresAt: BigInt
  expiresAt_not: BigInt
  expiresAt_gt: BigInt
  expiresAt_lt: BigInt
  expiresAt_gte: BigInt
  expiresAt_lte: BigInt
  expiresAt_in: [BigInt!]
  expiresAt_not_in: [BigInt!]
  txHash: String
  txHash_not: String
  txHash_gt: String
  txHash_lt: String
  txHash_gte: String
  txHash_lte: String
  txHash_in: [String!]
  txHash_not_in: [String!]
  txHash_contains: String
  txHash_contains_nocase: String
  txHash_not_contains: String
  txHash_not_contains_nocase: String
  txHash_starts_with: String
  txHash_starts_with_nocase: String
  txHash_not_starts_with: String
  txHash_not_starts_with_nocase: String
  txHash_ends_with: String
  txHash_ends_with_nocase: String
  txHash_not_ends_with: String
  txHash_not_ends_with_nocase: String
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  extendedAtBlock: BigInt
  extendedAtBlock_not: BigInt
  extendedAtBlock_gt: BigInt
  extendedAtBlock_lt: BigInt
  extendedAtBlock_gte: BigInt
  extendedAtBlock_lte: BigInt
  extendedAtBlock_in: [BigInt!]
  extendedAtBlock_not_in: [BigInt!]
  extendedAtTimestamp: BigInt
  extendedAtTimestamp_not: BigInt
  extendedAtTimestamp_gt: BigInt
  extendedAtTimestamp_lt: BigInt
  extendedAtTimestamp_gte: BigInt
  extendedAtTimestamp_lte: BigInt
  extendedAtTimestamp_in: [BigInt!]
  extendedAtTimestamp_not_in: [BigInt!]
  modifiedAtBlock: BigInt
  modifiedAtBlock_not: BigInt
  modifiedAtBlock_gt: BigInt
  modifiedAtBlock_lt: BigInt
  modifiedAtBlock_gte: BigInt
  modifiedAtBlock_lte: BigInt
  modifiedAtBlock_in: [BigInt!]
  modifiedAtBlock_not_in: [BigInt!]
  modifiedAtTimestamp: BigInt
  modifiedAtTimestamp_not: BigInt
  modifiedAtTimestamp_gt: BigInt
  modifiedAtTimestamp_lt: BigInt
  modifiedAtTimestamp_gte: BigInt
  modifiedAtTimestamp_lte: BigInt
  modifiedAtTimestamp_in: [BigInt!]
  modifiedAtTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Stream_filter]
  or: [Stream_filter]
}

enum Stream_orderBy {
  id
  recipient
  recipient__id
  recipient__createdAtBlock
  recipient__createdAtTimestamp
  initialShares
  initialAmount
  extendedShares
  initialSharesExtended
  withdrawnAmountAfterExtension
  remainingShares
  withdrawnAmount
  token
  token__id
  token__liquidityShares
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  token__createdAtBlock
  token__createdAtTimestamp
  status
  createdBy
  createdBy__id
  createdBy__createdAtBlock
  createdBy__createdAtTimestamp
  fromBentoBox
  startedAt
  expiresAt
  txHash
  transactionCount
  createdAtBlock
  createdAtTimestamp
  extendedAtBlock
  extendedAtTimestamp
  modifiedAtBlock
  modifiedAtTimestamp
}

type TokenDaySnapshot {
  """ {tokenId}-day-{timestamp} """
  id: ID!
  date: Int!
  token: Token!
  cumulativeLiquidityShares: BigInt!
  cumulativeLiquidityAmount: BigInt!
  transactionCount: BigInt!
  liquidity: BigDecimal!
  liquidityNative: BigDecimal!
  liquidityUSD: BigDecimal!
  volume: BigDecimal!
  volumeNative: BigDecimal!
  volumeUSD: BigDecimal!
  priceNative: BigDecimal!
  priceUSD: BigDecimal!
  feesNative: BigDecimal!
  feesUSD: BigDecimal!
  sourceName: String
}

input TokenDaySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  cumulativeLiquidityShares: BigInt
  cumulativeLiquidityShares_not: BigInt
  cumulativeLiquidityShares_gt: BigInt
  cumulativeLiquidityShares_lt: BigInt
  cumulativeLiquidityShares_gte: BigInt
  cumulativeLiquidityShares_lte: BigInt
  cumulativeLiquidityShares_in: [BigInt!]
  cumulativeLiquidityShares_not_in: [BigInt!]
  cumulativeLiquidityAmount: BigInt
  cumulativeLiquidityAmount_not: BigInt
  cumulativeLiquidityAmount_gt: BigInt
  cumulativeLiquidityAmount_lt: BigInt
  cumulativeLiquidityAmount_gte: BigInt
  cumulativeLiquidityAmount_lte: BigInt
  cumulativeLiquidityAmount_in: [BigInt!]
  cumulativeLiquidityAmount_not_in: [BigInt!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenDaySnapshot_filter]
  or: [TokenDaySnapshot_filter]
  liquidity: BigDecimal
  liquidity_not: BigDecimal
  liquidity_gt: BigDecimal
  liquidity_lt: BigDecimal
  liquidity_gte: BigDecimal
  liquidity_lte: BigDecimal
  liquidity_in: [BigDecimal!]
  liquidity_not_in: [BigDecimal!]
  liquidityNative: BigDecimal
  liquidityNative_not: BigDecimal
  liquidityNative_gt: BigDecimal
  liquidityNative_lt: BigDecimal
  liquidityNative_gte: BigDecimal
  liquidityNative_lte: BigDecimal
  liquidityNative_in: [BigDecimal!]
  liquidityNative_not_in: [BigDecimal!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  volume: BigDecimal
  volume_not: BigDecimal
  volume_gt: BigDecimal
  volume_lt: BigDecimal
  volume_gte: BigDecimal
  volume_lte: BigDecimal
  volume_in: [BigDecimal!]
  volume_not_in: [BigDecimal!]
  volumeNative: BigDecimal
  volumeNative_not: BigDecimal
  volumeNative_gt: BigDecimal
  volumeNative_lt: BigDecimal
  volumeNative_gte: BigDecimal
  volumeNative_lte: BigDecimal
  volumeNative_in: [BigDecimal!]
  volumeNative_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  priceNative: BigDecimal
  priceNative_not: BigDecimal
  priceNative_gt: BigDecimal
  priceNative_lt: BigDecimal
  priceNative_gte: BigDecimal
  priceNative_lte: BigDecimal
  priceNative_in: [BigDecimal!]
  priceNative_not_in: [BigDecimal!]
  priceUSD: BigDecimal
  priceUSD_not: BigDecimal
  priceUSD_gt: BigDecimal
  priceUSD_lt: BigDecimal
  priceUSD_gte: BigDecimal
  priceUSD_lte: BigDecimal
  priceUSD_in: [BigDecimal!]
  priceUSD_not_in: [BigDecimal!]
  feesNative: BigDecimal
  feesNative_not: BigDecimal
  feesNative_gt: BigDecimal
  feesNative_lt: BigDecimal
  feesNative_gte: BigDecimal
  feesNative_lte: BigDecimal
  feesNative_in: [BigDecimal!]
  feesNative_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
}

enum TokenDaySnapshot_orderBy {
  id
  date
  token
  token__id
  token__liquidityShares
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  token__createdAtBlock
  token__createdAtTimestamp
  cumulativeLiquidityShares
  cumulativeLiquidityAmount
  transactionCount
  token__liquidity
  token__liquidityNative
  token__liquidityUSD
  token__volume
  token__volumeNative
  token__volumeUSD
  token__untrackedVolumeUSD
  token__feesNative
  token__feesUSD
  token__txCount
  token__pairCount
  liquidity
  liquidityNative
  liquidityUSD
  volume
  volumeNative
  volumeUSD
  priceNative
  priceUSD
  feesNative
  feesUSD
}

type TokenHourSnapshot {
  """ {tokenId}-hour-{timestamp} """
  id: ID!
  date: Int!
  token: Token!
  cumulativeLiquidityShares: BigInt!
  cumulativeLiquidityAmount: BigInt!
  transactionCount: BigInt!
  liquidity: BigDecimal!
  liquidityNative: BigDecimal!
  liquidityUSD: BigDecimal!
  volume: BigDecimal!
  volumeNative: BigDecimal!
  volumeUSD: BigDecimal!
  priceNative: BigDecimal!
  priceUSD: BigDecimal!
  feesNative: BigDecimal!
  feesUSD: BigDecimal!
  sourceName: String
}

input TokenHourSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  cumulativeLiquidityShares: BigInt
  cumulativeLiquidityShares_not: BigInt
  cumulativeLiquidityShares_gt: BigInt
  cumulativeLiquidityShares_lt: BigInt
  cumulativeLiquidityShares_gte: BigInt
  cumulativeLiquidityShares_lte: BigInt
  cumulativeLiquidityShares_in: [BigInt!]
  cumulativeLiquidityShares_not_in: [BigInt!]
  cumulativeLiquidityAmount: BigInt
  cumulativeLiquidityAmount_not: BigInt
  cumulativeLiquidityAmount_gt: BigInt
  cumulativeLiquidityAmount_lt: BigInt
  cumulativeLiquidityAmount_gte: BigInt
  cumulativeLiquidityAmount_lte: BigInt
  cumulativeLiquidityAmount_in: [BigInt!]
  cumulativeLiquidityAmount_not_in: [BigInt!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenHourSnapshot_filter]
  or: [TokenHourSnapshot_filter]
  liquidity: BigDecimal
  liquidity_not: BigDecimal
  liquidity_gt: BigDecimal
  liquidity_lt: BigDecimal
  liquidity_gte: BigDecimal
  liquidity_lte: BigDecimal
  liquidity_in: [BigDecimal!]
  liquidity_not_in: [BigDecimal!]
  liquidityNative: BigDecimal
  liquidityNative_not: BigDecimal
  liquidityNative_gt: BigDecimal
  liquidityNative_lt: BigDecimal
  liquidityNative_gte: BigDecimal
  liquidityNative_lte: BigDecimal
  liquidityNative_in: [BigDecimal!]
  liquidityNative_not_in: [BigDecimal!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  volume: BigDecimal
  volume_not: BigDecimal
  volume_gt: BigDecimal
  volume_lt: BigDecimal
  volume_gte: BigDecimal
  volume_lte: BigDecimal
  volume_in: [BigDecimal!]
  volume_not_in: [BigDecimal!]
  volumeNative: BigDecimal
  volumeNative_not: BigDecimal
  volumeNative_gt: BigDecimal
  volumeNative_lt: BigDecimal
  volumeNative_gte: BigDecimal
  volumeNative_lte: BigDecimal
  volumeNative_in: [BigDecimal!]
  volumeNative_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  priceNative: BigDecimal
  priceNative_not: BigDecimal
  priceNative_gt: BigDecimal
  priceNative_lt: BigDecimal
  priceNative_gte: BigDecimal
  priceNative_lte: BigDecimal
  priceNative_in: [BigDecimal!]
  priceNative_not_in: [BigDecimal!]
  priceUSD: BigDecimal
  priceUSD_not: BigDecimal
  priceUSD_gt: BigDecimal
  priceUSD_lt: BigDecimal
  priceUSD_gte: BigDecimal
  priceUSD_lte: BigDecimal
  priceUSD_in: [BigDecimal!]
  priceUSD_not_in: [BigDecimal!]
  feesNative: BigDecimal
  feesNative_not: BigDecimal
  feesNative_gt: BigDecimal
  feesNative_lt: BigDecimal
  feesNative_gte: BigDecimal
  feesNative_lte: BigDecimal
  feesNative_in: [BigDecimal!]
  feesNative_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
}

enum TokenHourSnapshot_orderBy {
  id
  date
  token
  token__id
  token__liquidityShares
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  token__createdAtBlock
  token__createdAtTimestamp
  cumulativeLiquidityShares
  cumulativeLiquidityAmount
  transactionCount
  token__liquidity
  token__liquidityNative
  token__liquidityUSD
  token__volume
  token__volumeNative
  token__volumeUSD
  token__feesNative
  token__feesUSD
  token__txCount
  token__pairCount
  liquidity
  liquidityNative
  liquidityUSD
  volume
  volumeNative
  volumeUSD
  priceNative
  priceUSD
  feesNative
  feesUSD
}

type Vesting {
  id: ID!
  recipient: User!
  cliffDuration: BigInt!
  stepDuration: BigInt!
  steps: BigInt!
  cliffShares: BigInt!
  stepShares: BigInt!
  """ shares remaining, decreases on withdrawal """
  remainingShares: BigInt!
  """ Initial shares """
  initialShares: BigInt!
  """ Initial amount """
  initialAmount: BigInt!
  """ Withdrawn amount """
  withdrawnAmount: BigInt!
  token: Token!
  status: FuroStatus!
  createdBy: User!
  fromBentoBox: Boolean!
  startedAt: BigInt!
  expiresAt: BigInt!
  txHash: String!
  transactionCount: BigInt!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  modifiedAtBlock: BigInt!
  modifiedAtTimestamp: BigInt!
  cancelledAtBlock: BigInt
  cancelledAtTimestamp: BigInt
  sourceName: String
}

input Vesting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  recipient: String
  recipient_not: String
  recipient_gt: String
  recipient_lt: String
  recipient_gte: String
  recipient_lte: String
  recipient_in: [String!]
  recipient_not_in: [String!]
  recipient_contains: String
  recipient_contains_nocase: String
  recipient_not_contains: String
  recipient_not_contains_nocase: String
  recipient_starts_with: String
  recipient_starts_with_nocase: String
  recipient_not_starts_with: String
  recipient_not_starts_with_nocase: String
  recipient_ends_with: String
  recipient_ends_with_nocase: String
  recipient_not_ends_with: String
  recipient_not_ends_with_nocase: String
  recipient_: User_filter
  cliffDuration: BigInt
  cliffDuration_not: BigInt
  cliffDuration_gt: BigInt
  cliffDuration_lt: BigInt
  cliffDuration_gte: BigInt
  cliffDuration_lte: BigInt
  cliffDuration_in: [BigInt!]
  cliffDuration_not_in: [BigInt!]
  stepDuration: BigInt
  stepDuration_not: BigInt
  stepDuration_gt: BigInt
  stepDuration_lt: BigInt
  stepDuration_gte: BigInt
  stepDuration_lte: BigInt
  stepDuration_in: [BigInt!]
  stepDuration_not_in: [BigInt!]
  steps: BigInt
  steps_not: BigInt
  steps_gt: BigInt
  steps_lt: BigInt
  steps_gte: BigInt
  steps_lte: BigInt
  steps_in: [BigInt!]
  steps_not_in: [BigInt!]
  cliffShares: BigInt
  cliffShares_not: BigInt
  cliffShares_gt: BigInt
  cliffShares_lt: BigInt
  cliffShares_gte: BigInt
  cliffShares_lte: BigInt
  cliffShares_in: [BigInt!]
  cliffShares_not_in: [BigInt!]
  stepShares: BigInt
  stepShares_not: BigInt
  stepShares_gt: BigInt
  stepShares_lt: BigInt
  stepShares_gte: BigInt
  stepShares_lte: BigInt
  stepShares_in: [BigInt!]
  stepShares_not_in: [BigInt!]
  remainingShares: BigInt
  remainingShares_not: BigInt
  remainingShares_gt: BigInt
  remainingShares_lt: BigInt
  remainingShares_gte: BigInt
  remainingShares_lte: BigInt
  remainingShares_in: [BigInt!]
  remainingShares_not_in: [BigInt!]
  initialShares: BigInt
  initialShares_not: BigInt
  initialShares_gt: BigInt
  initialShares_lt: BigInt
  initialShares_gte: BigInt
  initialShares_lte: BigInt
  initialShares_in: [BigInt!]
  initialShares_not_in: [BigInt!]
  initialAmount: BigInt
  initialAmount_not: BigInt
  initialAmount_gt: BigInt
  initialAmount_lt: BigInt
  initialAmount_gte: BigInt
  initialAmount_lte: BigInt
  initialAmount_in: [BigInt!]
  initialAmount_not_in: [BigInt!]
  withdrawnAmount: BigInt
  withdrawnAmount_not: BigInt
  withdrawnAmount_gt: BigInt
  withdrawnAmount_lt: BigInt
  withdrawnAmount_gte: BigInt
  withdrawnAmount_lte: BigInt
  withdrawnAmount_in: [BigInt!]
  withdrawnAmount_not_in: [BigInt!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  status: FuroStatus
  status_not: FuroStatus
  status_in: [FuroStatus!]
  status_not_in: [FuroStatus!]
  createdBy: String
  createdBy_not: String
  createdBy_gt: String
  createdBy_lt: String
  createdBy_gte: String
  createdBy_lte: String
  createdBy_in: [String!]
  createdBy_not_in: [String!]
  createdBy_contains: String
  createdBy_contains_nocase: String
  createdBy_not_contains: String
  createdBy_not_contains_nocase: String
  createdBy_starts_with: String
  createdBy_starts_with_nocase: String
  createdBy_not_starts_with: String
  createdBy_not_starts_with_nocase: String
  createdBy_ends_with: String
  createdBy_ends_with_nocase: String
  createdBy_not_ends_with: String
  createdBy_not_ends_with_nocase: String
  createdBy_: User_filter
  fromBentoBox: Boolean
  fromBentoBox_not: Boolean
  fromBentoBox_in: [Boolean!]
  fromBentoBox_not_in: [Boolean!]
  startedAt: BigInt
  startedAt_not: BigInt
  startedAt_gt: BigInt
  startedAt_lt: BigInt
  startedAt_gte: BigInt
  startedAt_lte: BigInt
  startedAt_in: [BigInt!]
  startedAt_not_in: [BigInt!]
  expiresAt: BigInt
  expiresAt_not: BigInt
  expiresAt_gt: BigInt
  expiresAt_lt: BigInt
  expiresAt_gte: BigInt
  expiresAt_lte: BigInt
  expiresAt_in: [BigInt!]
  expiresAt_not_in: [BigInt!]
  txHash: String
  txHash_not: String
  txHash_gt: String
  txHash_lt: String
  txHash_gte: String
  txHash_lte: String
  txHash_in: [String!]
  txHash_not_in: [String!]
  txHash_contains: String
  txHash_contains_nocase: String
  txHash_not_contains: String
  txHash_not_contains_nocase: String
  txHash_starts_with: String
  txHash_starts_with_nocase: String
  txHash_not_starts_with: String
  txHash_not_starts_with_nocase: String
  txHash_ends_with: String
  txHash_ends_with_nocase: String
  txHash_not_ends_with: String
  txHash_not_ends_with_nocase: String
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  modifiedAtBlock: BigInt
  modifiedAtBlock_not: BigInt
  modifiedAtBlock_gt: BigInt
  modifiedAtBlock_lt: BigInt
  modifiedAtBlock_gte: BigInt
  modifiedAtBlock_lte: BigInt
  modifiedAtBlock_in: [BigInt!]
  modifiedAtBlock_not_in: [BigInt!]
  modifiedAtTimestamp: BigInt
  modifiedAtTimestamp_not: BigInt
  modifiedAtTimestamp_gt: BigInt
  modifiedAtTimestamp_lt: BigInt
  modifiedAtTimestamp_gte: BigInt
  modifiedAtTimestamp_lte: BigInt
  modifiedAtTimestamp_in: [BigInt!]
  modifiedAtTimestamp_not_in: [BigInt!]
  cancelledAtBlock: BigInt
  cancelledAtBlock_not: BigInt
  cancelledAtBlock_gt: BigInt
  cancelledAtBlock_lt: BigInt
  cancelledAtBlock_gte: BigInt
  cancelledAtBlock_lte: BigInt
  cancelledAtBlock_in: [BigInt!]
  cancelledAtBlock_not_in: [BigInt!]
  cancelledAtTimestamp: BigInt
  cancelledAtTimestamp_not: BigInt
  cancelledAtTimestamp_gt: BigInt
  cancelledAtTimestamp_lt: BigInt
  cancelledAtTimestamp_gte: BigInt
  cancelledAtTimestamp_lte: BigInt
  cancelledAtTimestamp_in: [BigInt!]
  cancelledAtTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Vesting_filter]
  or: [Vesting_filter]
}

enum Vesting_orderBy {
  id
  recipient
  recipient__id
  recipient__createdAtBlock
  recipient__createdAtTimestamp
  cliffDuration
  stepDuration
  steps
  cliffShares
  stepShares
  remainingShares
  initialShares
  initialAmount
  withdrawnAmount
  token
  token__id
  token__liquidityShares
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  token__createdAtBlock
  token__createdAtTimestamp
  status
  createdBy
  createdBy__id
  createdBy__createdAtBlock
  createdBy__createdAtTimestamp
  fromBentoBox
  startedAt
  expiresAt
  txHash
  transactionCount
  createdAtBlock
  createdAtTimestamp
  modifiedAtBlock
  modifiedAtTimestamp
  cancelledAtBlock
  cancelledAtTimestamp
}

""" Bundle - should only ever be one created"""
type Bundle {
  """ hardcoded to '1'"""
  id: ID!
  """ Price of native """
  nativePrice: BigDecimal!
  chainId: BigInt!
  sourceName: String
}

input Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  nativePrice: BigDecimal
  nativePrice_not: BigDecimal
  nativePrice_gt: BigDecimal
  nativePrice_lt: BigDecimal
  nativePrice_gte: BigDecimal
  nativePrice_lte: BigDecimal
  nativePrice_in: [BigDecimal!]
  nativePrice_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bundle_filter]
  or: [Bundle_filter]
}

enum Bundle_orderBy {
  id
  nativePrice
}

type V2Burn {
  """ transaction.id:transaction.burns.length """
  id: ID!
  transaction: V2Transaction!
  timestamp: BigInt!
  pair: Pair!
  liquidity: BigDecimal!
  sender: String
  amount0: BigDecimal
  amount1: BigDecimal
  to: String
  logIndex: BigInt
  amountUSD: BigDecimal
  complete: Boolean!
  feeTo: String
  feeLiquidity: BigDecimal
  sourceName: String
}

input Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  liquidity: BigDecimal
  liquidity_not: BigDecimal
  liquidity_gt: BigDecimal
  liquidity_lt: BigDecimal
  liquidity_gte: BigDecimal
  liquidity_lte: BigDecimal
  liquidity_in: [BigDecimal!]
  liquidity_not_in: [BigDecimal!]
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  amount0: BigDecimal
  amount0_not: BigDecimal
  amount0_gt: BigDecimal
  amount0_lt: BigDecimal
  amount0_gte: BigDecimal
  amount0_lte: BigDecimal
  amount0_in: [BigDecimal!]
  amount0_not_in: [BigDecimal!]
  amount1: BigDecimal
  amount1_not: BigDecimal
  amount1_gt: BigDecimal
  amount1_lt: BigDecimal
  amount1_gte: BigDecimal
  amount1_lte: BigDecimal
  amount1_in: [BigDecimal!]
  amount1_not_in: [BigDecimal!]
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: String
  feeTo_not: String
  feeTo_gt: String
  feeTo_lt: String
  feeTo_gte: String
  feeTo_lte: String
  feeTo_in: [String!]
  feeTo_not_in: [String!]
  feeTo_contains: String
  feeTo_contains_nocase: String
  feeTo_not_contains: String
  feeTo_not_contains_nocase: String
  feeTo_starts_with: String
  feeTo_starts_with_nocase: String
  feeTo_not_starts_with: String
  feeTo_not_starts_with_nocase: String
  feeTo_ends_with: String
  feeTo_ends_with_nocase: String
  feeTo_not_ends_with: String
  feeTo_not_ends_with_nocase: String
  feeLiquidity: BigDecimal
  feeLiquidity_not: BigDecimal
  feeLiquidity_gt: BigDecimal
  feeLiquidity_lt: BigDecimal
  feeLiquidity_gte: BigDecimal
  feeLiquidity_lte: BigDecimal
  feeLiquidity_in: [BigDecimal!]
  feeLiquidity_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Burn_filter]
  or: [Burn_filter]
}

enum Burn_orderBy {
  id
  transaction
  transaction__id
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__cumulativeGasUsed
  transaction__gasUsedUSD
  transaction__createdAtBlock
  transaction__createdAtTimestamp
  timestamp
  pair
  pair__id
  pair__type
  pair__swapFee
  pair__twapEnabled
  pair__name
  pair__source
  pair__createdAtBlock
  pair__createdAtTimestamp
  pair__reserve0
  pair__reserve1
  pair__liquidity
  pair__liquidityUSD
  pair__liquidityNative
  pair__trackedLiquidityNative
  pair__token0Price
  pair__token1Price
  pair__volumeNative
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__volumeToken0
  pair__volumeToken1
  pair__feesNative
  pair__feesUSD
  pair__apr
  pair__aprUpdatedAtTimestamp
  pair__txCount
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

type Factory {
  """ Contract address """
  id: ID!
  """ Volume USD """
  volumeUSD: BigDecimal!
  """ Untracked Volume USD """
  untrackedVolumeUSD: BigDecimal!
  """ Volume Native """
  volumeNative: BigDecimal!
  """ Liquidity USD """
  liquidityUSD: BigDecimal!
  """ Liquidity NATIVE """
  liquidityNative: BigDecimal!
  """ Fees USD """
  feesUSD: BigDecimal!
  """ Fees NATIVE """
  feesNative: BigDecimal!
  """ Pair count """
  pairCount: BigInt!
  """ Transaction count """
  transactionCount: BigInt!
  """ Token count """
  tokenCount: BigInt!
  """ User count """
  userCount: BigInt!
  """ Factory type """
  type: PairType!
  chainId: BigInt!
  sourceName: String
}

type FactoryDaySnapshot {
  """ {factoryId}-day-{timestamp} """
  id: ID!
  factory: Factory!
  date: Int!
  volumeUSD: BigDecimal!
  volumeNative: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  liquidityNative: BigDecimal!
  liquidityUSD: BigDecimal!
  feesNative: BigDecimal!
  feesUSD: BigDecimal!
  transactionCount: BigInt!
  chainId: BigInt!
  sourceName: String
}

input FactoryDaySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  factory_: Factory_filter
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  volumeNative: BigDecimal
  volumeNative_not: BigDecimal
  volumeNative_gt: BigDecimal
  volumeNative_lt: BigDecimal
  volumeNative_gte: BigDecimal
  volumeNative_lte: BigDecimal
  volumeNative_in: [BigDecimal!]
  volumeNative_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  liquidityNative: BigDecimal
  liquidityNative_not: BigDecimal
  liquidityNative_gt: BigDecimal
  liquidityNative_lt: BigDecimal
  liquidityNative_gte: BigDecimal
  liquidityNative_lte: BigDecimal
  liquidityNative_in: [BigDecimal!]
  liquidityNative_not_in: [BigDecimal!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  feesNative: BigDecimal
  feesNative_not: BigDecimal
  feesNative_gt: BigDecimal
  feesNative_lt: BigDecimal
  feesNative_gte: BigDecimal
  feesNative_lte: BigDecimal
  feesNative_in: [BigDecimal!]
  feesNative_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FactoryDaySnapshot_filter]
  or: [FactoryDaySnapshot_filter]
}

enum FactoryDaySnapshot_orderBy {
  id
  factory
  factory__id
  factory__volumeUSD
  factory__untrackedVolumeUSD
  factory__volumeNative
  factory__liquidityUSD
  factory__liquidityNative
  factory__feesUSD
  factory__feesNative
  factory__pairCount
  factory__transactionCount
  factory__tokenCount
  factory__userCount
  date
  volumeUSD
  volumeNative
  untrackedVolumeUSD
  liquidityNative
  liquidityUSD
  feesNative
  feesUSD
  transactionCount
  factory__type
}

input Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  volumeNative: BigDecimal
  volumeNative_not: BigDecimal
  volumeNative_gt: BigDecimal
  volumeNative_lt: BigDecimal
  volumeNative_gte: BigDecimal
  volumeNative_lte: BigDecimal
  volumeNative_in: [BigDecimal!]
  volumeNative_not_in: [BigDecimal!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  liquidityNative: BigDecimal
  liquidityNative_not: BigDecimal
  liquidityNative_gt: BigDecimal
  liquidityNative_lt: BigDecimal
  liquidityNative_gte: BigDecimal
  liquidityNative_lte: BigDecimal
  liquidityNative_in: [BigDecimal!]
  liquidityNative_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  feesNative: BigDecimal
  feesNative_not: BigDecimal
  feesNative_gt: BigDecimal
  feesNative_lt: BigDecimal
  feesNative_gte: BigDecimal
  feesNative_lte: BigDecimal
  feesNative_in: [BigDecimal!]
  feesNative_not_in: [BigDecimal!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Factory_filter]
  or: [Factory_filter]
  type: PairType
  type_not: PairType
  type_in: [PairType!]
  type_not_in: [PairType!]
}

enum Factory_orderBy {
  id
  volumeUSD
  untrackedVolumeUSD
  volumeNative
  liquidityUSD
  liquidityNative
  feesUSD
  feesNative
  pairCount
  transactionCount
  tokenCount
  userCount
  type
}

type LiquidityPosition {
  """pair.id:user.id"""
  id: ID!
  pair: Pair!
  user: User!
  balance: BigInt!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  chainId: BigInt!
  sourceName: String
}

type LiquidityPositionSnapshot {
  """ {lp.id}-{timestamp} """
  id: ID!
  liquidityPosition: LiquidityPosition!
  """ saved for fast historical lookups """
  timestamp: Int!
  """ saved for fast historical lookups """
  block: Int!
  """ reference to user """
  user: User!
  """ reference to pair """
  pair: Pair!
  """ snapshot of token0 price """
  token0PriceUSD: BigDecimal!
  """ snapshot of token1 price """
  token1PriceUSD: BigDecimal!
  """ snapshot of pair token0 reserves """
  reserve0: BigInt!
  """ snapshot of pair token1 reserves """
  reserve1: BigInt!
  """ snapshot of pair reserves in USD """
  reserveUSD: BigDecimal!
  """ snapshot of pool token supply """
  liquidityTokenTotalSupply: BigInt!
  """ snapshot of users pool token balance """
  liquidityTokenBalance: BigInt!
  sourceName: String
}

input LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  liquidityPosition_: LiquidityPosition_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  token0PriceUSD: BigDecimal
  token0PriceUSD_not: BigDecimal
  token0PriceUSD_gt: BigDecimal
  token0PriceUSD_lt: BigDecimal
  token0PriceUSD_gte: BigDecimal
  token0PriceUSD_lte: BigDecimal
  token0PriceUSD_in: [BigDecimal!]
  token0PriceUSD_not_in: [BigDecimal!]
  token1PriceUSD: BigDecimal
  token1PriceUSD_not: BigDecimal
  token1PriceUSD_gt: BigDecimal
  token1PriceUSD_lt: BigDecimal
  token1PriceUSD_gte: BigDecimal
  token1PriceUSD_lte: BigDecimal
  token1PriceUSD_in: [BigDecimal!]
  token1PriceUSD_not_in: [BigDecimal!]
  reserve0: BigInt
  reserve0_not: BigInt
  reserve0_gt: BigInt
  reserve0_lt: BigInt
  reserve0_gte: BigInt
  reserve0_lte: BigInt
  reserve0_in: [BigInt!]
  reserve0_not_in: [BigInt!]
  reserve1: BigInt
  reserve1_not: BigInt
  reserve1_gt: BigInt
  reserve1_lt: BigInt
  reserve1_gte: BigInt
  reserve1_lte: BigInt
  reserve1_in: [BigInt!]
  reserve1_not_in: [BigInt!]
  reserveUSD: BigDecimal
  reserveUSD_not: BigDecimal
  reserveUSD_gt: BigDecimal
  reserveUSD_lt: BigDecimal
  reserveUSD_gte: BigDecimal
  reserveUSD_lte: BigDecimal
  reserveUSD_in: [BigDecimal!]
  reserveUSD_not_in: [BigDecimal!]
  liquidityTokenTotalSupply: BigInt
  liquidityTokenTotalSupply_not: BigInt
  liquidityTokenTotalSupply_gt: BigInt
  liquidityTokenTotalSupply_lt: BigInt
  liquidityTokenTotalSupply_gte: BigInt
  liquidityTokenTotalSupply_lte: BigInt
  liquidityTokenTotalSupply_in: [BigInt!]
  liquidityTokenTotalSupply_not_in: [BigInt!]
  liquidityTokenBalance: BigInt
  liquidityTokenBalance_not: BigInt
  liquidityTokenBalance_gt: BigInt
  liquidityTokenBalance_lt: BigInt
  liquidityTokenBalance_gte: BigInt
  liquidityTokenBalance_lte: BigInt
  liquidityTokenBalance_in: [BigInt!]
  liquidityTokenBalance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidityPositionSnapshot_filter]
  or: [LiquidityPositionSnapshot_filter]
}

enum LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  liquidityPosition__id
  liquidityPosition__balance
  liquidityPosition__createdAtBlock
  liquidityPosition__createdAtTimestamp
  timestamp
  block
  user
  user__id
  user__lpSnapshotsCount
  pair
  pair__id
  pair__type
  pair__swapFee
  pair__twapEnabled
  pair__name
  pair__source
  pair__createdAtBlock
  pair__createdAtTimestamp
  pair__reserve0
  pair__reserve1
  pair__liquidity
  pair__liquidityUSD
  pair__liquidityNative
  pair__trackedLiquidityNative
  pair__token0Price
  pair__token1Price
  pair__volumeNative
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__volumeToken0
  pair__volumeToken1
  pair__feesNative
  pair__feesUSD
  pair__apr
  pair__aprUpdatedAtTimestamp
  pair__txCount
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidityPosition_filter]
  or: [LiquidityPosition_filter]
}

enum LiquidityPosition_orderBy {
  id
  pair
  pair__id
  pair__type
  pair__swapFee
  pair__twapEnabled
  pair__name
  pair__source
  pair__createdAtBlock
  pair__createdAtTimestamp
  pair__reserve0
  pair__reserve1
  pair__liquidity
  pair__liquidityUSD
  pair__liquidityNative
  pair__trackedLiquidityNative
  pair__token0Price
  pair__token1Price
  pair__volumeNative
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__volumeToken0
  pair__volumeToken1
  pair__feesNative
  pair__feesUSD
  pair__apr
  pair__aprUpdatedAtTimestamp
  pair__txCount
  user
  user__id
  user__lpSnapshotsCount
  balance
  createdAtBlock
  createdAtTimestamp
}

type V2Mint {
  """ transaction.id:transaction.mints.length """
  id: ID!
  transaction: V2Transaction!
  timestamp: BigInt!
  pair: Pair!
  to: String!
  liquidity: BigDecimal!
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  logIndex: BigInt
  amountUSD: BigDecimal
  feeTo: Bytes
  feeLiquidity: BigDecimal
  sourceName: String
}

input Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  liquidity: BigDecimal
  liquidity_not: BigDecimal
  liquidity_gt: BigDecimal
  liquidity_lt: BigDecimal
  liquidity_gte: BigDecimal
  liquidity_lte: BigDecimal
  liquidity_in: [BigDecimal!]
  liquidity_not_in: [BigDecimal!]
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  amount0: BigDecimal
  amount0_not: BigDecimal
  amount0_gt: BigDecimal
  amount0_lt: BigDecimal
  amount0_gte: BigDecimal
  amount0_lte: BigDecimal
  amount0_in: [BigDecimal!]
  amount0_not_in: [BigDecimal!]
  amount1: BigDecimal
  amount1_not: BigDecimal
  amount1_gt: BigDecimal
  amount1_lt: BigDecimal
  amount1_gte: BigDecimal
  amount1_lte: BigDecimal
  amount1_in: [BigDecimal!]
  amount1_not_in: [BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  feeTo: Bytes
  feeTo_not: Bytes
  feeTo_gt: Bytes
  feeTo_lt: Bytes
  feeTo_gte: Bytes
  feeTo_lte: Bytes
  feeTo_in: [Bytes!]
  feeTo_not_in: [Bytes!]
  feeTo_contains: Bytes
  feeTo_not_contains: Bytes
  feeLiquidity: BigDecimal
  feeLiquidity_not: BigDecimal
  feeLiquidity_gt: BigDecimal
  feeLiquidity_lt: BigDecimal
  feeLiquidity_gte: BigDecimal
  feeLiquidity_lte: BigDecimal
  feeLiquidity_in: [BigDecimal!]
  feeLiquidity_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Mint_filter]
  or: [Mint_filter]
}

enum Mint_orderBy {
  id
  transaction
  transaction__id
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__cumulativeGasUsed
  transaction__gasUsedUSD
  transaction__createdAtBlock
  transaction__createdAtTimestamp
  timestamp
  pair
  pair__id
  pair__type
  pair__swapFee
  pair__twapEnabled
  pair__name
  pair__source
  pair__createdAtBlock
  pair__createdAtTimestamp
  pair__reserve0
  pair__reserve1
  pair__liquidity
  pair__liquidityUSD
  pair__liquidityNative
  pair__trackedLiquidityNative
  pair__token0Price
  pair__token1Price
  pair__volumeNative
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__volumeToken0
  pair__volumeToken1
  pair__feesNative
  pair__feesUSD
  pair__apr
  pair__aprUpdatedAtTimestamp
  pair__txCount
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

type Pair {
  """ Pair address (contract address) """
  id: ID!
  """ Pair type """
  type: PairType!
  """ Swap fee """
  swapFee: BigInt!
  """ TWAP - time weighted average price """
  twapEnabled: Boolean!
  """ name of the pair, this combines symbol of both tokens, e.g. WETH/SUSHI 
  """
  name: String!
  """ First Token """
  token0: Token!
  """ Second Token """
  token1: Token!
  """ Which source this pair comes from, in this case it will always be 'TRIDENT' 
  """
  source: String!
  """ Which block this pair was created on """
  createdAtBlock: BigInt!
  """ When this pair was created """
  createdAtTimestamp: BigInt!
  """ Liquidity of first token """
  reserve0: BigInt!
  """ Liquidity of second token """
  reserve1: BigInt!
  """ Liquidity, Total supply of all LP in this pool """
  liquidity: BigInt!
  """ USD liquidity"""
  liquidityUSD: BigDecimal!
  """ Native Liquidity """
  liquidityNative: BigDecimal!
  """ Tracked Liquidity native """
  trackedLiquidityNative: BigDecimal!
  """ Price of the first token in this pair, not to be confused with TokenPrice entity 
  """
  token0Price: BigDecimal!
  """ Price of the second token in this pair, not to be confused with TokenPrice entity 
  """
  token1Price: BigDecimal!
  volumeNative: BigDecimal!
  volumeUSD: BigDecimal!
  """ Untracked Volume in USD """
  untrackedVolumeUSD: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  """ Fee in Native """
  feesNative: BigDecimal!
  """ Fee in USD """
  feesUSD: BigDecimal!
  """ APR """
  apr: BigDecimal!
  """ When APR was last updated """
  aprUpdatedAtTimestamp: BigInt!
  """ Transaction count """
  txCount: BigInt!
  """ Liquidity Positions """
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: LiquidityPosition_orderBy, orderDirection: OrderDirection, where: LiquidityPosition_filter): [LiquidityPosition!]!
  """ Liquidity position snapshots """
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: LiquidityPositionSnapshot_orderBy, orderDirection: OrderDirection, where: LiquidityPositionSnapshot_filter): [LiquidityPositionSnapshot!]!
  """ Pair Hour Snapshot """
  hourSnapshots(skip: Int = 0, first: Int = 100, orderBy: PairHourSnapshot_orderBy, orderDirection: OrderDirection, where: PairHourSnapshot_filter): [PairHourSnapshot!]!
  """ Pair Day Snapshot """
  daySnapshots(skip: Int = 0, first: Int = 100, orderBy: PairDaySnapshot_orderBy, orderDirection: OrderDirection, where: PairDaySnapshot_filter): [PairDaySnapshot!]!
  chainId: BigInt!
  address: String!
  liquidity1dChange: BigDecimal
  liquidity1wChange: BigDecimal
  volume1d: BigDecimal
  volume1dChange: BigDecimal
  volume1w: BigDecimal
  fees1d: BigDecimal
  fees1w: BigDecimal
  fees1dChange: BigDecimal
  utilisation1d: BigDecimal
  utilisation2d: BigDecimal
  utilisation1dChange: BigDecimal
  txCount1d: BigDecimal
  txCount1dChange: BigDecimal
  txCount1w: BigDecimal
  feeApr: BigDecimal
  sourceName: String
}

type PairDaySnapshot {
  """ {pairId}-day-{timestamp} """
  id: ID!
  pair: Pair!
  date: Int!
  """ Used to calculate apr """
  cumulativeVolumeUSD: BigDecimal!
  volumeUSD: BigDecimal!
  volumeNative: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  liquidity: BigDecimal!
  liquidityNative: BigDecimal!
  liquidityUSD: BigDecimal!
  feesNative: BigDecimal!
  feesUSD: BigDecimal!
  apr: BigDecimal!
  transactionCount: BigInt!
  sourceName: String
}

input PairDaySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  cumulativeVolumeUSD: BigDecimal
  cumulativeVolumeUSD_not: BigDecimal
  cumulativeVolumeUSD_gt: BigDecimal
  cumulativeVolumeUSD_lt: BigDecimal
  cumulativeVolumeUSD_gte: BigDecimal
  cumulativeVolumeUSD_lte: BigDecimal
  cumulativeVolumeUSD_in: [BigDecimal!]
  cumulativeVolumeUSD_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  volumeNative: BigDecimal
  volumeNative_not: BigDecimal
  volumeNative_gt: BigDecimal
  volumeNative_lt: BigDecimal
  volumeNative_gte: BigDecimal
  volumeNative_lte: BigDecimal
  volumeNative_in: [BigDecimal!]
  volumeNative_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  volumeToken0: BigDecimal
  volumeToken0_not: BigDecimal
  volumeToken0_gt: BigDecimal
  volumeToken0_lt: BigDecimal
  volumeToken0_gte: BigDecimal
  volumeToken0_lte: BigDecimal
  volumeToken0_in: [BigDecimal!]
  volumeToken0_not_in: [BigDecimal!]
  volumeToken1: BigDecimal
  volumeToken1_not: BigDecimal
  volumeToken1_gt: BigDecimal
  volumeToken1_lt: BigDecimal
  volumeToken1_gte: BigDecimal
  volumeToken1_lte: BigDecimal
  volumeToken1_in: [BigDecimal!]
  volumeToken1_not_in: [BigDecimal!]
  liquidity: BigDecimal
  liquidity_not: BigDecimal
  liquidity_gt: BigDecimal
  liquidity_lt: BigDecimal
  liquidity_gte: BigDecimal
  liquidity_lte: BigDecimal
  liquidity_in: [BigDecimal!]
  liquidity_not_in: [BigDecimal!]
  liquidityNative: BigDecimal
  liquidityNative_not: BigDecimal
  liquidityNative_gt: BigDecimal
  liquidityNative_lt: BigDecimal
  liquidityNative_gte: BigDecimal
  liquidityNative_lte: BigDecimal
  liquidityNative_in: [BigDecimal!]
  liquidityNative_not_in: [BigDecimal!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  feesNative: BigDecimal
  feesNative_not: BigDecimal
  feesNative_gt: BigDecimal
  feesNative_lt: BigDecimal
  feesNative_gte: BigDecimal
  feesNative_lte: BigDecimal
  feesNative_in: [BigDecimal!]
  feesNative_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  apr: BigDecimal
  apr_not: BigDecimal
  apr_gt: BigDecimal
  apr_lt: BigDecimal
  apr_gte: BigDecimal
  apr_lte: BigDecimal
  apr_in: [BigDecimal!]
  apr_not_in: [BigDecimal!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PairDaySnapshot_filter]
  or: [PairDaySnapshot_filter]
}

enum PairDaySnapshot_orderBy {
  id
  pair
  pair__id
  pair__type
  pair__swapFee
  pair__twapEnabled
  pair__name
  pair__source
  pair__createdAtBlock
  pair__createdAtTimestamp
  pair__reserve0
  pair__reserve1
  pair__liquidity
  pair__liquidityUSD
  pair__liquidityNative
  pair__trackedLiquidityNative
  pair__token0Price
  pair__token1Price
  pair__volumeNative
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__volumeToken0
  pair__volumeToken1
  pair__feesNative
  pair__feesUSD
  pair__apr
  pair__aprUpdatedAtTimestamp
  pair__txCount
  date
  cumulativeVolumeUSD
  volumeUSD
  volumeNative
  untrackedVolumeUSD
  volumeToken0
  volumeToken1
  liquidity
  liquidityNative
  liquidityUSD
  feesNative
  feesUSD
  apr
  transactionCount
}

type PairHourSnapshot {
  """ {pairId}-hour-{timestamp} """
  id: ID!
  pair: Pair!
  date: Int!
  """ Used to calculate apr """
  cumulativeVolumeUSD: BigDecimal!
  volumeUSD: BigDecimal!
  volumeNative: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  liquidity: BigDecimal!
  liquidityNative: BigDecimal!
  liquidityUSD: BigDecimal!
  feesNative: BigDecimal!
  feesUSD: BigDecimal!
  apr: BigDecimal!
  transactionCount: BigInt!
  sourceName: String
}

input PairHourSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  cumulativeVolumeUSD: BigDecimal
  cumulativeVolumeUSD_not: BigDecimal
  cumulativeVolumeUSD_gt: BigDecimal
  cumulativeVolumeUSD_lt: BigDecimal
  cumulativeVolumeUSD_gte: BigDecimal
  cumulativeVolumeUSD_lte: BigDecimal
  cumulativeVolumeUSD_in: [BigDecimal!]
  cumulativeVolumeUSD_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  volumeNative: BigDecimal
  volumeNative_not: BigDecimal
  volumeNative_gt: BigDecimal
  volumeNative_lt: BigDecimal
  volumeNative_gte: BigDecimal
  volumeNative_lte: BigDecimal
  volumeNative_in: [BigDecimal!]
  volumeNative_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  volumeToken0: BigDecimal
  volumeToken0_not: BigDecimal
  volumeToken0_gt: BigDecimal
  volumeToken0_lt: BigDecimal
  volumeToken0_gte: BigDecimal
  volumeToken0_lte: BigDecimal
  volumeToken0_in: [BigDecimal!]
  volumeToken0_not_in: [BigDecimal!]
  volumeToken1: BigDecimal
  volumeToken1_not: BigDecimal
  volumeToken1_gt: BigDecimal
  volumeToken1_lt: BigDecimal
  volumeToken1_gte: BigDecimal
  volumeToken1_lte: BigDecimal
  volumeToken1_in: [BigDecimal!]
  volumeToken1_not_in: [BigDecimal!]
  liquidity: BigDecimal
  liquidity_not: BigDecimal
  liquidity_gt: BigDecimal
  liquidity_lt: BigDecimal
  liquidity_gte: BigDecimal
  liquidity_lte: BigDecimal
  liquidity_in: [BigDecimal!]
  liquidity_not_in: [BigDecimal!]
  liquidityNative: BigDecimal
  liquidityNative_not: BigDecimal
  liquidityNative_gt: BigDecimal
  liquidityNative_lt: BigDecimal
  liquidityNative_gte: BigDecimal
  liquidityNative_lte: BigDecimal
  liquidityNative_in: [BigDecimal!]
  liquidityNative_not_in: [BigDecimal!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  feesNative: BigDecimal
  feesNative_not: BigDecimal
  feesNative_gt: BigDecimal
  feesNative_lt: BigDecimal
  feesNative_gte: BigDecimal
  feesNative_lte: BigDecimal
  feesNative_in: [BigDecimal!]
  feesNative_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  apr: BigDecimal
  apr_not: BigDecimal
  apr_gt: BigDecimal
  apr_lt: BigDecimal
  apr_gte: BigDecimal
  apr_lte: BigDecimal
  apr_in: [BigDecimal!]
  apr_not_in: [BigDecimal!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PairHourSnapshot_filter]
  or: [PairHourSnapshot_filter]
}

enum PairHourSnapshot_orderBy {
  id
  pair
  pair__id
  pair__type
  pair__swapFee
  pair__twapEnabled
  pair__name
  pair__source
  pair__createdAtBlock
  pair__createdAtTimestamp
  pair__reserve0
  pair__reserve1
  pair__liquidity
  pair__liquidityUSD
  pair__liquidityNative
  pair__trackedLiquidityNative
  pair__token0Price
  pair__token1Price
  pair__volumeNative
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__volumeToken0
  pair__volumeToken1
  pair__feesNative
  pair__feesUSD
  pair__apr
  pair__aprUpdatedAtTimestamp
  pair__txCount
  date
  cumulativeVolumeUSD
  volumeUSD
  volumeNative
  untrackedVolumeUSD
  volumeToken0
  volumeToken1
  liquidity
  liquidityNative
  liquidityUSD
  feesNative
  feesUSD
  apr
  transactionCount
}

enum PairType {
  CONSTANT_PRODUCT_POOL
  STABLE_POOL
  ALL
}

type PairWeeklySnapshot {
  """ {pairId}-weekly-{timestamp} """
  id: ID!
  pair: Pair!
  date: Int!
  """ Used to calculate apr """
  cumulativeVolumeUSD: BigDecimal
  volumeUSD: BigDecimal!
  volumeNative: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  liquidity: BigDecimal!
  liquidityNative: BigDecimal!
  liquidityUSD: BigDecimal!
  feesNative: BigDecimal!
  feesUSD: BigDecimal!
  apr: BigDecimal!
  transactionCount: BigInt!
  sourceName: String
}

input PairWeeklySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  cumulativeVolumeUSD: BigDecimal
  cumulativeVolumeUSD_not: BigDecimal
  cumulativeVolumeUSD_gt: BigDecimal
  cumulativeVolumeUSD_lt: BigDecimal
  cumulativeVolumeUSD_gte: BigDecimal
  cumulativeVolumeUSD_lte: BigDecimal
  cumulativeVolumeUSD_in: [BigDecimal!]
  cumulativeVolumeUSD_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  volumeNative: BigDecimal
  volumeNative_not: BigDecimal
  volumeNative_gt: BigDecimal
  volumeNative_lt: BigDecimal
  volumeNative_gte: BigDecimal
  volumeNative_lte: BigDecimal
  volumeNative_in: [BigDecimal!]
  volumeNative_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  volumeToken0: BigDecimal
  volumeToken0_not: BigDecimal
  volumeToken0_gt: BigDecimal
  volumeToken0_lt: BigDecimal
  volumeToken0_gte: BigDecimal
  volumeToken0_lte: BigDecimal
  volumeToken0_in: [BigDecimal!]
  volumeToken0_not_in: [BigDecimal!]
  volumeToken1: BigDecimal
  volumeToken1_not: BigDecimal
  volumeToken1_gt: BigDecimal
  volumeToken1_lt: BigDecimal
  volumeToken1_gte: BigDecimal
  volumeToken1_lte: BigDecimal
  volumeToken1_in: [BigDecimal!]
  volumeToken1_not_in: [BigDecimal!]
  liquidity: BigDecimal
  liquidity_not: BigDecimal
  liquidity_gt: BigDecimal
  liquidity_lt: BigDecimal
  liquidity_gte: BigDecimal
  liquidity_lte: BigDecimal
  liquidity_in: [BigDecimal!]
  liquidity_not_in: [BigDecimal!]
  liquidityNative: BigDecimal
  liquidityNative_not: BigDecimal
  liquidityNative_gt: BigDecimal
  liquidityNative_lt: BigDecimal
  liquidityNative_gte: BigDecimal
  liquidityNative_lte: BigDecimal
  liquidityNative_in: [BigDecimal!]
  liquidityNative_not_in: [BigDecimal!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  feesNative: BigDecimal
  feesNative_not: BigDecimal
  feesNative_gt: BigDecimal
  feesNative_lt: BigDecimal
  feesNative_gte: BigDecimal
  feesNative_lte: BigDecimal
  feesNative_in: [BigDecimal!]
  feesNative_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  apr: BigDecimal
  apr_not: BigDecimal
  apr_gt: BigDecimal
  apr_lt: BigDecimal
  apr_gte: BigDecimal
  apr_lte: BigDecimal
  apr_in: [BigDecimal!]
  apr_not_in: [BigDecimal!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PairWeeklySnapshot_filter]
  or: [PairWeeklySnapshot_filter]
}

enum PairWeeklySnapshot_orderBy {
  id
  pair
  pair__id
  pair__type
  pair__swapFee
  pair__twapEnabled
  pair__name
  pair__source
  pair__createdAtBlock
  pair__createdAtTimestamp
  pair__reserve0
  pair__reserve1
  pair__liquidity
  pair__liquidityUSD
  pair__liquidityNative
  pair__trackedLiquidityNative
  pair__token0Price
  pair__token1Price
  pair__volumeNative
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__volumeToken0
  pair__volumeToken1
  pair__feesNative
  pair__feesUSD
  pair__apr
  pair__aprUpdatedAtTimestamp
  pair__txCount
  date
  cumulativeVolumeUSD
  volumeUSD
  volumeNative
  untrackedVolumeUSD
  volumeToken0
  volumeToken1
  liquidity
  liquidityNative
  liquidityUSD
  feesNative
  feesUSD
  apr
  transactionCount
}

input Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: PairType
  type_not: PairType
  type_in: [PairType!]
  type_not_in: [PairType!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  twapEnabled: Boolean
  twapEnabled_not: Boolean
  twapEnabled_in: [Boolean!]
  twapEnabled_not_in: [Boolean!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Token_filter
  source: String
  source_not: String
  source_gt: String
  source_lt: String
  source_gte: String
  source_lte: String
  source_in: [String!]
  source_not_in: [String!]
  source_contains: String
  source_contains_nocase: String
  source_not_contains: String
  source_not_contains_nocase: String
  source_starts_with: String
  source_starts_with_nocase: String
  source_not_starts_with: String
  source_not_starts_with_nocase: String
  source_ends_with: String
  source_ends_with_nocase: String
  source_not_ends_with: String
  source_not_ends_with_nocase: String
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  reserve0: BigInt
  reserve0_not: BigInt
  reserve0_gt: BigInt
  reserve0_lt: BigInt
  reserve0_gte: BigInt
  reserve0_lte: BigInt
  reserve0_in: [BigInt!]
  reserve0_not_in: [BigInt!]
  reserve1: BigInt
  reserve1_not: BigInt
  reserve1_gt: BigInt
  reserve1_lt: BigInt
  reserve1_gte: BigInt
  reserve1_lte: BigInt
  reserve1_in: [BigInt!]
  reserve1_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  liquidityNative: BigDecimal
  liquidityNative_not: BigDecimal
  liquidityNative_gt: BigDecimal
  liquidityNative_lt: BigDecimal
  liquidityNative_gte: BigDecimal
  liquidityNative_lte: BigDecimal
  liquidityNative_in: [BigDecimal!]
  liquidityNative_not_in: [BigDecimal!]
  trackedLiquidityNative: BigDecimal
  trackedLiquidityNative_not: BigDecimal
  trackedLiquidityNative_gt: BigDecimal
  trackedLiquidityNative_lt: BigDecimal
  trackedLiquidityNative_gte: BigDecimal
  trackedLiquidityNative_lte: BigDecimal
  trackedLiquidityNative_in: [BigDecimal!]
  trackedLiquidityNative_not_in: [BigDecimal!]
  token0Price: BigDecimal
  token0Price_not: BigDecimal
  token0Price_gt: BigDecimal
  token0Price_lt: BigDecimal
  token0Price_gte: BigDecimal
  token0Price_lte: BigDecimal
  token0Price_in: [BigDecimal!]
  token0Price_not_in: [BigDecimal!]
  token1Price: BigDecimal
  token1Price_not: BigDecimal
  token1Price_gt: BigDecimal
  token1Price_lt: BigDecimal
  token1Price_gte: BigDecimal
  token1Price_lte: BigDecimal
  token1Price_in: [BigDecimal!]
  token1Price_not_in: [BigDecimal!]
  volumeNative: BigDecimal
  volumeNative_not: BigDecimal
  volumeNative_gt: BigDecimal
  volumeNative_lt: BigDecimal
  volumeNative_gte: BigDecimal
  volumeNative_lte: BigDecimal
  volumeNative_in: [BigDecimal!]
  volumeNative_not_in: [BigDecimal!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  untrackedVolumeUSD: BigDecimal
  untrackedVolumeUSD_not: BigDecimal
  untrackedVolumeUSD_gt: BigDecimal
  untrackedVolumeUSD_lt: BigDecimal
  untrackedVolumeUSD_gte: BigDecimal
  untrackedVolumeUSD_lte: BigDecimal
  untrackedVolumeUSD_in: [BigDecimal!]
  untrackedVolumeUSD_not_in: [BigDecimal!]
  volumeToken0: BigDecimal
  volumeToken0_not: BigDecimal
  volumeToken0_gt: BigDecimal
  volumeToken0_lt: BigDecimal
  volumeToken0_gte: BigDecimal
  volumeToken0_lte: BigDecimal
  volumeToken0_in: [BigDecimal!]
  volumeToken0_not_in: [BigDecimal!]
  volumeToken1: BigDecimal
  volumeToken1_not: BigDecimal
  volumeToken1_gt: BigDecimal
  volumeToken1_lt: BigDecimal
  volumeToken1_gte: BigDecimal
  volumeToken1_lte: BigDecimal
  volumeToken1_in: [BigDecimal!]
  volumeToken1_not_in: [BigDecimal!]
  feesNative: BigDecimal
  feesNative_not: BigDecimal
  feesNative_gt: BigDecimal
  feesNative_lt: BigDecimal
  feesNative_gte: BigDecimal
  feesNative_lte: BigDecimal
  feesNative_in: [BigDecimal!]
  feesNative_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  apr: BigDecimal
  apr_not: BigDecimal
  apr_gt: BigDecimal
  apr_lt: BigDecimal
  apr_gte: BigDecimal
  apr_lte: BigDecimal
  apr_in: [BigDecimal!]
  apr_not_in: [BigDecimal!]
  aprUpdatedAtTimestamp: BigInt
  aprUpdatedAtTimestamp_not: BigInt
  aprUpdatedAtTimestamp_gt: BigInt
  aprUpdatedAtTimestamp_lt: BigInt
  aprUpdatedAtTimestamp_gte: BigInt
  aprUpdatedAtTimestamp_lte: BigInt
  aprUpdatedAtTimestamp_in: [BigInt!]
  aprUpdatedAtTimestamp_not_in: [BigInt!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityPositions_: LiquidityPosition_filter
  liquidityPositionSnapshots_: LiquidityPositionSnapshot_filter
  hourSnapshots_: PairHourSnapshot_filter
  daySnapshots_: PairDaySnapshot_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pair_filter]
  or: [Pair_filter]
}

enum Pair_orderBy {
  id
  type
  swapFee
  twapEnabled
  name
  token0
  token0__id
  token0__symbol
  token0__symbolSuccess
  token0__name
  token0__nameSuccess
  token0__decimals
  token0__decimalsSuccess
  token0__liquidity
  token0__liquidityNative
  token0__liquidityUSD
  token0__volume
  token0__volumeNative
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesNative
  token0__feesUSD
  token0__txCount
  token0__pairCount
  token1
  token1__id
  token1__symbol
  token1__symbolSuccess
  token1__name
  token1__nameSuccess
  token1__decimals
  token1__decimalsSuccess
  token1__liquidity
  token1__liquidityNative
  token1__liquidityUSD
  token1__volume
  token1__volumeNative
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesNative
  token1__feesUSD
  token1__txCount
  token1__pairCount
  source
  createdAtBlock
  createdAtTimestamp
  reserve0
  reserve1
  liquidity
  liquidityUSD
  liquidityNative
  trackedLiquidityNative
  token0Price
  token1Price
  volumeNative
  volumeUSD
  untrackedVolumeUSD
  volumeToken0
  volumeToken1
  feesNative
  feesUSD
  apr
  aprUpdatedAtTimestamp
  txCount
  liquidityPositions
  liquidityPositionSnapshots
  hourSnapshots
  daySnapshots
}

type V2Swap {
  id: ID!
  transaction: V2Transaction!
  timestamp: BigInt!
  pair: Pair!
  sender: String!
  tokenIn: Token!
  tokenOut: Token!
  amountIn: BigDecimal!
  amountOut: BigDecimal!
  to: String!
  logIndex: BigInt
  amountUSD: BigDecimal!
  sourceName: String
}

input Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  tokenIn: String
  tokenIn_not: String
  tokenIn_gt: String
  tokenIn_lt: String
  tokenIn_gte: String
  tokenIn_lte: String
  tokenIn_in: [String!]
  tokenIn_not_in: [String!]
  tokenIn_contains: String
  tokenIn_contains_nocase: String
  tokenIn_not_contains: String
  tokenIn_not_contains_nocase: String
  tokenIn_starts_with: String
  tokenIn_starts_with_nocase: String
  tokenIn_not_starts_with: String
  tokenIn_not_starts_with_nocase: String
  tokenIn_ends_with: String
  tokenIn_ends_with_nocase: String
  tokenIn_not_ends_with: String
  tokenIn_not_ends_with_nocase: String
  tokenIn_: Token_filter
  tokenOut: String
  tokenOut_not: String
  tokenOut_gt: String
  tokenOut_lt: String
  tokenOut_gte: String
  tokenOut_lte: String
  tokenOut_in: [String!]
  tokenOut_not_in: [String!]
  tokenOut_contains: String
  tokenOut_contains_nocase: String
  tokenOut_not_contains: String
  tokenOut_not_contains_nocase: String
  tokenOut_starts_with: String
  tokenOut_starts_with_nocase: String
  tokenOut_not_starts_with: String
  tokenOut_not_starts_with_nocase: String
  tokenOut_ends_with: String
  tokenOut_ends_with_nocase: String
  tokenOut_not_ends_with: String
  tokenOut_not_ends_with_nocase: String
  tokenOut_: Token_filter
  amountIn: BigDecimal
  amountIn_not: BigDecimal
  amountIn_gt: BigDecimal
  amountIn_lt: BigDecimal
  amountIn_gte: BigDecimal
  amountIn_lte: BigDecimal
  amountIn_in: [BigDecimal!]
  amountIn_not_in: [BigDecimal!]
  amountOut: BigDecimal
  amountOut_not: BigDecimal
  amountOut_gt: BigDecimal
  amountOut_lt: BigDecimal
  amountOut_gte: BigDecimal
  amountOut_lte: BigDecimal
  amountOut_in: [BigDecimal!]
  amountOut_not_in: [BigDecimal!]
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Swap_filter]
  or: [Swap_filter]
}

enum Swap_orderBy {
  id
  transaction
  transaction__id
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__cumulativeGasUsed
  transaction__gasUsedUSD
  transaction__createdAtBlock
  transaction__createdAtTimestamp
  timestamp
  pair
  pair__id
  pair__type
  pair__swapFee
  pair__twapEnabled
  pair__name
  pair__source
  pair__createdAtBlock
  pair__createdAtTimestamp
  pair__reserve0
  pair__reserve1
  pair__liquidity
  pair__liquidityUSD
  pair__liquidityNative
  pair__trackedLiquidityNative
  pair__token0Price
  pair__token1Price
  pair__volumeNative
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__volumeToken0
  pair__volumeToken1
  pair__feesNative
  pair__feesUSD
  pair__apr
  pair__aprUpdatedAtTimestamp
  pair__txCount
  sender
  tokenIn
  tokenIn__id
  tokenIn__symbol
  tokenIn__symbolSuccess
  tokenIn__name
  tokenIn__nameSuccess
  tokenIn__decimals
  tokenIn__decimalsSuccess
  tokenIn__liquidity
  tokenIn__liquidityNative
  tokenIn__liquidityUSD
  tokenIn__volume
  tokenIn__volumeNative
  tokenIn__volumeUSD
  tokenIn__untrackedVolumeUSD
  tokenIn__feesNative
  tokenIn__feesUSD
  tokenIn__txCount
  tokenIn__pairCount
  tokenOut
  tokenOut__id
  tokenOut__symbol
  tokenOut__symbolSuccess
  tokenOut__name
  tokenOut__nameSuccess
  tokenOut__decimals
  tokenOut__decimalsSuccess
  tokenOut__liquidity
  tokenOut__liquidityNative
  tokenOut__liquidityUSD
  tokenOut__volume
  tokenOut__volumeNative
  tokenOut__volumeUSD
  tokenOut__untrackedVolumeUSD
  tokenOut__feesNative
  tokenOut__feesUSD
  tokenOut__txCount
  tokenOut__pairCount
  amountIn
  amountOut
  to
  logIndex
  amountUSD
}

type TokenPrice {
  """ same as token entity id, address of token """
  id: ID!
  """ Token """
  token: Token!
  """ derived native, this is useful for calculating price. (derivedNative * bundle.nativePrice = USD price) 
  """
  derivedNative: BigDecimal!
  """ price in USD. NOTE: this will not always be up to date, it only updates when onSync event is emitted, bundle.nativePrice could have changed. 
  """
  lastUsdPrice: BigDecimal!
  """ Which token this price is based on """
  pricedOffToken: Token
  """ Which pair this price is based on """
  pricedOffPair: Pair
  sourceName: String
}

input TokenPrice_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  derivedNative: BigDecimal
  derivedNative_not: BigDecimal
  derivedNative_gt: BigDecimal
  derivedNative_lt: BigDecimal
  derivedNative_gte: BigDecimal
  derivedNative_lte: BigDecimal
  derivedNative_in: [BigDecimal!]
  derivedNative_not_in: [BigDecimal!]
  lastUsdPrice: BigDecimal
  lastUsdPrice_not: BigDecimal
  lastUsdPrice_gt: BigDecimal
  lastUsdPrice_lt: BigDecimal
  lastUsdPrice_gte: BigDecimal
  lastUsdPrice_lte: BigDecimal
  lastUsdPrice_in: [BigDecimal!]
  lastUsdPrice_not_in: [BigDecimal!]
  pricedOffToken: String
  pricedOffToken_not: String
  pricedOffToken_gt: String
  pricedOffToken_lt: String
  pricedOffToken_gte: String
  pricedOffToken_lte: String
  pricedOffToken_in: [String!]
  pricedOffToken_not_in: [String!]
  pricedOffToken_contains: String
  pricedOffToken_contains_nocase: String
  pricedOffToken_not_contains: String
  pricedOffToken_not_contains_nocase: String
  pricedOffToken_starts_with: String
  pricedOffToken_starts_with_nocase: String
  pricedOffToken_not_starts_with: String
  pricedOffToken_not_starts_with_nocase: String
  pricedOffToken_ends_with: String
  pricedOffToken_ends_with_nocase: String
  pricedOffToken_not_ends_with: String
  pricedOffToken_not_ends_with_nocase: String
  pricedOffToken_: Token_filter
  pricedOffPair: String
  pricedOffPair_not: String
  pricedOffPair_gt: String
  pricedOffPair_lt: String
  pricedOffPair_gte: String
  pricedOffPair_lte: String
  pricedOffPair_in: [String!]
  pricedOffPair_not_in: [String!]
  pricedOffPair_contains: String
  pricedOffPair_contains_nocase: String
  pricedOffPair_not_contains: String
  pricedOffPair_not_contains_nocase: String
  pricedOffPair_starts_with: String
  pricedOffPair_starts_with_nocase: String
  pricedOffPair_not_starts_with: String
  pricedOffPair_not_starts_with_nocase: String
  pricedOffPair_ends_with: String
  pricedOffPair_ends_with_nocase: String
  pricedOffPair_not_ends_with: String
  pricedOffPair_not_ends_with_nocase: String
  pricedOffPair_: Pair_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenPrice_filter]
  or: [TokenPrice_filter]
}

enum TokenPrice_orderBy {
  id
  token
  token__id
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  token__liquidity
  token__liquidityNative
  token__liquidityUSD
  token__volume
  token__volumeNative
  token__volumeUSD
  token__untrackedVolumeUSD
  token__feesNative
  token__feesUSD
  token__txCount
  token__pairCount
  derivedNative
  lastUsdPrice
  pricedOffToken
  pricedOffToken__id
  pricedOffToken__symbol
  pricedOffToken__symbolSuccess
  pricedOffToken__name
  pricedOffToken__nameSuccess
  pricedOffToken__decimals
  pricedOffToken__decimalsSuccess
  pricedOffToken__liquidity
  pricedOffToken__liquidityNative
  pricedOffToken__liquidityUSD
  pricedOffToken__volume
  pricedOffToken__volumeNative
  pricedOffToken__volumeUSD
  pricedOffToken__untrackedVolumeUSD
  pricedOffToken__feesNative
  pricedOffToken__feesUSD
  pricedOffToken__txCount
  pricedOffToken__pairCount
  pricedOffPair
  pricedOffPair__id
  pricedOffPair__type
  pricedOffPair__swapFee
  pricedOffPair__twapEnabled
  pricedOffPair__name
  pricedOffPair__source
  pricedOffPair__createdAtBlock
  pricedOffPair__createdAtTimestamp
  pricedOffPair__reserve0
  pricedOffPair__reserve1
  pricedOffPair__liquidity
  pricedOffPair__liquidityUSD
  pricedOffPair__liquidityNative
  pricedOffPair__trackedLiquidityNative
  pricedOffPair__token0Price
  pricedOffPair__token1Price
  pricedOffPair__volumeNative
  pricedOffPair__volumeUSD
  pricedOffPair__untrackedVolumeUSD
  pricedOffPair__volumeToken0
  pricedOffPair__volumeToken1
  pricedOffPair__feesNative
  pricedOffPair__feesUSD
  pricedOffPair__apr
  pricedOffPair__aprUpdatedAtTimestamp
  pricedOffPair__txCount
}

type V2Transaction {
  """ Tx hash """
  id: ID!
  gasLimit: BigInt!
  gasPrice: BigInt!
  """ Gas used in native """
  gasUsed: BigInt
  cumulativeGasUsed: BigInt
  """ Gas used in USD """
  gasUsedUSD: BigDecimal
  mints(skip: Int = 0, first: Int = 100, orderBy: Mint_orderBy, orderDirection: OrderDirection, where: Mint_filter): [V2Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: Burn_orderBy, orderDirection: OrderDirection, where: Burn_filter): [V2Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, where: Swap_filter): [V2Swap!]!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  sourceName: String
}

type _TokenPair {
  """ id is created by combining token.id and count, e.g. 0x00x00:1 """
  id: ID!
  """ Pair """
  pair: Pair!
  """ Token """
  token: Token!
  sourceName: String
}

input _TokenPair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: Pair_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [_TokenPair_filter]
  or: [_TokenPair_filter]
}

enum _TokenPair_orderBy {
  id
  pair
  pair__id
  pair__type
  pair__swapFee
  pair__twapEnabled
  pair__name
  pair__source
  pair__createdAtBlock
  pair__createdAtTimestamp
  pair__reserve0
  pair__reserve1
  pair__liquidity
  pair__liquidityUSD
  pair__liquidityNative
  pair__trackedLiquidityNative
  pair__token0Price
  pair__token1Price
  pair__volumeNative
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__volumeToken0
  pair__volumeToken1
  pair__feesNative
  pair__feesUSD
  pair__apr
  pair__aprUpdatedAtTimestamp
  pair__txCount
  token
  token__id
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  token__liquidity
  token__liquidityNative
  token__liquidityUSD
  token__volume
  token__volumeNative
  token__volumeUSD
  token__untrackedVolumeUSD
  token__feesNative
  token__feesUSD
  token__txCount
  token__pairCount
}

type ApiVersion {
  """
  Version number in SemVer format
  
  """
  version: String!
  sourceName: String
}

input BlockInput {
  hash: Bytes!
  number: BigInt!
}

type CachedEthereumCall {
  idHash: Bytes!
  block: Block!
  contractAddress: Bytes!
  returnValue: Bytes!
  sourceName: String
}

interface ChainIndexingStatus {
  network: String!
  chainHeadBlock: Block
  earliestBlock: EarliestBlock
  latestBlock: Block
  lastHealthyBlock: Block
}

scalar Date

type EarliestBlock {
  hash: Bytes!
  number: BigInt!
  sourceName: String
}

type EntityChanges {
  updates: [EntityTypeUpdates!]!
  deletions: [EntityTypeDeletions!]!
  sourceName: String
}

type EntityTypeDeletions {
  type: String!
  entities: [ID!]!
  sourceName: String
}

type EntityTypeUpdates {
  type: String!
  entities: [JSONObject!]!
  sourceName: String
}

type EthereumIndexingStatus implements ChainIndexingStatus {
  network: String!
  chainHeadBlock: Block
  earliestBlock: EarliestBlock
  latestBlock: Block
  lastHealthyBlock: Block
  sourceName: String
}

enum Feature {
  nonFatalErrors
  grafting
  fullTextSearch
  ipfsOnEthereumContracts
}

enum Health {
  """Subgraph syncing normally"""
  healthy
  """Subgraph syncing but with errors"""
  unhealthy
  """Subgraph halted due to errors"""
  failed
}

scalar JSONObject

type PartialBlock {
  hash: Bytes
  number: BigInt!
  sourceName: String
}

input ProofOfIndexingRequest {
  deployment: String!
  block: BlockInput!
}

type ProofOfIndexingResult {
  deployment: String!
  block: Block!
  """
  There may not be a proof of indexing available for the deployment and block
  """
  proofOfIndexing: Bytes
  sourceName: String
}

input PublicProofOfIndexingRequest {
  deployment: String!
  blockNumber: BigInt!
}

type PublicProofOfIndexingResult {
  deployment: String!
  block: PartialBlock!
  proofOfIndexing: Bytes!
  sourceName: String
}

type SubgraphError {
  message: String!
  block: Block
  handler: String
  deterministic: Boolean!
  sourceName: String
}

type SubgraphFeatures {
  apiVersion: String
  specVersion: String!
  features: [Feature!]!
  dataSources: [String!]!
  handlers: [String!]!
  network: String
  sourceName: String
}

type SubgraphIndexingStatus {
  subgraph: String!
  synced: Boolean!
  health: Health!
  """If the subgraph has failed, this is the error caused it"""
  fatalError: SubgraphError
  """Sorted from first to last, limited to first 1000"""
  nonFatalErrors: [SubgraphError!]!
  chains: [ChainIndexingStatus!]!
  entityCount: BigInt!
  node: String
  paused: Boolean!
  historyBlocks: Int!
  sourceName: String
}

type Version {
  version: String!
  commit: String!
  sourceName: String
}

type MasterChef {
  id: ID!
  totalAllocPoint: BigInt!
  pools(skip: Int = 0, first: Int = 100, orderBy: Pool_orderBy, orderDirection: OrderDirection, where: Pool_filter): [Pool!]!
  poolCount: BigInt!
  timestamp: BigInt!
  block: BigInt!
  sourceName: String
  bonusMultiplier: BigInt!
  bonusEndBlock: BigInt!
  devaddr: Bytes!
  migrator: Bytes!
  owner: Bytes!
  startBlock: BigInt!
  sushi: Bytes!
  sushiPerBlock: BigInt!
  slpBalance: BigDecimal!
  slpAge: BigDecimal!
  slpAgeRemoved: BigDecimal!
  slpDeposited: BigDecimal!
  slpWithdrawn: BigDecimal!
  history(skip: Int = 0, first: Int = 100, orderBy: History_orderBy, orderDirection: OrderDirection, where: History_filter): [History!]!
  updatedAt: BigInt!
}

input MasterChef_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalAllocPoint: BigInt
  totalAllocPoint_not: BigInt
  totalAllocPoint_gt: BigInt
  totalAllocPoint_lt: BigInt
  totalAllocPoint_gte: BigInt
  totalAllocPoint_lte: BigInt
  totalAllocPoint_in: [BigInt!]
  totalAllocPoint_not_in: [BigInt!]
  pools_: Pool_filter
  poolCount: BigInt
  poolCount_not: BigInt
  poolCount_gt: BigInt
  poolCount_lt: BigInt
  poolCount_gte: BigInt
  poolCount_lte: BigInt
  poolCount_in: [BigInt!]
  poolCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MasterChef_filter]
  or: [MasterChef_filter]
  bonusMultiplier: BigInt
  bonusMultiplier_not: BigInt
  bonusMultiplier_gt: BigInt
  bonusMultiplier_lt: BigInt
  bonusMultiplier_gte: BigInt
  bonusMultiplier_lte: BigInt
  bonusMultiplier_in: [BigInt!]
  bonusMultiplier_not_in: [BigInt!]
  bonusEndBlock: BigInt
  bonusEndBlock_not: BigInt
  bonusEndBlock_gt: BigInt
  bonusEndBlock_lt: BigInt
  bonusEndBlock_gte: BigInt
  bonusEndBlock_lte: BigInt
  bonusEndBlock_in: [BigInt!]
  bonusEndBlock_not_in: [BigInt!]
  devaddr: Bytes
  devaddr_not: Bytes
  devaddr_gt: Bytes
  devaddr_lt: Bytes
  devaddr_gte: Bytes
  devaddr_lte: Bytes
  devaddr_in: [Bytes!]
  devaddr_not_in: [Bytes!]
  devaddr_contains: Bytes
  devaddr_not_contains: Bytes
  migrator: Bytes
  migrator_not: Bytes
  migrator_gt: Bytes
  migrator_lt: Bytes
  migrator_gte: Bytes
  migrator_lte: Bytes
  migrator_in: [Bytes!]
  migrator_not_in: [Bytes!]
  migrator_contains: Bytes
  migrator_not_contains: Bytes
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  startBlock: BigInt
  startBlock_not: BigInt
  startBlock_gt: BigInt
  startBlock_lt: BigInt
  startBlock_gte: BigInt
  startBlock_lte: BigInt
  startBlock_in: [BigInt!]
  startBlock_not_in: [BigInt!]
  sushi: Bytes
  sushi_not: Bytes
  sushi_gt: Bytes
  sushi_lt: Bytes
  sushi_gte: Bytes
  sushi_lte: Bytes
  sushi_in: [Bytes!]
  sushi_not_in: [Bytes!]
  sushi_contains: Bytes
  sushi_not_contains: Bytes
  sushiPerBlock: BigInt
  sushiPerBlock_not: BigInt
  sushiPerBlock_gt: BigInt
  sushiPerBlock_lt: BigInt
  sushiPerBlock_gte: BigInt
  sushiPerBlock_lte: BigInt
  sushiPerBlock_in: [BigInt!]
  sushiPerBlock_not_in: [BigInt!]
  slpBalance: BigDecimal
  slpBalance_not: BigDecimal
  slpBalance_gt: BigDecimal
  slpBalance_lt: BigDecimal
  slpBalance_gte: BigDecimal
  slpBalance_lte: BigDecimal
  slpBalance_in: [BigDecimal!]
  slpBalance_not_in: [BigDecimal!]
  slpAge: BigDecimal
  slpAge_not: BigDecimal
  slpAge_gt: BigDecimal
  slpAge_lt: BigDecimal
  slpAge_gte: BigDecimal
  slpAge_lte: BigDecimal
  slpAge_in: [BigDecimal!]
  slpAge_not_in: [BigDecimal!]
  slpAgeRemoved: BigDecimal
  slpAgeRemoved_not: BigDecimal
  slpAgeRemoved_gt: BigDecimal
  slpAgeRemoved_lt: BigDecimal
  slpAgeRemoved_gte: BigDecimal
  slpAgeRemoved_lte: BigDecimal
  slpAgeRemoved_in: [BigDecimal!]
  slpAgeRemoved_not_in: [BigDecimal!]
  slpDeposited: BigDecimal
  slpDeposited_not: BigDecimal
  slpDeposited_gt: BigDecimal
  slpDeposited_lt: BigDecimal
  slpDeposited_gte: BigDecimal
  slpDeposited_lte: BigDecimal
  slpDeposited_in: [BigDecimal!]
  slpDeposited_not_in: [BigDecimal!]
  slpWithdrawn: BigDecimal
  slpWithdrawn_not: BigDecimal
  slpWithdrawn_gt: BigDecimal
  slpWithdrawn_lt: BigDecimal
  slpWithdrawn_gte: BigDecimal
  slpWithdrawn_lte: BigDecimal
  slpWithdrawn_in: [BigDecimal!]
  slpWithdrawn_not_in: [BigDecimal!]
  history_: History_filter
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]
}

enum MasterChef_orderBy {
  id
  totalAllocPoint
  pools
  poolCount
  timestamp
  block
  bonusMultiplier
  bonusEndBlock
  devaddr
  migrator
  owner
  startBlock
  sushi
  sushiPerBlock
  slpBalance
  slpAge
  slpAgeRemoved
  slpDeposited
  slpWithdrawn
  history
  updatedAt
}

type Pool {
  id: ID!
  masterChef: MasterChef!
  pair: Bytes!
  rewarder: Rewarder
  allocPoint: BigInt!
  lastRewardBlock: BigInt!
  accSushiPerShare: BigInt!
  slpBalance: BigDecimal!
  users(skip: Int = 0, first: Int = 100, orderBy: User_orderBy, orderDirection: OrderDirection, where: User_filter): [User!]!
  userCount: BigInt!
  timestamp: BigInt!
  block: BigInt!
  sourceName: String
  slpAge: BigDecimal!
  slpAgeRemoved: BigDecimal!
  slpDeposited: BigDecimal!
  slpWithdrawn: BigDecimal!
  updatedAt: BigInt!
  entryUSD: BigDecimal!
  exitUSD: BigDecimal!
  sushiHarvested: BigDecimal!
  sushiHarvestedUSD: BigDecimal!
}

input Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  masterChef: String
  masterChef_not: String
  masterChef_gt: String
  masterChef_lt: String
  masterChef_gte: String
  masterChef_lte: String
  masterChef_in: [String!]
  masterChef_not_in: [String!]
  masterChef_contains: String
  masterChef_contains_nocase: String
  masterChef_not_contains: String
  masterChef_not_contains_nocase: String
  masterChef_starts_with: String
  masterChef_starts_with_nocase: String
  masterChef_not_starts_with: String
  masterChef_not_starts_with_nocase: String
  masterChef_ends_with: String
  masterChef_ends_with_nocase: String
  masterChef_not_ends_with: String
  masterChef_not_ends_with_nocase: String
  masterChef_: MasterChef_filter
  pair: Bytes
  pair_not: Bytes
  pair_gt: Bytes
  pair_lt: Bytes
  pair_gte: Bytes
  pair_lte: Bytes
  pair_in: [Bytes!]
  pair_not_in: [Bytes!]
  pair_contains: Bytes
  pair_not_contains: Bytes
  rewarder: String
  rewarder_not: String
  rewarder_gt: String
  rewarder_lt: String
  rewarder_gte: String
  rewarder_lte: String
  rewarder_in: [String!]
  rewarder_not_in: [String!]
  rewarder_contains: String
  rewarder_contains_nocase: String
  rewarder_not_contains: String
  rewarder_not_contains_nocase: String
  rewarder_starts_with: String
  rewarder_starts_with_nocase: String
  rewarder_not_starts_with: String
  rewarder_not_starts_with_nocase: String
  rewarder_ends_with: String
  rewarder_ends_with_nocase: String
  rewarder_not_ends_with: String
  rewarder_not_ends_with_nocase: String
  rewarder_: Rewarder_filter
  allocPoint: BigInt
  allocPoint_not: BigInt
  allocPoint_gt: BigInt
  allocPoint_lt: BigInt
  allocPoint_gte: BigInt
  allocPoint_lte: BigInt
  allocPoint_in: [BigInt!]
  allocPoint_not_in: [BigInt!]
  lastRewardBlock: BigInt
  lastRewardBlock_not: BigInt
  lastRewardBlock_gt: BigInt
  lastRewardBlock_lt: BigInt
  lastRewardBlock_gte: BigInt
  lastRewardBlock_lte: BigInt
  lastRewardBlock_in: [BigInt!]
  lastRewardBlock_not_in: [BigInt!]
  accSushiPerShare: BigInt
  accSushiPerShare_not: BigInt
  accSushiPerShare_gt: BigInt
  accSushiPerShare_lt: BigInt
  accSushiPerShare_gte: BigInt
  accSushiPerShare_lte: BigInt
  accSushiPerShare_in: [BigInt!]
  accSushiPerShare_not_in: [BigInt!]
  slpBalance: BigDecimal
  slpBalance_not: BigDecimal
  slpBalance_gt: BigDecimal
  slpBalance_lt: BigDecimal
  slpBalance_gte: BigDecimal
  slpBalance_lte: BigDecimal
  slpBalance_in: [BigDecimal!]
  slpBalance_not_in: [BigDecimal!]
  users_: User_filter
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pool_filter]
  or: [Pool_filter]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: MasterChef_filter
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  slpAge: BigDecimal
  slpAge_not: BigDecimal
  slpAge_gt: BigDecimal
  slpAge_lt: BigDecimal
  slpAge_gte: BigDecimal
  slpAge_lte: BigDecimal
  slpAge_in: [BigDecimal!]
  slpAge_not_in: [BigDecimal!]
  slpAgeRemoved: BigDecimal
  slpAgeRemoved_not: BigDecimal
  slpAgeRemoved_gt: BigDecimal
  slpAgeRemoved_lt: BigDecimal
  slpAgeRemoved_gte: BigDecimal
  slpAgeRemoved_lte: BigDecimal
  slpAgeRemoved_in: [BigDecimal!]
  slpAgeRemoved_not_in: [BigDecimal!]
  slpDeposited: BigDecimal
  slpDeposited_not: BigDecimal
  slpDeposited_gt: BigDecimal
  slpDeposited_lt: BigDecimal
  slpDeposited_gte: BigDecimal
  slpDeposited_lte: BigDecimal
  slpDeposited_in: [BigDecimal!]
  slpDeposited_not_in: [BigDecimal!]
  slpWithdrawn: BigDecimal
  slpWithdrawn_not: BigDecimal
  slpWithdrawn_gt: BigDecimal
  slpWithdrawn_lt: BigDecimal
  slpWithdrawn_gte: BigDecimal
  slpWithdrawn_lte: BigDecimal
  slpWithdrawn_in: [BigDecimal!]
  slpWithdrawn_not_in: [BigDecimal!]
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]
  entryUSD: BigDecimal
  entryUSD_not: BigDecimal
  entryUSD_gt: BigDecimal
  entryUSD_lt: BigDecimal
  entryUSD_gte: BigDecimal
  entryUSD_lte: BigDecimal
  entryUSD_in: [BigDecimal!]
  entryUSD_not_in: [BigDecimal!]
  exitUSD: BigDecimal
  exitUSD_not: BigDecimal
  exitUSD_gt: BigDecimal
  exitUSD_lt: BigDecimal
  exitUSD_gte: BigDecimal
  exitUSD_lte: BigDecimal
  exitUSD_in: [BigDecimal!]
  exitUSD_not_in: [BigDecimal!]
  sushiHarvested: BigDecimal
  sushiHarvested_not: BigDecimal
  sushiHarvested_gt: BigDecimal
  sushiHarvested_lt: BigDecimal
  sushiHarvested_gte: BigDecimal
  sushiHarvested_lte: BigDecimal
  sushiHarvested_in: [BigDecimal!]
  sushiHarvested_not_in: [BigDecimal!]
  sushiHarvestedUSD: BigDecimal
  sushiHarvestedUSD_not: BigDecimal
  sushiHarvestedUSD_gt: BigDecimal
  sushiHarvestedUSD_lt: BigDecimal
  sushiHarvestedUSD_gte: BigDecimal
  sushiHarvestedUSD_lte: BigDecimal
  sushiHarvestedUSD_in: [BigDecimal!]
  sushiHarvestedUSD_not_in: [BigDecimal!]
}

enum Pool_orderBy {
  id
  masterChef
  masterChef__id
  masterChef__totalAllocPoint
  masterChef__poolCount
  masterChef__timestamp
  masterChef__block
  pair
  rewarder
  rewarder__id
  rewarder__rewardToken
  rewarder__rewardPerSecond
  rewarder__timestamp
  rewarder__block
  allocPoint
  lastRewardBlock
  accSushiPerShare
  slpBalance
  users
  userCount
  timestamp
  block
  owner
  owner__id
  owner__bonusMultiplier
  owner__bonusEndBlock
  owner__devaddr
  owner__migrator
  owner__owner
  owner__startBlock
  owner__sushi
  owner__sushiPerBlock
  owner__totalAllocPoint
  owner__poolCount
  owner__slpBalance
  owner__slpAge
  owner__slpAgeRemoved
  owner__slpDeposited
  owner__slpWithdrawn
  owner__updatedAt
  balance
  slpAge
  slpAgeRemoved
  slpDeposited
  slpWithdrawn
  updatedAt
  entryUSD
  exitUSD
  sushiHarvested
  sushiHarvestedUSD
}

type Rewarder {
  id: ID!
  rewardToken: Bytes!
  rewardPerSecond: BigInt!
  timestamp: BigInt!
  block: BigInt!
  sourceName: String
}

input Rewarder_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rewardToken: Bytes
  rewardToken_not: Bytes
  rewardToken_gt: Bytes
  rewardToken_lt: Bytes
  rewardToken_gte: Bytes
  rewardToken_lte: Bytes
  rewardToken_in: [Bytes!]
  rewardToken_not_in: [Bytes!]
  rewardToken_contains: Bytes
  rewardToken_not_contains: Bytes
  rewardPerSecond: BigInt
  rewardPerSecond_not: BigInt
  rewardPerSecond_gt: BigInt
  rewardPerSecond_lt: BigInt
  rewardPerSecond_gte: BigInt
  rewardPerSecond_lte: BigInt
  rewardPerSecond_in: [BigInt!]
  rewardPerSecond_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Rewarder_filter]
  or: [Rewarder_filter]
}

enum Rewarder_orderBy {
  id
  rewardToken
  rewardPerSecond
  timestamp
  block
}

type History {
  id: ID!
  owner: MasterChef!
  slpBalance: BigDecimal!
  slpAge: BigDecimal!
  slpAgeRemoved: BigDecimal!
  slpDeposited: BigDecimal!
  slpWithdrawn: BigDecimal!
  timestamp: BigInt!
  block: BigInt!
  sourceName: String
}

input History_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: MasterChef_filter
  slpBalance: BigDecimal
  slpBalance_not: BigDecimal
  slpBalance_gt: BigDecimal
  slpBalance_lt: BigDecimal
  slpBalance_gte: BigDecimal
  slpBalance_lte: BigDecimal
  slpBalance_in: [BigDecimal!]
  slpBalance_not_in: [BigDecimal!]
  slpAge: BigDecimal
  slpAge_not: BigDecimal
  slpAge_gt: BigDecimal
  slpAge_lt: BigDecimal
  slpAge_gte: BigDecimal
  slpAge_lte: BigDecimal
  slpAge_in: [BigDecimal!]
  slpAge_not_in: [BigDecimal!]
  slpAgeRemoved: BigDecimal
  slpAgeRemoved_not: BigDecimal
  slpAgeRemoved_gt: BigDecimal
  slpAgeRemoved_lt: BigDecimal
  slpAgeRemoved_gte: BigDecimal
  slpAgeRemoved_lte: BigDecimal
  slpAgeRemoved_in: [BigDecimal!]
  slpAgeRemoved_not_in: [BigDecimal!]
  slpDeposited: BigDecimal
  slpDeposited_not: BigDecimal
  slpDeposited_gt: BigDecimal
  slpDeposited_lt: BigDecimal
  slpDeposited_gte: BigDecimal
  slpDeposited_lte: BigDecimal
  slpDeposited_in: [BigDecimal!]
  slpDeposited_not_in: [BigDecimal!]
  slpWithdrawn: BigDecimal
  slpWithdrawn_not: BigDecimal
  slpWithdrawn_gt: BigDecimal
  slpWithdrawn_lt: BigDecimal
  slpWithdrawn_gte: BigDecimal
  slpWithdrawn_lte: BigDecimal
  slpWithdrawn_in: [BigDecimal!]
  slpWithdrawn_not_in: [BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [History_filter]
  or: [History_filter]
}

enum History_orderBy {
  id
  owner
  owner__id
  owner__bonusMultiplier
  owner__bonusEndBlock
  owner__devaddr
  owner__migrator
  owner__owner
  owner__startBlock
  owner__sushi
  owner__sushiPerBlock
  owner__totalAllocPoint
  owner__poolCount
  owner__slpBalance
  owner__slpAge
  owner__slpAgeRemoved
  owner__slpDeposited
  owner__slpWithdrawn
  owner__updatedAt
  slpBalance
  slpAge
  slpAgeRemoved
  slpDeposited
  slpWithdrawn
  timestamp
  block
}

type PoolHistory {
  id: ID!
  pool: Pool!
  slpBalance: BigDecimal!
  slpAge: BigDecimal!
  slpAgeRemoved: BigDecimal!
  slpDeposited: BigDecimal!
  slpWithdrawn: BigDecimal!
  userCount: BigInt!
  timestamp: BigInt!
  block: BigInt!
  entryUSD: BigDecimal!
  exitUSD: BigDecimal!
  sushiHarvested: BigDecimal!
  sushiHarvestedUSD: BigDecimal!
  sourceName: String
}

input PoolHistory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  slpBalance: BigDecimal
  slpBalance_not: BigDecimal
  slpBalance_gt: BigDecimal
  slpBalance_lt: BigDecimal
  slpBalance_gte: BigDecimal
  slpBalance_lte: BigDecimal
  slpBalance_in: [BigDecimal!]
  slpBalance_not_in: [BigDecimal!]
  slpAge: BigDecimal
  slpAge_not: BigDecimal
  slpAge_gt: BigDecimal
  slpAge_lt: BigDecimal
  slpAge_gte: BigDecimal
  slpAge_lte: BigDecimal
  slpAge_in: [BigDecimal!]
  slpAge_not_in: [BigDecimal!]
  slpAgeRemoved: BigDecimal
  slpAgeRemoved_not: BigDecimal
  slpAgeRemoved_gt: BigDecimal
  slpAgeRemoved_lt: BigDecimal
  slpAgeRemoved_gte: BigDecimal
  slpAgeRemoved_lte: BigDecimal
  slpAgeRemoved_in: [BigDecimal!]
  slpAgeRemoved_not_in: [BigDecimal!]
  slpDeposited: BigDecimal
  slpDeposited_not: BigDecimal
  slpDeposited_gt: BigDecimal
  slpDeposited_lt: BigDecimal
  slpDeposited_gte: BigDecimal
  slpDeposited_lte: BigDecimal
  slpDeposited_in: [BigDecimal!]
  slpDeposited_not_in: [BigDecimal!]
  slpWithdrawn: BigDecimal
  slpWithdrawn_not: BigDecimal
  slpWithdrawn_gt: BigDecimal
  slpWithdrawn_lt: BigDecimal
  slpWithdrawn_gte: BigDecimal
  slpWithdrawn_lte: BigDecimal
  slpWithdrawn_in: [BigDecimal!]
  slpWithdrawn_not_in: [BigDecimal!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  entryUSD: BigDecimal
  entryUSD_not: BigDecimal
  entryUSD_gt: BigDecimal
  entryUSD_lt: BigDecimal
  entryUSD_gte: BigDecimal
  entryUSD_lte: BigDecimal
  entryUSD_in: [BigDecimal!]
  entryUSD_not_in: [BigDecimal!]
  exitUSD: BigDecimal
  exitUSD_not: BigDecimal
  exitUSD_gt: BigDecimal
  exitUSD_lt: BigDecimal
  exitUSD_gte: BigDecimal
  exitUSD_lte: BigDecimal
  exitUSD_in: [BigDecimal!]
  exitUSD_not_in: [BigDecimal!]
  sushiHarvested: BigDecimal
  sushiHarvested_not: BigDecimal
  sushiHarvested_gt: BigDecimal
  sushiHarvested_lt: BigDecimal
  sushiHarvested_gte: BigDecimal
  sushiHarvested_lte: BigDecimal
  sushiHarvested_in: [BigDecimal!]
  sushiHarvested_not_in: [BigDecimal!]
  sushiHarvestedUSD: BigDecimal
  sushiHarvestedUSD_not: BigDecimal
  sushiHarvestedUSD_gt: BigDecimal
  sushiHarvestedUSD_lt: BigDecimal
  sushiHarvestedUSD_gte: BigDecimal
  sushiHarvestedUSD_lte: BigDecimal
  sushiHarvestedUSD_in: [BigDecimal!]
  sushiHarvestedUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolHistory_filter]
  or: [PoolHistory_filter]
}

enum PoolHistory_orderBy {
  id
  pool
  pool__id
  pool__pair
  pool__allocPoint
  pool__lastRewardBlock
  pool__accSushiPerShare
  pool__balance
  pool__userCount
  pool__slpBalance
  pool__slpAge
  pool__slpAgeRemoved
  pool__slpDeposited
  pool__slpWithdrawn
  pool__timestamp
  pool__block
  pool__updatedAt
  pool__entryUSD
  pool__exitUSD
  pool__sushiHarvested
  pool__sushiHarvestedUSD
  slpBalance
  slpAge
  slpAgeRemoved
  slpDeposited
  slpWithdrawn
  userCount
  timestamp
  block
  entryUSD
  exitUSD
  sushiHarvested
  sushiHarvestedUSD
}

enum deprecated_Aggregation_interval {
  hour
  day
}

scalar deprecated_BigDecimal

input deprecated_BlockChangedFilter {
  number_gte: Int!
}

input deprecated_Block_height {
  hash: deprecated_Bytes
  number: Int
  number_gte: Int
}

type deprecated_Bundle {
  id: ID!
  ethPrice: deprecated_BigDecimal!
  sourceName: String
}

input deprecated_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: deprecated_BigDecimal
  ethPrice_not: deprecated_BigDecimal
  ethPrice_gt: deprecated_BigDecimal
  ethPrice_lt: deprecated_BigDecimal
  ethPrice_gte: deprecated_BigDecimal
  ethPrice_lte: deprecated_BigDecimal
  ethPrice_in: [deprecated_BigDecimal!]
  ethPrice_not_in: [deprecated_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_Bundle_filter]
  or: [deprecated_Bundle_filter]
}

enum deprecated_Bundle_orderBy {
  id
  ethPrice
}

type deprecated_Burn {
  id: ID!
  transaction: deprecated_Transaction!
  timestamp: BigInt!
  pair: deprecated_Pair!
  liquidity: deprecated_BigDecimal!
  sender: String
  amount0: deprecated_BigDecimal
  amount1: deprecated_BigDecimal
  to: String
  logIndex: BigInt
  amountUSD: deprecated_BigDecimal
  complete: Boolean!
  feeTo: String
  feeLiquidity: deprecated_BigDecimal
  sourceName: String
}

input deprecated_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: deprecated_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: deprecated_Pair_filter
  liquidity: deprecated_BigDecimal
  liquidity_not: deprecated_BigDecimal
  liquidity_gt: deprecated_BigDecimal
  liquidity_lt: deprecated_BigDecimal
  liquidity_gte: deprecated_BigDecimal
  liquidity_lte: deprecated_BigDecimal
  liquidity_in: [deprecated_BigDecimal!]
  liquidity_not_in: [deprecated_BigDecimal!]
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  amount0: deprecated_BigDecimal
  amount0_not: deprecated_BigDecimal
  amount0_gt: deprecated_BigDecimal
  amount0_lt: deprecated_BigDecimal
  amount0_gte: deprecated_BigDecimal
  amount0_lte: deprecated_BigDecimal
  amount0_in: [deprecated_BigDecimal!]
  amount0_not_in: [deprecated_BigDecimal!]
  amount1: deprecated_BigDecimal
  amount1_not: deprecated_BigDecimal
  amount1_gt: deprecated_BigDecimal
  amount1_lt: deprecated_BigDecimal
  amount1_gte: deprecated_BigDecimal
  amount1_lte: deprecated_BigDecimal
  amount1_in: [deprecated_BigDecimal!]
  amount1_not_in: [deprecated_BigDecimal!]
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: deprecated_BigDecimal
  amountUSD_not: deprecated_BigDecimal
  amountUSD_gt: deprecated_BigDecimal
  amountUSD_lt: deprecated_BigDecimal
  amountUSD_gte: deprecated_BigDecimal
  amountUSD_lte: deprecated_BigDecimal
  amountUSD_in: [deprecated_BigDecimal!]
  amountUSD_not_in: [deprecated_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: String
  feeTo_not: String
  feeTo_gt: String
  feeTo_lt: String
  feeTo_gte: String
  feeTo_lte: String
  feeTo_in: [String!]
  feeTo_not_in: [String!]
  feeTo_contains: String
  feeTo_contains_nocase: String
  feeTo_not_contains: String
  feeTo_not_contains_nocase: String
  feeTo_starts_with: String
  feeTo_starts_with_nocase: String
  feeTo_not_starts_with: String
  feeTo_not_starts_with_nocase: String
  feeTo_ends_with: String
  feeTo_ends_with_nocase: String
  feeTo_not_ends_with: String
  feeTo_not_ends_with_nocase: String
  feeLiquidity: deprecated_BigDecimal
  feeLiquidity_not: deprecated_BigDecimal
  feeLiquidity_gt: deprecated_BigDecimal
  feeLiquidity_lt: deprecated_BigDecimal
  feeLiquidity_gte: deprecated_BigDecimal
  feeLiquidity_lte: deprecated_BigDecimal
  feeLiquidity_in: [deprecated_BigDecimal!]
  feeLiquidity_not_in: [deprecated_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_Burn_filter]
  or: [deprecated_Burn_filter]
}

enum deprecated_Burn_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  timestamp
  pair
  pair__id
  pair__name
  pair__reserve0
  pair__reserve1
  pair__totalSupply
  pair__reserveETH
  pair__reserveUSD
  pair__trackedReserveETH
  pair__token0Price
  pair__token1Price
  pair__volumeToken0
  pair__volumeToken1
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__txCount
  pair__liquidityProviderCount
  pair__timestamp
  pair__block
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar deprecated_Bytes

type deprecated_DayData {
  id: ID!
  date: Int!
  factory: deprecated_Factory!
  volumeETH: deprecated_BigDecimal!
  volumeUSD: deprecated_BigDecimal!
  untrackedVolume: deprecated_BigDecimal!
  liquidityETH: deprecated_BigDecimal!
  liquidityUSD: deprecated_BigDecimal!
  txCount: BigInt!
  sourceName: String
}

input deprecated_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  factory_: deprecated_Factory_filter
  volumeETH: deprecated_BigDecimal
  volumeETH_not: deprecated_BigDecimal
  volumeETH_gt: deprecated_BigDecimal
  volumeETH_lt: deprecated_BigDecimal
  volumeETH_gte: deprecated_BigDecimal
  volumeETH_lte: deprecated_BigDecimal
  volumeETH_in: [deprecated_BigDecimal!]
  volumeETH_not_in: [deprecated_BigDecimal!]
  volumeUSD: deprecated_BigDecimal
  volumeUSD_not: deprecated_BigDecimal
  volumeUSD_gt: deprecated_BigDecimal
  volumeUSD_lt: deprecated_BigDecimal
  volumeUSD_gte: deprecated_BigDecimal
  volumeUSD_lte: deprecated_BigDecimal
  volumeUSD_in: [deprecated_BigDecimal!]
  volumeUSD_not_in: [deprecated_BigDecimal!]
  untrackedVolume: deprecated_BigDecimal
  untrackedVolume_not: deprecated_BigDecimal
  untrackedVolume_gt: deprecated_BigDecimal
  untrackedVolume_lt: deprecated_BigDecimal
  untrackedVolume_gte: deprecated_BigDecimal
  untrackedVolume_lte: deprecated_BigDecimal
  untrackedVolume_in: [deprecated_BigDecimal!]
  untrackedVolume_not_in: [deprecated_BigDecimal!]
  liquidityETH: deprecated_BigDecimal
  liquidityETH_not: deprecated_BigDecimal
  liquidityETH_gt: deprecated_BigDecimal
  liquidityETH_lt: deprecated_BigDecimal
  liquidityETH_gte: deprecated_BigDecimal
  liquidityETH_lte: deprecated_BigDecimal
  liquidityETH_in: [deprecated_BigDecimal!]
  liquidityETH_not_in: [deprecated_BigDecimal!]
  liquidityUSD: deprecated_BigDecimal
  liquidityUSD_not: deprecated_BigDecimal
  liquidityUSD_gt: deprecated_BigDecimal
  liquidityUSD_lt: deprecated_BigDecimal
  liquidityUSD_gte: deprecated_BigDecimal
  liquidityUSD_lte: deprecated_BigDecimal
  liquidityUSD_in: [deprecated_BigDecimal!]
  liquidityUSD_not_in: [deprecated_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_DayData_filter]
  or: [deprecated_DayData_filter]
}

enum deprecated_DayData_orderBy {
  id
  date
  factory
  factory__id
  factory__pairCount
  factory__volumeUSD
  factory__volumeETH
  factory__untrackedVolumeUSD
  factory__liquidityUSD
  factory__liquidityETH
  factory__txCount
  factory__tokenCount
  factory__userCount
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type deprecated_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: deprecated_BigDecimal!
  volumeETH: deprecated_BigDecimal!
  untrackedVolumeUSD: deprecated_BigDecimal!
  liquidityUSD: deprecated_BigDecimal!
  liquidityETH: deprecated_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: deprecated_Pair_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_Pair_filter): [deprecated_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: deprecated_Token_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_Token_filter): [deprecated_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: deprecated_HourData_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_HourData_filter): [deprecated_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: deprecated_DayData_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_DayData_filter): [deprecated_DayData!]!
  sourceName: String
}

input deprecated_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: deprecated_BigDecimal
  volumeUSD_not: deprecated_BigDecimal
  volumeUSD_gt: deprecated_BigDecimal
  volumeUSD_lt: deprecated_BigDecimal
  volumeUSD_gte: deprecated_BigDecimal
  volumeUSD_lte: deprecated_BigDecimal
  volumeUSD_in: [deprecated_BigDecimal!]
  volumeUSD_not_in: [deprecated_BigDecimal!]
  volumeETH: deprecated_BigDecimal
  volumeETH_not: deprecated_BigDecimal
  volumeETH_gt: deprecated_BigDecimal
  volumeETH_lt: deprecated_BigDecimal
  volumeETH_gte: deprecated_BigDecimal
  volumeETH_lte: deprecated_BigDecimal
  volumeETH_in: [deprecated_BigDecimal!]
  volumeETH_not_in: [deprecated_BigDecimal!]
  untrackedVolumeUSD: deprecated_BigDecimal
  untrackedVolumeUSD_not: deprecated_BigDecimal
  untrackedVolumeUSD_gt: deprecated_BigDecimal
  untrackedVolumeUSD_lt: deprecated_BigDecimal
  untrackedVolumeUSD_gte: deprecated_BigDecimal
  untrackedVolumeUSD_lte: deprecated_BigDecimal
  untrackedVolumeUSD_in: [deprecated_BigDecimal!]
  untrackedVolumeUSD_not_in: [deprecated_BigDecimal!]
  liquidityUSD: deprecated_BigDecimal
  liquidityUSD_not: deprecated_BigDecimal
  liquidityUSD_gt: deprecated_BigDecimal
  liquidityUSD_lt: deprecated_BigDecimal
  liquidityUSD_gte: deprecated_BigDecimal
  liquidityUSD_lte: deprecated_BigDecimal
  liquidityUSD_in: [deprecated_BigDecimal!]
  liquidityUSD_not_in: [deprecated_BigDecimal!]
  liquidityETH: deprecated_BigDecimal
  liquidityETH_not: deprecated_BigDecimal
  liquidityETH_gt: deprecated_BigDecimal
  liquidityETH_lt: deprecated_BigDecimal
  liquidityETH_gte: deprecated_BigDecimal
  liquidityETH_lte: deprecated_BigDecimal
  liquidityETH_in: [deprecated_BigDecimal!]
  liquidityETH_not_in: [deprecated_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  pairs_: deprecated_Pair_filter
  tokens_: deprecated_Token_filter
  hourData_: deprecated_HourData_filter
  dayData_: deprecated_DayData_filter
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_Factory_filter]
  or: [deprecated_Factory_filter]
}

enum deprecated_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type deprecated_HourData {
  id: ID!
  date: Int!
  factory: deprecated_Factory!
  volumeETH: deprecated_BigDecimal!
  volumeUSD: deprecated_BigDecimal!
  untrackedVolume: deprecated_BigDecimal!
  liquidityETH: deprecated_BigDecimal!
  liquidityUSD: deprecated_BigDecimal!
  txCount: BigInt!
  sourceName: String
}

input deprecated_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  factory_: deprecated_Factory_filter
  volumeETH: deprecated_BigDecimal
  volumeETH_not: deprecated_BigDecimal
  volumeETH_gt: deprecated_BigDecimal
  volumeETH_lt: deprecated_BigDecimal
  volumeETH_gte: deprecated_BigDecimal
  volumeETH_lte: deprecated_BigDecimal
  volumeETH_in: [deprecated_BigDecimal!]
  volumeETH_not_in: [deprecated_BigDecimal!]
  volumeUSD: deprecated_BigDecimal
  volumeUSD_not: deprecated_BigDecimal
  volumeUSD_gt: deprecated_BigDecimal
  volumeUSD_lt: deprecated_BigDecimal
  volumeUSD_gte: deprecated_BigDecimal
  volumeUSD_lte: deprecated_BigDecimal
  volumeUSD_in: [deprecated_BigDecimal!]
  volumeUSD_not_in: [deprecated_BigDecimal!]
  untrackedVolume: deprecated_BigDecimal
  untrackedVolume_not: deprecated_BigDecimal
  untrackedVolume_gt: deprecated_BigDecimal
  untrackedVolume_lt: deprecated_BigDecimal
  untrackedVolume_gte: deprecated_BigDecimal
  untrackedVolume_lte: deprecated_BigDecimal
  untrackedVolume_in: [deprecated_BigDecimal!]
  untrackedVolume_not_in: [deprecated_BigDecimal!]
  liquidityETH: deprecated_BigDecimal
  liquidityETH_not: deprecated_BigDecimal
  liquidityETH_gt: deprecated_BigDecimal
  liquidityETH_lt: deprecated_BigDecimal
  liquidityETH_gte: deprecated_BigDecimal
  liquidityETH_lte: deprecated_BigDecimal
  liquidityETH_in: [deprecated_BigDecimal!]
  liquidityETH_not_in: [deprecated_BigDecimal!]
  liquidityUSD: deprecated_BigDecimal
  liquidityUSD_not: deprecated_BigDecimal
  liquidityUSD_gt: deprecated_BigDecimal
  liquidityUSD_lt: deprecated_BigDecimal
  liquidityUSD_gte: deprecated_BigDecimal
  liquidityUSD_lte: deprecated_BigDecimal
  liquidityUSD_in: [deprecated_BigDecimal!]
  liquidityUSD_not_in: [deprecated_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_HourData_filter]
  or: [deprecated_HourData_filter]
}

enum deprecated_HourData_orderBy {
  id
  date
  factory
  factory__id
  factory__pairCount
  factory__volumeUSD
  factory__volumeETH
  factory__untrackedVolumeUSD
  factory__liquidityUSD
  factory__liquidityETH
  factory__txCount
  factory__tokenCount
  factory__userCount
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

"""
8 bytes signed integer

"""
scalar deprecated_Int8

type deprecated_LiquidityPosition {
  id: ID!
  user: deprecated_User!
  pair: deprecated_Pair!
  liquidityTokenBalance: deprecated_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: deprecated_LiquidityPositionSnapshot_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_LiquidityPositionSnapshot_filter): [deprecated_LiquidityPositionSnapshot!]!
  block: Int!
  timestamp: Int!
  chainId: BigInt!
  sourceName: String
}

type deprecated_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: deprecated_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: deprecated_User!
  pair: deprecated_Pair!
  token0PriceUSD: deprecated_BigDecimal!
  token1PriceUSD: deprecated_BigDecimal!
  reserve0: deprecated_BigDecimal!
  reserve1: deprecated_BigDecimal!
  reserveUSD: deprecated_BigDecimal!
  liquidityTokenTotalSupply: deprecated_BigDecimal!
  liquidityTokenBalance: deprecated_BigDecimal!
  sourceName: String
}

input deprecated_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  liquidityPosition_: deprecated_LiquidityPosition_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: deprecated_User_filter
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: deprecated_Pair_filter
  token0PriceUSD: deprecated_BigDecimal
  token0PriceUSD_not: deprecated_BigDecimal
  token0PriceUSD_gt: deprecated_BigDecimal
  token0PriceUSD_lt: deprecated_BigDecimal
  token0PriceUSD_gte: deprecated_BigDecimal
  token0PriceUSD_lte: deprecated_BigDecimal
  token0PriceUSD_in: [deprecated_BigDecimal!]
  token0PriceUSD_not_in: [deprecated_BigDecimal!]
  token1PriceUSD: deprecated_BigDecimal
  token1PriceUSD_not: deprecated_BigDecimal
  token1PriceUSD_gt: deprecated_BigDecimal
  token1PriceUSD_lt: deprecated_BigDecimal
  token1PriceUSD_gte: deprecated_BigDecimal
  token1PriceUSD_lte: deprecated_BigDecimal
  token1PriceUSD_in: [deprecated_BigDecimal!]
  token1PriceUSD_not_in: [deprecated_BigDecimal!]
  reserve0: deprecated_BigDecimal
  reserve0_not: deprecated_BigDecimal
  reserve0_gt: deprecated_BigDecimal
  reserve0_lt: deprecated_BigDecimal
  reserve0_gte: deprecated_BigDecimal
  reserve0_lte: deprecated_BigDecimal
  reserve0_in: [deprecated_BigDecimal!]
  reserve0_not_in: [deprecated_BigDecimal!]
  reserve1: deprecated_BigDecimal
  reserve1_not: deprecated_BigDecimal
  reserve1_gt: deprecated_BigDecimal
  reserve1_lt: deprecated_BigDecimal
  reserve1_gte: deprecated_BigDecimal
  reserve1_lte: deprecated_BigDecimal
  reserve1_in: [deprecated_BigDecimal!]
  reserve1_not_in: [deprecated_BigDecimal!]
  reserveUSD: deprecated_BigDecimal
  reserveUSD_not: deprecated_BigDecimal
  reserveUSD_gt: deprecated_BigDecimal
  reserveUSD_lt: deprecated_BigDecimal
  reserveUSD_gte: deprecated_BigDecimal
  reserveUSD_lte: deprecated_BigDecimal
  reserveUSD_in: [deprecated_BigDecimal!]
  reserveUSD_not_in: [deprecated_BigDecimal!]
  liquidityTokenTotalSupply: deprecated_BigDecimal
  liquidityTokenTotalSupply_not: deprecated_BigDecimal
  liquidityTokenTotalSupply_gt: deprecated_BigDecimal
  liquidityTokenTotalSupply_lt: deprecated_BigDecimal
  liquidityTokenTotalSupply_gte: deprecated_BigDecimal
  liquidityTokenTotalSupply_lte: deprecated_BigDecimal
  liquidityTokenTotalSupply_in: [deprecated_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [deprecated_BigDecimal!]
  liquidityTokenBalance: deprecated_BigDecimal
  liquidityTokenBalance_not: deprecated_BigDecimal
  liquidityTokenBalance_gt: deprecated_BigDecimal
  liquidityTokenBalance_lt: deprecated_BigDecimal
  liquidityTokenBalance_gte: deprecated_BigDecimal
  liquidityTokenBalance_lte: deprecated_BigDecimal
  liquidityTokenBalance_in: [deprecated_BigDecimal!]
  liquidityTokenBalance_not_in: [deprecated_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_LiquidityPositionSnapshot_filter]
  or: [deprecated_LiquidityPositionSnapshot_filter]
}

enum deprecated_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  liquidityPosition__id
  liquidityPosition__liquidityTokenBalance
  liquidityPosition__block
  liquidityPosition__timestamp
  timestamp
  block
  user
  user__id
  pair
  pair__id
  pair__name
  pair__reserve0
  pair__reserve1
  pair__totalSupply
  pair__reserveETH
  pair__reserveUSD
  pair__trackedReserveETH
  pair__token0Price
  pair__token1Price
  pair__volumeToken0
  pair__volumeToken1
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__txCount
  pair__liquidityProviderCount
  pair__timestamp
  pair__block
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input deprecated_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: deprecated_User_filter
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: deprecated_Pair_filter
  liquidityTokenBalance: deprecated_BigDecimal
  liquidityTokenBalance_not: deprecated_BigDecimal
  liquidityTokenBalance_gt: deprecated_BigDecimal
  liquidityTokenBalance_lt: deprecated_BigDecimal
  liquidityTokenBalance_gte: deprecated_BigDecimal
  liquidityTokenBalance_lte: deprecated_BigDecimal
  liquidityTokenBalance_in: [deprecated_BigDecimal!]
  liquidityTokenBalance_not_in: [deprecated_BigDecimal!]
  snapshots_: deprecated_LiquidityPositionSnapshot_filter
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_LiquidityPosition_filter]
  or: [deprecated_LiquidityPosition_filter]
}

enum deprecated_LiquidityPosition_orderBy {
  id
  user
  user__id
  pair
  pair__id
  pair__name
  pair__reserve0
  pair__reserve1
  pair__totalSupply
  pair__reserveETH
  pair__reserveUSD
  pair__trackedReserveETH
  pair__token0Price
  pair__token1Price
  pair__volumeToken0
  pair__volumeToken1
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__txCount
  pair__liquidityProviderCount
  pair__timestamp
  pair__block
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type deprecated_Mint {
  id: ID!
  transaction: deprecated_Transaction!
  timestamp: BigInt!
  pair: deprecated_Pair!
  to: String!
  liquidity: deprecated_BigDecimal!
  sender: deprecated_Bytes
  amount0: deprecated_BigDecimal
  amount1: deprecated_BigDecimal
  logIndex: BigInt
  amountUSD: deprecated_BigDecimal
  feeTo: deprecated_Bytes
  feeLiquidity: deprecated_BigDecimal
  sourceName: String
}

input deprecated_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: deprecated_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: deprecated_Pair_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  liquidity: deprecated_BigDecimal
  liquidity_not: deprecated_BigDecimal
  liquidity_gt: deprecated_BigDecimal
  liquidity_lt: deprecated_BigDecimal
  liquidity_gte: deprecated_BigDecimal
  liquidity_lte: deprecated_BigDecimal
  liquidity_in: [deprecated_BigDecimal!]
  liquidity_not_in: [deprecated_BigDecimal!]
  sender: deprecated_Bytes
  sender_not: deprecated_Bytes
  sender_gt: deprecated_Bytes
  sender_lt: deprecated_Bytes
  sender_gte: deprecated_Bytes
  sender_lte: deprecated_Bytes
  sender_in: [deprecated_Bytes!]
  sender_not_in: [deprecated_Bytes!]
  sender_contains: deprecated_Bytes
  sender_not_contains: deprecated_Bytes
  amount0: deprecated_BigDecimal
  amount0_not: deprecated_BigDecimal
  amount0_gt: deprecated_BigDecimal
  amount0_lt: deprecated_BigDecimal
  amount0_gte: deprecated_BigDecimal
  amount0_lte: deprecated_BigDecimal
  amount0_in: [deprecated_BigDecimal!]
  amount0_not_in: [deprecated_BigDecimal!]
  amount1: deprecated_BigDecimal
  amount1_not: deprecated_BigDecimal
  amount1_gt: deprecated_BigDecimal
  amount1_lt: deprecated_BigDecimal
  amount1_gte: deprecated_BigDecimal
  amount1_lte: deprecated_BigDecimal
  amount1_in: [deprecated_BigDecimal!]
  amount1_not_in: [deprecated_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: deprecated_BigDecimal
  amountUSD_not: deprecated_BigDecimal
  amountUSD_gt: deprecated_BigDecimal
  amountUSD_lt: deprecated_BigDecimal
  amountUSD_gte: deprecated_BigDecimal
  amountUSD_lte: deprecated_BigDecimal
  amountUSD_in: [deprecated_BigDecimal!]
  amountUSD_not_in: [deprecated_BigDecimal!]
  feeTo: deprecated_Bytes
  feeTo_not: deprecated_Bytes
  feeTo_gt: deprecated_Bytes
  feeTo_lt: deprecated_Bytes
  feeTo_gte: deprecated_Bytes
  feeTo_lte: deprecated_Bytes
  feeTo_in: [deprecated_Bytes!]
  feeTo_not_in: [deprecated_Bytes!]
  feeTo_contains: deprecated_Bytes
  feeTo_not_contains: deprecated_Bytes
  feeLiquidity: deprecated_BigDecimal
  feeLiquidity_not: deprecated_BigDecimal
  feeLiquidity_gt: deprecated_BigDecimal
  feeLiquidity_lt: deprecated_BigDecimal
  feeLiquidity_gte: deprecated_BigDecimal
  feeLiquidity_lte: deprecated_BigDecimal
  feeLiquidity_in: [deprecated_BigDecimal!]
  feeLiquidity_not_in: [deprecated_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_Mint_filter]
  or: [deprecated_Mint_filter]
}

enum deprecated_Mint_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  timestamp
  pair
  pair__id
  pair__name
  pair__reserve0
  pair__reserve1
  pair__totalSupply
  pair__reserveETH
  pair__reserveUSD
  pair__trackedReserveETH
  pair__token0Price
  pair__token1Price
  pair__volumeToken0
  pair__volumeToken1
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__txCount
  pair__liquidityProviderCount
  pair__timestamp
  pair__block
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum deprecated_OrderDirection {
  asc
  desc
}

type deprecated_Pair {
  id: ID!
  factory: deprecated_Factory!
  name: String!
  token0: deprecated_Token!
  token1: deprecated_Token!
  reserve0: deprecated_BigDecimal!
  reserve1: deprecated_BigDecimal!
  totalSupply: deprecated_BigDecimal!
  reserveETH: deprecated_BigDecimal!
  reserveUSD: deprecated_BigDecimal!
  trackedReserveETH: deprecated_BigDecimal!
  token0Price: deprecated_BigDecimal!
  token1Price: deprecated_BigDecimal!
  volumeToken0: deprecated_BigDecimal!
  volumeToken1: deprecated_BigDecimal!
  volumeUSD: deprecated_BigDecimal!
  untrackedVolumeUSD: deprecated_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: deprecated_LiquidityPosition_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_LiquidityPosition_filter): [deprecated_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: deprecated_LiquidityPositionSnapshot_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_LiquidityPositionSnapshot_filter): [deprecated_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: deprecated_PairDayData_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_PairDayData_filter): [deprecated_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: deprecated_PairHourData_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_PairHourData_filter): [deprecated_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: deprecated_Mint_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_Mint_filter): [deprecated_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: deprecated_Burn_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_Burn_filter): [deprecated_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: deprecated_Swap_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_Swap_filter): [deprecated_Swap!]!
  timestamp: BigInt!
  block: BigInt!
  chainId: BigInt!
  sourceName: String
}

type deprecated_PairDayData {
  id: ID!
  date: Int!
  pair: deprecated_Pair!
  token0: deprecated_Token!
  token1: deprecated_Token!
  reserve0: deprecated_BigDecimal!
  reserve1: deprecated_BigDecimal!
  totalSupply: deprecated_BigDecimal!
  reserveUSD: deprecated_BigDecimal!
  volumeToken0: deprecated_BigDecimal!
  volumeToken1: deprecated_BigDecimal!
  volumeUSD: deprecated_BigDecimal!
  txCount: BigInt!
  sourceName: String
}

input deprecated_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: deprecated_Pair_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: deprecated_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: deprecated_Token_filter
  reserve0: deprecated_BigDecimal
  reserve0_not: deprecated_BigDecimal
  reserve0_gt: deprecated_BigDecimal
  reserve0_lt: deprecated_BigDecimal
  reserve0_gte: deprecated_BigDecimal
  reserve0_lte: deprecated_BigDecimal
  reserve0_in: [deprecated_BigDecimal!]
  reserve0_not_in: [deprecated_BigDecimal!]
  reserve1: deprecated_BigDecimal
  reserve1_not: deprecated_BigDecimal
  reserve1_gt: deprecated_BigDecimal
  reserve1_lt: deprecated_BigDecimal
  reserve1_gte: deprecated_BigDecimal
  reserve1_lte: deprecated_BigDecimal
  reserve1_in: [deprecated_BigDecimal!]
  reserve1_not_in: [deprecated_BigDecimal!]
  totalSupply: deprecated_BigDecimal
  totalSupply_not: deprecated_BigDecimal
  totalSupply_gt: deprecated_BigDecimal
  totalSupply_lt: deprecated_BigDecimal
  totalSupply_gte: deprecated_BigDecimal
  totalSupply_lte: deprecated_BigDecimal
  totalSupply_in: [deprecated_BigDecimal!]
  totalSupply_not_in: [deprecated_BigDecimal!]
  reserveUSD: deprecated_BigDecimal
  reserveUSD_not: deprecated_BigDecimal
  reserveUSD_gt: deprecated_BigDecimal
  reserveUSD_lt: deprecated_BigDecimal
  reserveUSD_gte: deprecated_BigDecimal
  reserveUSD_lte: deprecated_BigDecimal
  reserveUSD_in: [deprecated_BigDecimal!]
  reserveUSD_not_in: [deprecated_BigDecimal!]
  volumeToken0: deprecated_BigDecimal
  volumeToken0_not: deprecated_BigDecimal
  volumeToken0_gt: deprecated_BigDecimal
  volumeToken0_lt: deprecated_BigDecimal
  volumeToken0_gte: deprecated_BigDecimal
  volumeToken0_lte: deprecated_BigDecimal
  volumeToken0_in: [deprecated_BigDecimal!]
  volumeToken0_not_in: [deprecated_BigDecimal!]
  volumeToken1: deprecated_BigDecimal
  volumeToken1_not: deprecated_BigDecimal
  volumeToken1_gt: deprecated_BigDecimal
  volumeToken1_lt: deprecated_BigDecimal
  volumeToken1_gte: deprecated_BigDecimal
  volumeToken1_lte: deprecated_BigDecimal
  volumeToken1_in: [deprecated_BigDecimal!]
  volumeToken1_not_in: [deprecated_BigDecimal!]
  volumeUSD: deprecated_BigDecimal
  volumeUSD_not: deprecated_BigDecimal
  volumeUSD_gt: deprecated_BigDecimal
  volumeUSD_lt: deprecated_BigDecimal
  volumeUSD_gte: deprecated_BigDecimal
  volumeUSD_lte: deprecated_BigDecimal
  volumeUSD_in: [deprecated_BigDecimal!]
  volumeUSD_not_in: [deprecated_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_PairDayData_filter]
  or: [deprecated_PairDayData_filter]
}

enum deprecated_PairDayData_orderBy {
  id
  date
  pair
  pair__id
  pair__name
  pair__reserve0
  pair__reserve1
  pair__totalSupply
  pair__reserveETH
  pair__reserveUSD
  pair__trackedReserveETH
  pair__token0Price
  pair__token1Price
  pair__volumeToken0
  pair__volumeToken1
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__txCount
  pair__liquidityProviderCount
  pair__timestamp
  pair__block
  token0
  token0__id
  token0__symbol
  token0__symbolSuccess
  token0__name
  token0__nameSuccess
  token0__decimals
  token0__decimalsSuccess
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__txCount
  token0__liquidity
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__symbolSuccess
  token1__name
  token1__nameSuccess
  token1__decimals
  token1__decimalsSuccess
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__txCount
  token1__liquidity
  token1__derivedETH
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type deprecated_PairHourData {
  id: ID!
  date: Int!
  pair: deprecated_Pair!
  reserve0: deprecated_BigDecimal!
  reserve1: deprecated_BigDecimal!
  reserveUSD: deprecated_BigDecimal!
  volumeToken0: deprecated_BigDecimal!
  volumeToken1: deprecated_BigDecimal!
  volumeUSD: deprecated_BigDecimal!
  txCount: BigInt!
  sourceName: String
}

input deprecated_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: deprecated_Pair_filter
  reserve0: deprecated_BigDecimal
  reserve0_not: deprecated_BigDecimal
  reserve0_gt: deprecated_BigDecimal
  reserve0_lt: deprecated_BigDecimal
  reserve0_gte: deprecated_BigDecimal
  reserve0_lte: deprecated_BigDecimal
  reserve0_in: [deprecated_BigDecimal!]
  reserve0_not_in: [deprecated_BigDecimal!]
  reserve1: deprecated_BigDecimal
  reserve1_not: deprecated_BigDecimal
  reserve1_gt: deprecated_BigDecimal
  reserve1_lt: deprecated_BigDecimal
  reserve1_gte: deprecated_BigDecimal
  reserve1_lte: deprecated_BigDecimal
  reserve1_in: [deprecated_BigDecimal!]
  reserve1_not_in: [deprecated_BigDecimal!]
  reserveUSD: deprecated_BigDecimal
  reserveUSD_not: deprecated_BigDecimal
  reserveUSD_gt: deprecated_BigDecimal
  reserveUSD_lt: deprecated_BigDecimal
  reserveUSD_gte: deprecated_BigDecimal
  reserveUSD_lte: deprecated_BigDecimal
  reserveUSD_in: [deprecated_BigDecimal!]
  reserveUSD_not_in: [deprecated_BigDecimal!]
  volumeToken0: deprecated_BigDecimal
  volumeToken0_not: deprecated_BigDecimal
  volumeToken0_gt: deprecated_BigDecimal
  volumeToken0_lt: deprecated_BigDecimal
  volumeToken0_gte: deprecated_BigDecimal
  volumeToken0_lte: deprecated_BigDecimal
  volumeToken0_in: [deprecated_BigDecimal!]
  volumeToken0_not_in: [deprecated_BigDecimal!]
  volumeToken1: deprecated_BigDecimal
  volumeToken1_not: deprecated_BigDecimal
  volumeToken1_gt: deprecated_BigDecimal
  volumeToken1_lt: deprecated_BigDecimal
  volumeToken1_gte: deprecated_BigDecimal
  volumeToken1_lte: deprecated_BigDecimal
  volumeToken1_in: [deprecated_BigDecimal!]
  volumeToken1_not_in: [deprecated_BigDecimal!]
  volumeUSD: deprecated_BigDecimal
  volumeUSD_not: deprecated_BigDecimal
  volumeUSD_gt: deprecated_BigDecimal
  volumeUSD_lt: deprecated_BigDecimal
  volumeUSD_gte: deprecated_BigDecimal
  volumeUSD_lte: deprecated_BigDecimal
  volumeUSD_in: [deprecated_BigDecimal!]
  volumeUSD_not_in: [deprecated_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_PairHourData_filter]
  or: [deprecated_PairHourData_filter]
}

enum deprecated_PairHourData_orderBy {
  id
  date
  pair
  pair__id
  pair__name
  pair__reserve0
  pair__reserve1
  pair__totalSupply
  pair__reserveETH
  pair__reserveUSD
  pair__trackedReserveETH
  pair__token0Price
  pair__token1Price
  pair__volumeToken0
  pair__volumeToken1
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__txCount
  pair__liquidityProviderCount
  pair__timestamp
  pair__block
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input deprecated_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  factory_: deprecated_Factory_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: deprecated_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: deprecated_Token_filter
  reserve0: deprecated_BigDecimal
  reserve0_not: deprecated_BigDecimal
  reserve0_gt: deprecated_BigDecimal
  reserve0_lt: deprecated_BigDecimal
  reserve0_gte: deprecated_BigDecimal
  reserve0_lte: deprecated_BigDecimal
  reserve0_in: [deprecated_BigDecimal!]
  reserve0_not_in: [deprecated_BigDecimal!]
  reserve1: deprecated_BigDecimal
  reserve1_not: deprecated_BigDecimal
  reserve1_gt: deprecated_BigDecimal
  reserve1_lt: deprecated_BigDecimal
  reserve1_gte: deprecated_BigDecimal
  reserve1_lte: deprecated_BigDecimal
  reserve1_in: [deprecated_BigDecimal!]
  reserve1_not_in: [deprecated_BigDecimal!]
  totalSupply: deprecated_BigDecimal
  totalSupply_not: deprecated_BigDecimal
  totalSupply_gt: deprecated_BigDecimal
  totalSupply_lt: deprecated_BigDecimal
  totalSupply_gte: deprecated_BigDecimal
  totalSupply_lte: deprecated_BigDecimal
  totalSupply_in: [deprecated_BigDecimal!]
  totalSupply_not_in: [deprecated_BigDecimal!]
  reserveETH: deprecated_BigDecimal
  reserveETH_not: deprecated_BigDecimal
  reserveETH_gt: deprecated_BigDecimal
  reserveETH_lt: deprecated_BigDecimal
  reserveETH_gte: deprecated_BigDecimal
  reserveETH_lte: deprecated_BigDecimal
  reserveETH_in: [deprecated_BigDecimal!]
  reserveETH_not_in: [deprecated_BigDecimal!]
  reserveUSD: deprecated_BigDecimal
  reserveUSD_not: deprecated_BigDecimal
  reserveUSD_gt: deprecated_BigDecimal
  reserveUSD_lt: deprecated_BigDecimal
  reserveUSD_gte: deprecated_BigDecimal
  reserveUSD_lte: deprecated_BigDecimal
  reserveUSD_in: [deprecated_BigDecimal!]
  reserveUSD_not_in: [deprecated_BigDecimal!]
  trackedReserveETH: deprecated_BigDecimal
  trackedReserveETH_not: deprecated_BigDecimal
  trackedReserveETH_gt: deprecated_BigDecimal
  trackedReserveETH_lt: deprecated_BigDecimal
  trackedReserveETH_gte: deprecated_BigDecimal
  trackedReserveETH_lte: deprecated_BigDecimal
  trackedReserveETH_in: [deprecated_BigDecimal!]
  trackedReserveETH_not_in: [deprecated_BigDecimal!]
  token0Price: deprecated_BigDecimal
  token0Price_not: deprecated_BigDecimal
  token0Price_gt: deprecated_BigDecimal
  token0Price_lt: deprecated_BigDecimal
  token0Price_gte: deprecated_BigDecimal
  token0Price_lte: deprecated_BigDecimal
  token0Price_in: [deprecated_BigDecimal!]
  token0Price_not_in: [deprecated_BigDecimal!]
  token1Price: deprecated_BigDecimal
  token1Price_not: deprecated_BigDecimal
  token1Price_gt: deprecated_BigDecimal
  token1Price_lt: deprecated_BigDecimal
  token1Price_gte: deprecated_BigDecimal
  token1Price_lte: deprecated_BigDecimal
  token1Price_in: [deprecated_BigDecimal!]
  token1Price_not_in: [deprecated_BigDecimal!]
  volumeToken0: deprecated_BigDecimal
  volumeToken0_not: deprecated_BigDecimal
  volumeToken0_gt: deprecated_BigDecimal
  volumeToken0_lt: deprecated_BigDecimal
  volumeToken0_gte: deprecated_BigDecimal
  volumeToken0_lte: deprecated_BigDecimal
  volumeToken0_in: [deprecated_BigDecimal!]
  volumeToken0_not_in: [deprecated_BigDecimal!]
  volumeToken1: deprecated_BigDecimal
  volumeToken1_not: deprecated_BigDecimal
  volumeToken1_gt: deprecated_BigDecimal
  volumeToken1_lt: deprecated_BigDecimal
  volumeToken1_gte: deprecated_BigDecimal
  volumeToken1_lte: deprecated_BigDecimal
  volumeToken1_in: [deprecated_BigDecimal!]
  volumeToken1_not_in: [deprecated_BigDecimal!]
  volumeUSD: deprecated_BigDecimal
  volumeUSD_not: deprecated_BigDecimal
  volumeUSD_gt: deprecated_BigDecimal
  volumeUSD_lt: deprecated_BigDecimal
  volumeUSD_gte: deprecated_BigDecimal
  volumeUSD_lte: deprecated_BigDecimal
  volumeUSD_in: [deprecated_BigDecimal!]
  volumeUSD_not_in: [deprecated_BigDecimal!]
  untrackedVolumeUSD: deprecated_BigDecimal
  untrackedVolumeUSD_not: deprecated_BigDecimal
  untrackedVolumeUSD_gt: deprecated_BigDecimal
  untrackedVolumeUSD_lt: deprecated_BigDecimal
  untrackedVolumeUSD_gte: deprecated_BigDecimal
  untrackedVolumeUSD_lte: deprecated_BigDecimal
  untrackedVolumeUSD_in: [deprecated_BigDecimal!]
  untrackedVolumeUSD_not_in: [deprecated_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  liquidityPositions_: deprecated_LiquidityPosition_filter
  liquidityPositionSnapshots_: deprecated_LiquidityPositionSnapshot_filter
  dayData_: deprecated_PairDayData_filter
  hourData_: deprecated_PairHourData_filter
  mints_: deprecated_Mint_filter
  burns_: deprecated_Burn_filter
  swaps_: deprecated_Swap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_Pair_filter]
  or: [deprecated_Pair_filter]
}

enum deprecated_Pair_orderBy {
  id
  factory
  factory__id
  factory__pairCount
  factory__volumeUSD
  factory__volumeETH
  factory__untrackedVolumeUSD
  factory__liquidityUSD
  factory__liquidityETH
  factory__txCount
  factory__tokenCount
  factory__userCount
  name
  token0
  token0__id
  token0__symbol
  token0__symbolSuccess
  token0__name
  token0__nameSuccess
  token0__decimals
  token0__decimalsSuccess
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__txCount
  token0__liquidity
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__symbolSuccess
  token1__name
  token1__nameSuccess
  token1__decimals
  token1__decimalsSuccess
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__txCount
  token1__liquidity
  token1__derivedETH
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type deprecated_Swap {
  id: ID!
  transaction: deprecated_Transaction!
  timestamp: BigInt!
  pair: deprecated_Pair!
  sender: String!
  amount0In: deprecated_BigDecimal!
  amount1In: deprecated_BigDecimal!
  amount0Out: deprecated_BigDecimal!
  amount1Out: deprecated_BigDecimal!
  to: String!
  logIndex: BigInt
  amountUSD: deprecated_BigDecimal!
  sourceName: String
}

input deprecated_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: deprecated_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: deprecated_Pair_filter
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  amount0In: deprecated_BigDecimal
  amount0In_not: deprecated_BigDecimal
  amount0In_gt: deprecated_BigDecimal
  amount0In_lt: deprecated_BigDecimal
  amount0In_gte: deprecated_BigDecimal
  amount0In_lte: deprecated_BigDecimal
  amount0In_in: [deprecated_BigDecimal!]
  amount0In_not_in: [deprecated_BigDecimal!]
  amount1In: deprecated_BigDecimal
  amount1In_not: deprecated_BigDecimal
  amount1In_gt: deprecated_BigDecimal
  amount1In_lt: deprecated_BigDecimal
  amount1In_gte: deprecated_BigDecimal
  amount1In_lte: deprecated_BigDecimal
  amount1In_in: [deprecated_BigDecimal!]
  amount1In_not_in: [deprecated_BigDecimal!]
  amount0Out: deprecated_BigDecimal
  amount0Out_not: deprecated_BigDecimal
  amount0Out_gt: deprecated_BigDecimal
  amount0Out_lt: deprecated_BigDecimal
  amount0Out_gte: deprecated_BigDecimal
  amount0Out_lte: deprecated_BigDecimal
  amount0Out_in: [deprecated_BigDecimal!]
  amount0Out_not_in: [deprecated_BigDecimal!]
  amount1Out: deprecated_BigDecimal
  amount1Out_not: deprecated_BigDecimal
  amount1Out_gt: deprecated_BigDecimal
  amount1Out_lt: deprecated_BigDecimal
  amount1Out_gte: deprecated_BigDecimal
  amount1Out_lte: deprecated_BigDecimal
  amount1Out_in: [deprecated_BigDecimal!]
  amount1Out_not_in: [deprecated_BigDecimal!]
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: deprecated_BigDecimal
  amountUSD_not: deprecated_BigDecimal
  amountUSD_gt: deprecated_BigDecimal
  amountUSD_lt: deprecated_BigDecimal
  amountUSD_gte: deprecated_BigDecimal
  amountUSD_lte: deprecated_BigDecimal
  amountUSD_in: [deprecated_BigDecimal!]
  amountUSD_not_in: [deprecated_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_Swap_filter]
  or: [deprecated_Swap_filter]
}

enum deprecated_Swap_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  timestamp
  pair
  pair__id
  pair__name
  pair__reserve0
  pair__reserve1
  pair__totalSupply
  pair__reserveETH
  pair__reserveUSD
  pair__trackedReserveETH
  pair__token0Price
  pair__token1Price
  pair__volumeToken0
  pair__volumeToken1
  pair__volumeUSD
  pair__untrackedVolumeUSD
  pair__txCount
  pair__liquidityProviderCount
  pair__timestamp
  pair__block
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type deprecated_Token {
  id: ID!
  factory: deprecated_Factory!
  symbol: String!
  symbolSuccess: Boolean!
  name: String!
  nameSuccess: Boolean!
  decimals: BigInt!
  decimalsSuccess: Boolean!
  totalSupply: BigInt!
  volume: deprecated_BigDecimal!
  volumeUSD: deprecated_BigDecimal!
  untrackedVolumeUSD: deprecated_BigDecimal!
  txCount: BigInt!
  liquidity: deprecated_BigDecimal!
  derivedETH: deprecated_BigDecimal!
  whitelistPairs(skip: Int = 0, first: Int = 100, orderBy: deprecated_Pair_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_Pair_filter): [deprecated_Pair!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: deprecated_TokenHourData_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_TokenHourData_filter): [deprecated_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: deprecated_TokenDayData_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_TokenDayData_filter): [deprecated_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: deprecated_Pair_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_Pair_filter): [deprecated_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: deprecated_Pair_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_Pair_filter): [deprecated_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: deprecated_PairDayData_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_PairDayData_filter): [deprecated_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: deprecated_PairDayData_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_PairDayData_filter): [deprecated_PairDayData!]!
  chainId: BigInt!
  sourceName: String
}

type deprecated_TokenDayData {
  id: ID!
  date: Int!
  token: deprecated_Token!
  volume: deprecated_BigDecimal!
  volumeETH: deprecated_BigDecimal!
  volumeUSD: deprecated_BigDecimal!
  txCount: BigInt!
  liquidity: deprecated_BigDecimal!
  liquidityETH: deprecated_BigDecimal!
  liquidityUSD: deprecated_BigDecimal!
  priceUSD: deprecated_BigDecimal!
  sourceName: String
}

input deprecated_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: deprecated_Token_filter
  volume: deprecated_BigDecimal
  volume_not: deprecated_BigDecimal
  volume_gt: deprecated_BigDecimal
  volume_lt: deprecated_BigDecimal
  volume_gte: deprecated_BigDecimal
  volume_lte: deprecated_BigDecimal
  volume_in: [deprecated_BigDecimal!]
  volume_not_in: [deprecated_BigDecimal!]
  volumeETH: deprecated_BigDecimal
  volumeETH_not: deprecated_BigDecimal
  volumeETH_gt: deprecated_BigDecimal
  volumeETH_lt: deprecated_BigDecimal
  volumeETH_gte: deprecated_BigDecimal
  volumeETH_lte: deprecated_BigDecimal
  volumeETH_in: [deprecated_BigDecimal!]
  volumeETH_not_in: [deprecated_BigDecimal!]
  volumeUSD: deprecated_BigDecimal
  volumeUSD_not: deprecated_BigDecimal
  volumeUSD_gt: deprecated_BigDecimal
  volumeUSD_lt: deprecated_BigDecimal
  volumeUSD_gte: deprecated_BigDecimal
  volumeUSD_lte: deprecated_BigDecimal
  volumeUSD_in: [deprecated_BigDecimal!]
  volumeUSD_not_in: [deprecated_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: deprecated_BigDecimal
  liquidity_not: deprecated_BigDecimal
  liquidity_gt: deprecated_BigDecimal
  liquidity_lt: deprecated_BigDecimal
  liquidity_gte: deprecated_BigDecimal
  liquidity_lte: deprecated_BigDecimal
  liquidity_in: [deprecated_BigDecimal!]
  liquidity_not_in: [deprecated_BigDecimal!]
  liquidityETH: deprecated_BigDecimal
  liquidityETH_not: deprecated_BigDecimal
  liquidityETH_gt: deprecated_BigDecimal
  liquidityETH_lt: deprecated_BigDecimal
  liquidityETH_gte: deprecated_BigDecimal
  liquidityETH_lte: deprecated_BigDecimal
  liquidityETH_in: [deprecated_BigDecimal!]
  liquidityETH_not_in: [deprecated_BigDecimal!]
  liquidityUSD: deprecated_BigDecimal
  liquidityUSD_not: deprecated_BigDecimal
  liquidityUSD_gt: deprecated_BigDecimal
  liquidityUSD_lt: deprecated_BigDecimal
  liquidityUSD_gte: deprecated_BigDecimal
  liquidityUSD_lte: deprecated_BigDecimal
  liquidityUSD_in: [deprecated_BigDecimal!]
  liquidityUSD_not_in: [deprecated_BigDecimal!]
  priceUSD: deprecated_BigDecimal
  priceUSD_not: deprecated_BigDecimal
  priceUSD_gt: deprecated_BigDecimal
  priceUSD_lt: deprecated_BigDecimal
  priceUSD_gte: deprecated_BigDecimal
  priceUSD_lte: deprecated_BigDecimal
  priceUSD_in: [deprecated_BigDecimal!]
  priceUSD_not_in: [deprecated_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_TokenDayData_filter]
  or: [deprecated_TokenDayData_filter]
}

enum deprecated_TokenDayData_orderBy {
  id
  date
  token
  token__id
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  token__totalSupply
  token__volume
  token__volumeUSD
  token__untrackedVolumeUSD
  token__txCount
  token__liquidity
  token__derivedETH
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type deprecated_TokenHourData {
  id: ID!
  date: Int!
  token: deprecated_Token!
  volume: deprecated_BigDecimal!
  volumeETH: deprecated_BigDecimal!
  volumeUSD: deprecated_BigDecimal!
  txCount: BigInt!
  liquidity: deprecated_BigDecimal!
  liquidityETH: deprecated_BigDecimal!
  liquidityUSD: deprecated_BigDecimal!
  priceUSD: deprecated_BigDecimal!
  sourceName: String
}

input deprecated_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: deprecated_Token_filter
  volume: deprecated_BigDecimal
  volume_not: deprecated_BigDecimal
  volume_gt: deprecated_BigDecimal
  volume_lt: deprecated_BigDecimal
  volume_gte: deprecated_BigDecimal
  volume_lte: deprecated_BigDecimal
  volume_in: [deprecated_BigDecimal!]
  volume_not_in: [deprecated_BigDecimal!]
  volumeETH: deprecated_BigDecimal
  volumeETH_not: deprecated_BigDecimal
  volumeETH_gt: deprecated_BigDecimal
  volumeETH_lt: deprecated_BigDecimal
  volumeETH_gte: deprecated_BigDecimal
  volumeETH_lte: deprecated_BigDecimal
  volumeETH_in: [deprecated_BigDecimal!]
  volumeETH_not_in: [deprecated_BigDecimal!]
  volumeUSD: deprecated_BigDecimal
  volumeUSD_not: deprecated_BigDecimal
  volumeUSD_gt: deprecated_BigDecimal
  volumeUSD_lt: deprecated_BigDecimal
  volumeUSD_gte: deprecated_BigDecimal
  volumeUSD_lte: deprecated_BigDecimal
  volumeUSD_in: [deprecated_BigDecimal!]
  volumeUSD_not_in: [deprecated_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: deprecated_BigDecimal
  liquidity_not: deprecated_BigDecimal
  liquidity_gt: deprecated_BigDecimal
  liquidity_lt: deprecated_BigDecimal
  liquidity_gte: deprecated_BigDecimal
  liquidity_lte: deprecated_BigDecimal
  liquidity_in: [deprecated_BigDecimal!]
  liquidity_not_in: [deprecated_BigDecimal!]
  liquidityETH: deprecated_BigDecimal
  liquidityETH_not: deprecated_BigDecimal
  liquidityETH_gt: deprecated_BigDecimal
  liquidityETH_lt: deprecated_BigDecimal
  liquidityETH_gte: deprecated_BigDecimal
  liquidityETH_lte: deprecated_BigDecimal
  liquidityETH_in: [deprecated_BigDecimal!]
  liquidityETH_not_in: [deprecated_BigDecimal!]
  liquidityUSD: deprecated_BigDecimal
  liquidityUSD_not: deprecated_BigDecimal
  liquidityUSD_gt: deprecated_BigDecimal
  liquidityUSD_lt: deprecated_BigDecimal
  liquidityUSD_gte: deprecated_BigDecimal
  liquidityUSD_lte: deprecated_BigDecimal
  liquidityUSD_in: [deprecated_BigDecimal!]
  liquidityUSD_not_in: [deprecated_BigDecimal!]
  priceUSD: deprecated_BigDecimal
  priceUSD_not: deprecated_BigDecimal
  priceUSD_gt: deprecated_BigDecimal
  priceUSD_lt: deprecated_BigDecimal
  priceUSD_gte: deprecated_BigDecimal
  priceUSD_lte: deprecated_BigDecimal
  priceUSD_in: [deprecated_BigDecimal!]
  priceUSD_not_in: [deprecated_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_TokenHourData_filter]
  or: [deprecated_TokenHourData_filter]
}

enum deprecated_TokenHourData_orderBy {
  id
  date
  token
  token__id
  token__symbol
  token__symbolSuccess
  token__name
  token__nameSuccess
  token__decimals
  token__decimalsSuccess
  token__totalSupply
  token__volume
  token__volumeUSD
  token__untrackedVolumeUSD
  token__txCount
  token__liquidity
  token__derivedETH
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input deprecated_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  factory_: deprecated_Factory_filter
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  symbolSuccess: Boolean
  symbolSuccess_not: Boolean
  symbolSuccess_in: [Boolean!]
  symbolSuccess_not_in: [Boolean!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  nameSuccess: Boolean
  nameSuccess_not: Boolean
  nameSuccess_in: [Boolean!]
  nameSuccess_not_in: [Boolean!]
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  decimalsSuccess: Boolean
  decimalsSuccess_not: Boolean
  decimalsSuccess_in: [Boolean!]
  decimalsSuccess_not_in: [Boolean!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: deprecated_BigDecimal
  volume_not: deprecated_BigDecimal
  volume_gt: deprecated_BigDecimal
  volume_lt: deprecated_BigDecimal
  volume_gte: deprecated_BigDecimal
  volume_lte: deprecated_BigDecimal
  volume_in: [deprecated_BigDecimal!]
  volume_not_in: [deprecated_BigDecimal!]
  volumeUSD: deprecated_BigDecimal
  volumeUSD_not: deprecated_BigDecimal
  volumeUSD_gt: deprecated_BigDecimal
  volumeUSD_lt: deprecated_BigDecimal
  volumeUSD_gte: deprecated_BigDecimal
  volumeUSD_lte: deprecated_BigDecimal
  volumeUSD_in: [deprecated_BigDecimal!]
  volumeUSD_not_in: [deprecated_BigDecimal!]
  untrackedVolumeUSD: deprecated_BigDecimal
  untrackedVolumeUSD_not: deprecated_BigDecimal
  untrackedVolumeUSD_gt: deprecated_BigDecimal
  untrackedVolumeUSD_lt: deprecated_BigDecimal
  untrackedVolumeUSD_gte: deprecated_BigDecimal
  untrackedVolumeUSD_lte: deprecated_BigDecimal
  untrackedVolumeUSD_in: [deprecated_BigDecimal!]
  untrackedVolumeUSD_not_in: [deprecated_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: deprecated_BigDecimal
  liquidity_not: deprecated_BigDecimal
  liquidity_gt: deprecated_BigDecimal
  liquidity_lt: deprecated_BigDecimal
  liquidity_gte: deprecated_BigDecimal
  liquidity_lte: deprecated_BigDecimal
  liquidity_in: [deprecated_BigDecimal!]
  liquidity_not_in: [deprecated_BigDecimal!]
  derivedETH: deprecated_BigDecimal
  derivedETH_not: deprecated_BigDecimal
  derivedETH_gt: deprecated_BigDecimal
  derivedETH_lt: deprecated_BigDecimal
  derivedETH_gte: deprecated_BigDecimal
  derivedETH_lte: deprecated_BigDecimal
  derivedETH_in: [deprecated_BigDecimal!]
  derivedETH_not_in: [deprecated_BigDecimal!]
  whitelistPairs: [String!]
  whitelistPairs_not: [String!]
  whitelistPairs_contains: [String!]
  whitelistPairs_contains_nocase: [String!]
  whitelistPairs_not_contains: [String!]
  whitelistPairs_not_contains_nocase: [String!]
  whitelistPairs_: deprecated_Pair_filter
  hourData_: deprecated_TokenHourData_filter
  dayData_: deprecated_TokenDayData_filter
  basePairs_: deprecated_Pair_filter
  quotePairs_: deprecated_Pair_filter
  basePairsDayData_: deprecated_PairDayData_filter
  quotePairsDayData_: deprecated_PairDayData_filter
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_Token_filter]
  or: [deprecated_Token_filter]
}

enum deprecated_Token_orderBy {
  id
  factory
  factory__id
  factory__pairCount
  factory__volumeUSD
  factory__volumeETH
  factory__untrackedVolumeUSD
  factory__liquidityUSD
  factory__liquidityETH
  factory__txCount
  factory__tokenCount
  factory__userCount
  symbol
  symbolSuccess
  name
  nameSuccess
  decimals
  decimalsSuccess
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  whitelistPairs
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type deprecated_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: deprecated_Mint_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_Mint_filter): [deprecated_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: deprecated_Burn_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_Burn_filter): [deprecated_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: deprecated_Swap_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_Swap_filter): [deprecated_Swap!]!
  sourceName: String
}

input deprecated_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  mints_: deprecated_Mint_filter
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  burns_: deprecated_Burn_filter
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]
  swaps_: deprecated_Swap_filter
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_Transaction_filter]
  or: [deprecated_Transaction_filter]
}

enum deprecated_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type deprecated_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: deprecated_LiquidityPosition_orderBy, orderDirection: deprecated_OrderDirection, where: deprecated_LiquidityPosition_filter): [deprecated_LiquidityPosition!]!
  sourceName: String
}

input deprecated_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPositions_: deprecated_LiquidityPosition_filter
  """Filter for the block changed event."""
  _change_block: deprecated_BlockChangedFilter
  and: [deprecated_User_filter]
  or: [deprecated_User_filter]
}

enum deprecated_User_orderBy {
  id
  liquidityPositions
}

type deprecated__Block_ {
  """The hash of the block"""
  hash: deprecated_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: deprecated_Bytes
  sourceName: String
}

"""The type for the top-level _meta field"""
type deprecated__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: deprecated__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
  sourceName: String
}

enum deprecated__SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type Burn {
  """ transaction.id:transaction.burns.length """
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pair: Pair!
  liquidity: BigDecimal!
  sender: String
  amount0: BigDecimal
  amount1: BigDecimal
  to: String
  logIndex: BigInt
  amountUSD: BigDecimal
  complete: Boolean!
  feeTo: String
  feeLiquidity: BigDecimal
  sourceName: String
}

type FactoryHourSnapshot {
  """ {factoryId}-hour-{timestamp} """
  id: ID!
  factory: Factory!
  date: Int!
  volumeUSD: BigDecimal!
  volumeNative: BigDecimal!
  liquidityNative: BigDecimal!
  liquidityUSD: BigDecimal!
  feesNative: BigDecimal!
  feesUSD: BigDecimal!
  transactionCount: BigInt!
  sourceName: String
}

input FactoryHourSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  factory_: Factory_filter
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  volumeNative: BigDecimal
  volumeNative_not: BigDecimal
  volumeNative_gt: BigDecimal
  volumeNative_lt: BigDecimal
  volumeNative_gte: BigDecimal
  volumeNative_lte: BigDecimal
  volumeNative_in: [BigDecimal!]
  volumeNative_not_in: [BigDecimal!]
  liquidityNative: BigDecimal
  liquidityNative_not: BigDecimal
  liquidityNative_gt: BigDecimal
  liquidityNative_lt: BigDecimal
  liquidityNative_gte: BigDecimal
  liquidityNative_lte: BigDecimal
  liquidityNative_in: [BigDecimal!]
  liquidityNative_not_in: [BigDecimal!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  feesNative: BigDecimal
  feesNative_not: BigDecimal
  feesNative_gt: BigDecimal
  feesNative_lt: BigDecimal
  feesNative_gte: BigDecimal
  feesNative_lte: BigDecimal
  feesNative_in: [BigDecimal!]
  feesNative_not_in: [BigDecimal!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  transactionCount: BigInt
  transactionCount_not: BigInt
  transactionCount_gt: BigInt
  transactionCount_lt: BigInt
  transactionCount_gte: BigInt
  transactionCount_lte: BigInt
  transactionCount_in: [BigInt!]
  transactionCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FactoryHourSnapshot_filter]
  or: [FactoryHourSnapshot_filter]
}

enum FactoryHourSnapshot_orderBy {
  id
  factory
  factory__id
  factory__type
  factory__volumeUSD
  factory__volumeNative
  factory__liquidityUSD
  factory__liquidityNative
  factory__feesUSD
  factory__feesNative
  factory__pairCount
  factory__transactionCount
  factory__tokenCount
  factory__userCount
  date
  volumeUSD
  volumeNative
  liquidityNative
  liquidityUSD
  feesNative
  feesUSD
  transactionCount
}

type Mint {
  """ transaction.id:transaction.mints.length """
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pair: Pair!
  to: String!
  liquidity: BigDecimal!
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  logIndex: BigInt
  amountUSD: BigDecimal
  feeTo: Bytes
  feeLiquidity: BigDecimal
  sourceName: String
}

type Swap {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pair: Pair!
  sender: String!
  tokenIn: Token!
  tokenOut: Token!
  amountIn: BigDecimal!
  amountOut: BigDecimal!
  to: String!
  logIndex: BigInt
  amountUSD: BigDecimal!
  sourceName: String
}

type _FactoryToken {
  """ id is created by combining factory type and token id, e.g. STABLE_POOL:0x..00 
  """
  id: ID!
  sourceName: String
}

input _FactoryToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [_FactoryToken_filter]
  or: [_FactoryToken_filter]
}

enum _FactoryToken_orderBy {
  id
}

type _FactoryUser {
  """ id is created by combining factory type and user id, e.g. STABLE_POOL:0x..00 
  """
  id: ID!
  sourceName: String
}

input _FactoryUser_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [_FactoryUser_filter]
  or: [_FactoryUser_filter]
}

enum _FactoryUser_orderBy {
  id
}

enum Bonds_Aggregation_interval {
  hour
  day
}

"""
The BalancerWeightedPool entity contains the details of a BalancerWeightedPool Token.

"""
type Bonds_BalancerWeightedPool {
  """
  Unique ID for the BalancerWeightedPool entity, in the format:
  [chain Id]_[pool address]
  
  """
  id: String!
  """
  The pool's vault address.
  
  """
  vaultAddress: String!
  """
  The pool's ID, for use in calls to vault functions.
  
  """
  poolId: String!
  """
  A list of the Tokens which make up the vault.
  
  """
  constituentTokens(skip: Int = 0, first: Int = 100, orderBy: Bonds_Token_orderBy, orderDirection: Bonds_OrderDirection, where: Bonds_Token_filter): [Bonds_Token!]!
  sourceName: String
}

input Bonds_BalancerWeightedPool_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  vaultAddress: String
  vaultAddress_not: String
  vaultAddress_gt: String
  vaultAddress_lt: String
  vaultAddress_gte: String
  vaultAddress_lte: String
  vaultAddress_in: [String!]
  vaultAddress_not_in: [String!]
  vaultAddress_contains: String
  vaultAddress_contains_nocase: String
  vaultAddress_not_contains: String
  vaultAddress_not_contains_nocase: String
  vaultAddress_starts_with: String
  vaultAddress_starts_with_nocase: String
  vaultAddress_not_starts_with: String
  vaultAddress_not_starts_with_nocase: String
  vaultAddress_ends_with: String
  vaultAddress_ends_with_nocase: String
  vaultAddress_not_ends_with: String
  vaultAddress_not_ends_with_nocase: String
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  constituentTokens: [String!]
  constituentTokens_not: [String!]
  constituentTokens_contains: [String!]
  constituentTokens_contains_nocase: [String!]
  constituentTokens_not_contains: [String!]
  constituentTokens_not_contains_nocase: [String!]
  constituentTokens_: Bonds_Token_filter
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_BalancerWeightedPool_filter]
  or: [Bonds_BalancerWeightedPool_filter]
}

enum Bonds_BalancerWeightedPool_orderBy {
  id
  vaultAddress
  poolId
  constituentTokens
}

scalar Bonds_BigDecimal

input Bonds_BlockChangedFilter {
  number_gte: Int!
}

input Bonds_Block_height {
  hash: Bonds_Bytes
  number: Int
  number_gte: Int
}

"""
The BondPurchase entity tracks individual bond purchases.

"""
type Bonds_BondPurchase {
  """
  The transaction hash is used as the BondPurchase ID.
  
  """
  id: String!
  """
  The ID of the Market from which the bond was purchased.
  
  """
  market: Bonds_Market!
  """
  The owner address of the Market from which the bond was purchased.
  
  """
  owner: String!
  """
  The amount of quote tokens paid.
  
  """
  amount: Bonds_BigDecimal!
  """
  The amount of payout tokens purchased.
  
  """
  payout: Bonds_BigDecimal!
  """
  The purchaser's address.
  
  """
  recipient: String!
  """
  The frontend referrer address.
  
  """
  referrer: String!
  """
  The time of the purchase.
  
  """
  timestamp: BigInt!
  """
  The address of the relevant Teller contract.
  
  """
  teller: String!
  """
  The address of the relevant Auctioneer contract.
  
  """
  auctioneer: String!
  """
  A reference to the payout Token record.
  
  """
  payoutToken: Bonds_Token!
  """
  A reference to the quote Token record.
  
  """
  quoteToken: Bonds_Token!
  """
  The network name, as used by Graph Protocol.
  **NOTE** This may not be the same as the name as used by wallets.
  As such, we use the chainId field to identify networks in our frontend.
  
  """
  network: String!
  """
  The numeric chain ID on which the contracts are deployed.
  
  """
  chainId: BigInt!
  """
  The price at which the bond was purchased.
  **NOTE** this is quoteToken amount / payoutToken amount, it is NOT a USD price.
  
  """
  purchasePrice: Bonds_BigDecimal!
  """
  The new bond price, updated after the purchase.
  **NOTE** this is the Auctioneer contract's marketPrice adjusted for marketScale, it is NOT a USD price.
  
  """
  postPurchasePrice: Bonds_BigDecimal!
  """
  A reference to the OwnerTokenTbv record for this chain/owner/token combination.
  
  """
  ownerTokenTbv: Bonds_OwnerTokenTbv
  """
  A reference to the PayoutTokenTbv record for this chain/owner/token combination.
  
  """
  payoutTokenTbv: Bonds_PayoutTokenTbv
  sourceName: String
}

input Bonds_BondPurchase_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Bonds_Market_filter
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  amount: Bonds_BigDecimal
  amount_not: Bonds_BigDecimal
  amount_gt: Bonds_BigDecimal
  amount_lt: Bonds_BigDecimal
  amount_gte: Bonds_BigDecimal
  amount_lte: Bonds_BigDecimal
  amount_in: [Bonds_BigDecimal!]
  amount_not_in: [Bonds_BigDecimal!]
  payout: Bonds_BigDecimal
  payout_not: Bonds_BigDecimal
  payout_gt: Bonds_BigDecimal
  payout_lt: Bonds_BigDecimal
  payout_gte: Bonds_BigDecimal
  payout_lte: Bonds_BigDecimal
  payout_in: [Bonds_BigDecimal!]
  payout_not_in: [Bonds_BigDecimal!]
  recipient: String
  recipient_not: String
  recipient_gt: String
  recipient_lt: String
  recipient_gte: String
  recipient_lte: String
  recipient_in: [String!]
  recipient_not_in: [String!]
  recipient_contains: String
  recipient_contains_nocase: String
  recipient_not_contains: String
  recipient_not_contains_nocase: String
  recipient_starts_with: String
  recipient_starts_with_nocase: String
  recipient_not_starts_with: String
  recipient_not_starts_with_nocase: String
  recipient_ends_with: String
  recipient_ends_with_nocase: String
  recipient_not_ends_with: String
  recipient_not_ends_with_nocase: String
  referrer: String
  referrer_not: String
  referrer_gt: String
  referrer_lt: String
  referrer_gte: String
  referrer_lte: String
  referrer_in: [String!]
  referrer_not_in: [String!]
  referrer_contains: String
  referrer_contains_nocase: String
  referrer_not_contains: String
  referrer_not_contains_nocase: String
  referrer_starts_with: String
  referrer_starts_with_nocase: String
  referrer_not_starts_with: String
  referrer_not_starts_with_nocase: String
  referrer_ends_with: String
  referrer_ends_with_nocase: String
  referrer_not_ends_with: String
  referrer_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  teller: String
  teller_not: String
  teller_gt: String
  teller_lt: String
  teller_gte: String
  teller_lte: String
  teller_in: [String!]
  teller_not_in: [String!]
  teller_contains: String
  teller_contains_nocase: String
  teller_not_contains: String
  teller_not_contains_nocase: String
  teller_starts_with: String
  teller_starts_with_nocase: String
  teller_not_starts_with: String
  teller_not_starts_with_nocase: String
  teller_ends_with: String
  teller_ends_with_nocase: String
  teller_not_ends_with: String
  teller_not_ends_with_nocase: String
  auctioneer: String
  auctioneer_not: String
  auctioneer_gt: String
  auctioneer_lt: String
  auctioneer_gte: String
  auctioneer_lte: String
  auctioneer_in: [String!]
  auctioneer_not_in: [String!]
  auctioneer_contains: String
  auctioneer_contains_nocase: String
  auctioneer_not_contains: String
  auctioneer_not_contains_nocase: String
  auctioneer_starts_with: String
  auctioneer_starts_with_nocase: String
  auctioneer_not_starts_with: String
  auctioneer_not_starts_with_nocase: String
  auctioneer_ends_with: String
  auctioneer_ends_with_nocase: String
  auctioneer_not_ends_with: String
  auctioneer_not_ends_with_nocase: String
  payoutToken: String
  payoutToken_not: String
  payoutToken_gt: String
  payoutToken_lt: String
  payoutToken_gte: String
  payoutToken_lte: String
  payoutToken_in: [String!]
  payoutToken_not_in: [String!]
  payoutToken_contains: String
  payoutToken_contains_nocase: String
  payoutToken_not_contains: String
  payoutToken_not_contains_nocase: String
  payoutToken_starts_with: String
  payoutToken_starts_with_nocase: String
  payoutToken_not_starts_with: String
  payoutToken_not_starts_with_nocase: String
  payoutToken_ends_with: String
  payoutToken_ends_with_nocase: String
  payoutToken_not_ends_with: String
  payoutToken_not_ends_with_nocase: String
  payoutToken_: Bonds_Token_filter
  quoteToken: String
  quoteToken_not: String
  quoteToken_gt: String
  quoteToken_lt: String
  quoteToken_gte: String
  quoteToken_lte: String
  quoteToken_in: [String!]
  quoteToken_not_in: [String!]
  quoteToken_contains: String
  quoteToken_contains_nocase: String
  quoteToken_not_contains: String
  quoteToken_not_contains_nocase: String
  quoteToken_starts_with: String
  quoteToken_starts_with_nocase: String
  quoteToken_not_starts_with: String
  quoteToken_not_starts_with_nocase: String
  quoteToken_ends_with: String
  quoteToken_ends_with_nocase: String
  quoteToken_not_ends_with: String
  quoteToken_not_ends_with_nocase: String
  quoteToken_: Bonds_Token_filter
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  purchasePrice: Bonds_BigDecimal
  purchasePrice_not: Bonds_BigDecimal
  purchasePrice_gt: Bonds_BigDecimal
  purchasePrice_lt: Bonds_BigDecimal
  purchasePrice_gte: Bonds_BigDecimal
  purchasePrice_lte: Bonds_BigDecimal
  purchasePrice_in: [Bonds_BigDecimal!]
  purchasePrice_not_in: [Bonds_BigDecimal!]
  postPurchasePrice: Bonds_BigDecimal
  postPurchasePrice_not: Bonds_BigDecimal
  postPurchasePrice_gt: Bonds_BigDecimal
  postPurchasePrice_lt: Bonds_BigDecimal
  postPurchasePrice_gte: Bonds_BigDecimal
  postPurchasePrice_lte: Bonds_BigDecimal
  postPurchasePrice_in: [Bonds_BigDecimal!]
  postPurchasePrice_not_in: [Bonds_BigDecimal!]
  ownerTokenTbv: String
  ownerTokenTbv_not: String
  ownerTokenTbv_gt: String
  ownerTokenTbv_lt: String
  ownerTokenTbv_gte: String
  ownerTokenTbv_lte: String
  ownerTokenTbv_in: [String!]
  ownerTokenTbv_not_in: [String!]
  ownerTokenTbv_contains: String
  ownerTokenTbv_contains_nocase: String
  ownerTokenTbv_not_contains: String
  ownerTokenTbv_not_contains_nocase: String
  ownerTokenTbv_starts_with: String
  ownerTokenTbv_starts_with_nocase: String
  ownerTokenTbv_not_starts_with: String
  ownerTokenTbv_not_starts_with_nocase: String
  ownerTokenTbv_ends_with: String
  ownerTokenTbv_ends_with_nocase: String
  ownerTokenTbv_not_ends_with: String
  ownerTokenTbv_not_ends_with_nocase: String
  ownerTokenTbv_: Bonds_OwnerTokenTbv_filter
  payoutTokenTbv: String
  payoutTokenTbv_not: String
  payoutTokenTbv_gt: String
  payoutTokenTbv_lt: String
  payoutTokenTbv_gte: String
  payoutTokenTbv_lte: String
  payoutTokenTbv_in: [String!]
  payoutTokenTbv_not_in: [String!]
  payoutTokenTbv_contains: String
  payoutTokenTbv_contains_nocase: String
  payoutTokenTbv_not_contains: String
  payoutTokenTbv_not_contains_nocase: String
  payoutTokenTbv_starts_with: String
  payoutTokenTbv_starts_with_nocase: String
  payoutTokenTbv_not_starts_with: String
  payoutTokenTbv_not_starts_with_nocase: String
  payoutTokenTbv_ends_with: String
  payoutTokenTbv_ends_with_nocase: String
  payoutTokenTbv_not_ends_with: String
  payoutTokenTbv_not_ends_with_nocase: String
  payoutTokenTbv_: Bonds_PayoutTokenTbv_filter
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_BondPurchase_filter]
  or: [Bonds_BondPurchase_filter]
}

enum Bonds_BondPurchase_orderBy {
  id
  market
  market__id
  market__name
  market__type
  market__network
  market__chainId
  market__auctioneer
  market__teller
  market__marketId
  market__owner
  market__vesting
  market__start
  market__conclusion
  market__vestingType
  market__isInstantSwap
  market__hasClosed
  market__totalBondedAmount
  market__totalPayoutAmount
  market__creationBlockTimestamp
  market__callbackAddress
  market__capacity
  market__capacityInQuote
  market__minPrice
  market__price
  market__scale
  market__averageBondPrice
  market__bondsIssued
  owner
  amount
  payout
  recipient
  referrer
  timestamp
  teller
  auctioneer
  payoutToken
  payoutToken__id
  payoutToken__network
  payoutToken__chainId
  payoutToken__address
  payoutToken__decimals
  payoutToken__symbol
  payoutToken__name
  payoutToken__typeName
  payoutToken__usedAsPayout
  payoutToken__usedAsQuote
  payoutToken__totalPayoutAmount
  payoutToken__purchaseCount
  quoteToken
  quoteToken__id
  quoteToken__network
  quoteToken__chainId
  quoteToken__address
  quoteToken__decimals
  quoteToken__symbol
  quoteToken__name
  quoteToken__typeName
  quoteToken__usedAsPayout
  quoteToken__usedAsQuote
  quoteToken__totalPayoutAmount
  quoteToken__purchaseCount
  network
  chainId
  purchasePrice
  postPurchasePrice
  ownerTokenTbv
  ownerTokenTbv__id
  ownerTokenTbv__owner
  ownerTokenTbv__token
  ownerTokenTbv__network
  ownerTokenTbv__chainId
  ownerTokenTbv__tbv
  payoutTokenTbv
  payoutTokenTbv__id
  payoutTokenTbv__network
  payoutTokenTbv__chainId
  payoutTokenTbv__tbv
}

"""
A BondToken record is created to track vesting tokens, both ERC-20 and ERC-1155, created by our contracts.

"""
type Bonds_BondToken {
  """
  Unique ID for the BondToken entity. In the case of an ERC-20 token, this will be the token's address. In the case of an ERC-1155 token, it will be the token's ID.
  
  """
  id: String!
  """
  The number of decimals if an ERC-20, null if an ERC-1155.
  
  """
  decimals: BigInt
  """
  The token symbol if an ERC-20, null if an ERC-1155.
  
  """
  symbol: String
  """
  A reference to the Token which will be paid out upon vesting.
  
  """
  underlying: Bonds_Token!
  """
  Timestamp at which vesting completes.
  
  """
  expiry: BigInt!
  """
  The address of the relevant Teller contract.
  
  """
  teller: String!
  """
  The network name, as used by Graph Protocol.
  **NOTE** This may not be the same as the name as used by wallets.
  As such, we use the chainId field to identify networks in our frontend.
  
  """
  network: String!
  """
  The numeric chain ID on which the contracts are deployed.
  
  """
  chainId: BigInt!
  """
  The type of bond, either "fixed-term" or "fixed-expiration".
  
  """
  type: String!
  sourceName: String
}

input Bonds_BondToken_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  underlying: String
  underlying_not: String
  underlying_gt: String
  underlying_lt: String
  underlying_gte: String
  underlying_lte: String
  underlying_in: [String!]
  underlying_not_in: [String!]
  underlying_contains: String
  underlying_contains_nocase: String
  underlying_not_contains: String
  underlying_not_contains_nocase: String
  underlying_starts_with: String
  underlying_starts_with_nocase: String
  underlying_not_starts_with: String
  underlying_not_starts_with_nocase: String
  underlying_ends_with: String
  underlying_ends_with_nocase: String
  underlying_not_ends_with: String
  underlying_not_ends_with_nocase: String
  underlying_: Bonds_Token_filter
  expiry: BigInt
  expiry_not: BigInt
  expiry_gt: BigInt
  expiry_lt: BigInt
  expiry_gte: BigInt
  expiry_lte: BigInt
  expiry_in: [BigInt!]
  expiry_not_in: [BigInt!]
  teller: String
  teller_not: String
  teller_gt: String
  teller_lt: String
  teller_gte: String
  teller_lte: String
  teller_in: [String!]
  teller_not_in: [String!]
  teller_contains: String
  teller_contains_nocase: String
  teller_not_contains: String
  teller_not_contains_nocase: String
  teller_starts_with: String
  teller_starts_with_nocase: String
  teller_not_starts_with: String
  teller_not_starts_with_nocase: String
  teller_ends_with: String
  teller_ends_with_nocase: String
  teller_not_ends_with: String
  teller_not_ends_with_nocase: String
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_BondToken_filter]
  or: [Bonds_BondToken_filter]
}

enum Bonds_BondToken_orderBy {
  id
  decimals
  symbol
  underlying
  underlying__id
  underlying__network
  underlying__chainId
  underlying__address
  underlying__decimals
  underlying__symbol
  underlying__name
  underlying__typeName
  underlying__usedAsPayout
  underlying__usedAsQuote
  underlying__totalPayoutAmount
  underlying__purchaseCount
  expiry
  teller
  network
  chainId
  type
}

scalar Bonds_Bytes

"""
8 bytes signed integer

"""
scalar Bonds_Int8

"""
The Market entity tracks all bond markets which have been created, whether currently open or closed.

"""
type Bonds_Market {
  """
  Unique ID for the Market entity, in the format:
  [chainId]_[auctioneer contract name]_[market id]
  **NOTE** At the time of writing, contract name will be either 'BondFixedTermCDA' or BondFixedExpCDA. More will be added in the future as different auctioneer types become available.
  
  """
  id: String!
  """
  The Auctioneer contract name.
  
  """
  name: String!
  """
  The type of Market.
  
  """
  type: String!
  """
  The network name, as used by Graph Protocol.
  **NOTE** This may not be the same as the name as used by wallets.
  As such, we use the chainId field to identify networks in our frontend.
  
  """
  network: String!
  """
  The numeric chain ID on which the contracts are deployed.
  
  """
  chainId: BigInt!
  """
  The address of the Market's Auctioneer contract.
  
  """
  auctioneer: String!
  """
  The address of the Market's Teller contract.
  
  """
  teller: String!
  """
  The Market's ID for use with the Auctioneer.
  
  """
  marketId: BigInt!
  """
  The address of the Market owner.
  
  """
  owner: String!
  """
  A reference to the payout Token record.
  
  """
  payoutToken: Bonds_Token!
  """
  A reference to the quote Token record.
  
  """
  quoteToken: Bonds_Token!
  """
  The Market's vesting time. In the case of fixed expiry markets, this will be a timestamp. In the case of fixed term markets, it will be the vesting duration in seconds.
  
  """
  vesting: BigInt!
  """
  The Market's start time (for supported Market types)
  
  """
  start: BigInt
  """
  The Market's conclusion time
  
  """
  conclusion: BigInt
  """
  The type of vesting for the market. At the time of writing, this will be either "fixed-term" or "fixed-expiration". More options may be added in the future if new vesting types become available.
  
  """
  vestingType: String!
  """
  Whether or not the Market is an instant swap market.
  
  """
  isInstantSwap: Boolean!
  """
  Whether or not the Market has been closed.
  
  """
  hasClosed: Boolean!
  """
  The total amount of quote tokens bonded for this market.
  **NOTE** This is the number of quote tokens, NOT their USD value.
  
  """
  totalBondedAmount: Bonds_BigDecimal!
  """
  The total amount of payout tokens purchased through this market.
  **NOTE** This is the number of payout tokens, NOT their USD value.
  
  """
  totalPayoutAmount: Bonds_BigDecimal!
  """
  The timestamp of the block in which the Market was created.
  
  """
  creationBlockTimestamp: BigInt!
  """
  The address of the Market callback contract, if specified. 0x0000000000000000000000000000000000000000 if there is no callback contract.
  
  """
  callbackAddress: String!
  """
  The current capacity of the Market. This can be in either the quote or payout Token, according to the value of the capacityInQuote field.
  
  """
  capacity: BigInt!
  """
  Whether the Market capacity is measured in the quote (true) or payout (false) Token.
  
  """
  capacityInQuote: Boolean!
  """
  The minimum price at which a bond can be purchased.
  **NOTE** This is a minimum return value for the Auctioneer marketPrice function, NOT a USD price.
  
  """
  minPrice: BigInt
  """
  The price at which a bond can be purchased.
  **NOTE** This is a minimum return value for the Auctioneer marketPrice function, NOT a USD price.
  
  """
  price: BigInt
  """
  Scale value to use when converting between quote token and payout token amounts with marketPrice.
  
  """
  scale: BigInt
  """
  The average bond price across all purchases.
  
  """
  averageBondPrice: Bonds_BigDecimal
  """
  A list of all tuning events that have been emitted for this Market.
  
  """
  tunes(skip: Int = 0, first: Int = 100, orderBy: Bonds_Tune_orderBy, orderDirection: Bonds_OrderDirection, where: Bonds_Tune_filter): [Bonds_Tune!]
  """
  A list of BondPurchase records for this Market.
  
  """
  bondPurchases(skip: Int = 0, first: Int = 100, orderBy: Bonds_BondPurchase_orderBy, orderDirection: Bonds_OrderDirection, where: Bonds_BondPurchase_filter): [Bonds_BondPurchase!]
  """
  A count of BondPurchases for this market
  
  """
  bondsIssued: BigInt!
  sourceName: String
}

"""
Workaround due to no simple entity count being available.

"""
type Bonds_MarketOwnerCount {
  """
  There should be one MarketOwnerCount entry per market owner, with owner address as id.
  
  """
  id: String!
  """
  The total number of markets (open and closed) owned by this address on this chain.
  
  """
  count: BigInt!
  sourceName: String
}

input Bonds_MarketOwnerCount_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_MarketOwnerCount_filter]
  or: [Bonds_MarketOwnerCount_filter]
}

enum Bonds_MarketOwnerCount_orderBy {
  id
  count
}

input Bonds_Market_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  auctioneer: String
  auctioneer_not: String
  auctioneer_gt: String
  auctioneer_lt: String
  auctioneer_gte: String
  auctioneer_lte: String
  auctioneer_in: [String!]
  auctioneer_not_in: [String!]
  auctioneer_contains: String
  auctioneer_contains_nocase: String
  auctioneer_not_contains: String
  auctioneer_not_contains_nocase: String
  auctioneer_starts_with: String
  auctioneer_starts_with_nocase: String
  auctioneer_not_starts_with: String
  auctioneer_not_starts_with_nocase: String
  auctioneer_ends_with: String
  auctioneer_ends_with_nocase: String
  auctioneer_not_ends_with: String
  auctioneer_not_ends_with_nocase: String
  teller: String
  teller_not: String
  teller_gt: String
  teller_lt: String
  teller_gte: String
  teller_lte: String
  teller_in: [String!]
  teller_not_in: [String!]
  teller_contains: String
  teller_contains_nocase: String
  teller_not_contains: String
  teller_not_contains_nocase: String
  teller_starts_with: String
  teller_starts_with_nocase: String
  teller_not_starts_with: String
  teller_not_starts_with_nocase: String
  teller_ends_with: String
  teller_ends_with_nocase: String
  teller_not_ends_with: String
  teller_not_ends_with_nocase: String
  marketId: BigInt
  marketId_not: BigInt
  marketId_gt: BigInt
  marketId_lt: BigInt
  marketId_gte: BigInt
  marketId_lte: BigInt
  marketId_in: [BigInt!]
  marketId_not_in: [BigInt!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  payoutToken: String
  payoutToken_not: String
  payoutToken_gt: String
  payoutToken_lt: String
  payoutToken_gte: String
  payoutToken_lte: String
  payoutToken_in: [String!]
  payoutToken_not_in: [String!]
  payoutToken_contains: String
  payoutToken_contains_nocase: String
  payoutToken_not_contains: String
  payoutToken_not_contains_nocase: String
  payoutToken_starts_with: String
  payoutToken_starts_with_nocase: String
  payoutToken_not_starts_with: String
  payoutToken_not_starts_with_nocase: String
  payoutToken_ends_with: String
  payoutToken_ends_with_nocase: String
  payoutToken_not_ends_with: String
  payoutToken_not_ends_with_nocase: String
  payoutToken_: Bonds_Token_filter
  quoteToken: String
  quoteToken_not: String
  quoteToken_gt: String
  quoteToken_lt: String
  quoteToken_gte: String
  quoteToken_lte: String
  quoteToken_in: [String!]
  quoteToken_not_in: [String!]
  quoteToken_contains: String
  quoteToken_contains_nocase: String
  quoteToken_not_contains: String
  quoteToken_not_contains_nocase: String
  quoteToken_starts_with: String
  quoteToken_starts_with_nocase: String
  quoteToken_not_starts_with: String
  quoteToken_not_starts_with_nocase: String
  quoteToken_ends_with: String
  quoteToken_ends_with_nocase: String
  quoteToken_not_ends_with: String
  quoteToken_not_ends_with_nocase: String
  quoteToken_: Bonds_Token_filter
  vesting: BigInt
  vesting_not: BigInt
  vesting_gt: BigInt
  vesting_lt: BigInt
  vesting_gte: BigInt
  vesting_lte: BigInt
  vesting_in: [BigInt!]
  vesting_not_in: [BigInt!]
  start: BigInt
  start_not: BigInt
  start_gt: BigInt
  start_lt: BigInt
  start_gte: BigInt
  start_lte: BigInt
  start_in: [BigInt!]
  start_not_in: [BigInt!]
  conclusion: BigInt
  conclusion_not: BigInt
  conclusion_gt: BigInt
  conclusion_lt: BigInt
  conclusion_gte: BigInt
  conclusion_lte: BigInt
  conclusion_in: [BigInt!]
  conclusion_not_in: [BigInt!]
  vestingType: String
  vestingType_not: String
  vestingType_gt: String
  vestingType_lt: String
  vestingType_gte: String
  vestingType_lte: String
  vestingType_in: [String!]
  vestingType_not_in: [String!]
  vestingType_contains: String
  vestingType_contains_nocase: String
  vestingType_not_contains: String
  vestingType_not_contains_nocase: String
  vestingType_starts_with: String
  vestingType_starts_with_nocase: String
  vestingType_not_starts_with: String
  vestingType_not_starts_with_nocase: String
  vestingType_ends_with: String
  vestingType_ends_with_nocase: String
  vestingType_not_ends_with: String
  vestingType_not_ends_with_nocase: String
  isInstantSwap: Boolean
  isInstantSwap_not: Boolean
  isInstantSwap_in: [Boolean!]
  isInstantSwap_not_in: [Boolean!]
  hasClosed: Boolean
  hasClosed_not: Boolean
  hasClosed_in: [Boolean!]
  hasClosed_not_in: [Boolean!]
  totalBondedAmount: Bonds_BigDecimal
  totalBondedAmount_not: Bonds_BigDecimal
  totalBondedAmount_gt: Bonds_BigDecimal
  totalBondedAmount_lt: Bonds_BigDecimal
  totalBondedAmount_gte: Bonds_BigDecimal
  totalBondedAmount_lte: Bonds_BigDecimal
  totalBondedAmount_in: [Bonds_BigDecimal!]
  totalBondedAmount_not_in: [Bonds_BigDecimal!]
  totalPayoutAmount: Bonds_BigDecimal
  totalPayoutAmount_not: Bonds_BigDecimal
  totalPayoutAmount_gt: Bonds_BigDecimal
  totalPayoutAmount_lt: Bonds_BigDecimal
  totalPayoutAmount_gte: Bonds_BigDecimal
  totalPayoutAmount_lte: Bonds_BigDecimal
  totalPayoutAmount_in: [Bonds_BigDecimal!]
  totalPayoutAmount_not_in: [Bonds_BigDecimal!]
  creationBlockTimestamp: BigInt
  creationBlockTimestamp_not: BigInt
  creationBlockTimestamp_gt: BigInt
  creationBlockTimestamp_lt: BigInt
  creationBlockTimestamp_gte: BigInt
  creationBlockTimestamp_lte: BigInt
  creationBlockTimestamp_in: [BigInt!]
  creationBlockTimestamp_not_in: [BigInt!]
  callbackAddress: String
  callbackAddress_not: String
  callbackAddress_gt: String
  callbackAddress_lt: String
  callbackAddress_gte: String
  callbackAddress_lte: String
  callbackAddress_in: [String!]
  callbackAddress_not_in: [String!]
  callbackAddress_contains: String
  callbackAddress_contains_nocase: String
  callbackAddress_not_contains: String
  callbackAddress_not_contains_nocase: String
  callbackAddress_starts_with: String
  callbackAddress_starts_with_nocase: String
  callbackAddress_not_starts_with: String
  callbackAddress_not_starts_with_nocase: String
  callbackAddress_ends_with: String
  callbackAddress_ends_with_nocase: String
  callbackAddress_not_ends_with: String
  callbackAddress_not_ends_with_nocase: String
  capacity: BigInt
  capacity_not: BigInt
  capacity_gt: BigInt
  capacity_lt: BigInt
  capacity_gte: BigInt
  capacity_lte: BigInt
  capacity_in: [BigInt!]
  capacity_not_in: [BigInt!]
  capacityInQuote: Boolean
  capacityInQuote_not: Boolean
  capacityInQuote_in: [Boolean!]
  capacityInQuote_not_in: [Boolean!]
  minPrice: BigInt
  minPrice_not: BigInt
  minPrice_gt: BigInt
  minPrice_lt: BigInt
  minPrice_gte: BigInt
  minPrice_lte: BigInt
  minPrice_in: [BigInt!]
  minPrice_not_in: [BigInt!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  scale: BigInt
  scale_not: BigInt
  scale_gt: BigInt
  scale_lt: BigInt
  scale_gte: BigInt
  scale_lte: BigInt
  scale_in: [BigInt!]
  scale_not_in: [BigInt!]
  averageBondPrice: Bonds_BigDecimal
  averageBondPrice_not: Bonds_BigDecimal
  averageBondPrice_gt: Bonds_BigDecimal
  averageBondPrice_lt: Bonds_BigDecimal
  averageBondPrice_gte: Bonds_BigDecimal
  averageBondPrice_lte: Bonds_BigDecimal
  averageBondPrice_in: [Bonds_BigDecimal!]
  averageBondPrice_not_in: [Bonds_BigDecimal!]
  tunes_: Bonds_Tune_filter
  bondPurchases_: Bonds_BondPurchase_filter
  bondsIssued: BigInt
  bondsIssued_not: BigInt
  bondsIssued_gt: BigInt
  bondsIssued_lt: BigInt
  bondsIssued_gte: BigInt
  bondsIssued_lte: BigInt
  bondsIssued_in: [BigInt!]
  bondsIssued_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_Market_filter]
  or: [Bonds_Market_filter]
}

enum Bonds_Market_orderBy {
  id
  name
  type
  network
  chainId
  auctioneer
  teller
  marketId
  owner
  payoutToken
  payoutToken__id
  payoutToken__network
  payoutToken__chainId
  payoutToken__address
  payoutToken__decimals
  payoutToken__symbol
  payoutToken__name
  payoutToken__typeName
  payoutToken__usedAsPayout
  payoutToken__usedAsQuote
  payoutToken__totalPayoutAmount
  payoutToken__purchaseCount
  quoteToken
  quoteToken__id
  quoteToken__network
  quoteToken__chainId
  quoteToken__address
  quoteToken__decimals
  quoteToken__symbol
  quoteToken__name
  quoteToken__typeName
  quoteToken__usedAsPayout
  quoteToken__usedAsQuote
  quoteToken__totalPayoutAmount
  quoteToken__purchaseCount
  vesting
  start
  conclusion
  vestingType
  isInstantSwap
  hasClosed
  totalBondedAmount
  totalPayoutAmount
  creationBlockTimestamp
  callbackAddress
  capacity
  capacityInQuote
  minPrice
  price
  scale
  averageBondPrice
  tunes
  bondPurchases
  bondsIssued
}

"""Defines the order direction, either ascending or descending"""
enum Bonds_OrderDirection {
  asc
  desc
}

"""
The OwnerBalance entity tracks user balances of fixed-term ERC-1155 bond tokens.
It does not track balances of fixed-expiry ERC-20 tokens. These can be found by querying the user's wallet.

"""
type Bonds_OwnerBalance {
  """
  Unique ID for the OwnerBalance entity, in the format:
  [owner address]_[BondToken tokenId]
  
  """
  id: String!
  """
  The unique ID of the token, assigned on creation.
  
  """
  tokenId: BigInt!
  """
  The wallet address the balance pertains to.
  
  """
  owner: String!
  """
  The current balance of ERC-1155 bond tokens.
  
  """
  balance: BigInt!
  """
  The network name, as used by Graph Protocol.
  **NOTE** This may not be the same as the name as used by wallets.
  As such, we use the chainId field to identify networks in our frontend.
  
  """
  network: String!
  """
  The numeric chain ID on which the contracts are deployed.
  
  """
  chainId: BigInt!
  """
  A reference to the BondToken for which the balance is being recorded.
  
  """
  bondToken: Bonds_BondToken
  sourceName: String
}

input Bonds_OwnerBalance_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  bondToken: String
  bondToken_not: String
  bondToken_gt: String
  bondToken_lt: String
  bondToken_gte: String
  bondToken_lte: String
  bondToken_in: [String!]
  bondToken_not_in: [String!]
  bondToken_contains: String
  bondToken_contains_nocase: String
  bondToken_not_contains: String
  bondToken_not_contains_nocase: String
  bondToken_starts_with: String
  bondToken_starts_with_nocase: String
  bondToken_not_starts_with: String
  bondToken_not_starts_with_nocase: String
  bondToken_ends_with: String
  bondToken_ends_with_nocase: String
  bondToken_not_ends_with: String
  bondToken_not_ends_with_nocase: String
  bondToken_: Bonds_BondToken_filter
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_OwnerBalance_filter]
  or: [Bonds_OwnerBalance_filter]
}

enum Bonds_OwnerBalance_orderBy {
  id
  tokenId
  owner
  balance
  network
  chainId
  bondToken
  bondToken__id
  bondToken__decimals
  bondToken__symbol
  bondToken__expiry
  bondToken__teller
  bondToken__network
  bondToken__chainId
  bondToken__type
}

"""
The OwnerTokenTbv entity tracks the total of each quote token received by each Market owner.

"""
type Bonds_OwnerTokenTbv {
  """
  Unique ID for the OwnerTokenTbv entity, in the format:
  [chainId]_[Market owner address]__[quote Token id]
  **NOTE** the Token ID also appends the chain ID before the token address, so the chain ID will appear once at the start of the OwnerTokenTbv ID and once in the quote token subsection of the ID.
  
  """
  id: String!
  """
  The Market owner address for which TBV is being calculated.
  
  """
  owner: String!
  """
  The quote Token for which TBV is being calculated.
  
  """
  token: String!
  """
  The network name, as used by Graph Protocol.
  **NOTE** This may not be the same as the name as used by wallets.
  As such, we use the chainId field to identify networks in our frontend.
  
  """
  network: String!
  """
  The numeric chain ID on which the contracts are deployed.
  
  """
  chainId: BigInt!
  """
  The amount of the quote token received across the owner's markets.
  
  """
  tbv: Bonds_BigDecimal!
  """
  A list of BondPurchase records in which the owner has received the quote token.
  
  """
  bondPurchases(skip: Int = 0, first: Int = 100, orderBy: Bonds_BondPurchase_orderBy, orderDirection: Bonds_OrderDirection, where: Bonds_BondPurchase_filter): [Bonds_BondPurchase!]
  sourceName: String
}

input Bonds_OwnerTokenTbv_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  tbv: Bonds_BigDecimal
  tbv_not: Bonds_BigDecimal
  tbv_gt: Bonds_BigDecimal
  tbv_lt: Bonds_BigDecimal
  tbv_gte: Bonds_BigDecimal
  tbv_lte: Bonds_BigDecimal
  tbv_in: [Bonds_BigDecimal!]
  tbv_not_in: [Bonds_BigDecimal!]
  bondPurchases_: Bonds_BondPurchase_filter
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_OwnerTokenTbv_filter]
  or: [Bonds_OwnerTokenTbv_filter]
}

enum Bonds_OwnerTokenTbv_orderBy {
  id
  owner
  token
  network
  chainId
  tbv
  bondPurchases
}

"""
The Pair entity stores references to the Tokens which make up a Uniswap-V2 or similar LP Pair.

"""
type Bonds_Pair {
  """
  The address of the LP pair.
  **NOTE** for consistency, this should probably be updated to append the chainId, as Token and BalancerWeightedPool do.
  
  """
  id: String!
  """
  A reference to the Token record for the LP pair's token0.
  
  """
  token0: Bonds_Token!
  """
  A reference to the Token record for the LP pair's token1.
  
  """
  token1: Bonds_Token!
  sourceName: String
}

input Bonds_Pair_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Bonds_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Bonds_Token_filter
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_Pair_filter]
  or: [Bonds_Pair_filter]
}

enum Bonds_Pair_orderBy {
  id
  token0
  token0__id
  token0__network
  token0__chainId
  token0__address
  token0__decimals
  token0__symbol
  token0__name
  token0__typeName
  token0__usedAsPayout
  token0__usedAsQuote
  token0__totalPayoutAmount
  token0__purchaseCount
  token1
  token1__id
  token1__network
  token1__chainId
  token1__address
  token1__decimals
  token1__symbol
  token1__name
  token1__typeName
  token1__usedAsPayout
  token1__usedAsQuote
  token1__totalPayoutAmount
  token1__purchaseCount
}

type Bonds_PayoutToken {
  id: String!
  sourceName: String
}

"""
The PayoutTokenTbv entity tracks the total of each quote token received in exchange for the given payout token.

"""
type Bonds_PayoutTokenTbv {
  """
  Unique ID for the PayoutTokenTbv entity, in the format:
  [chainId]_[payout token address]__[quote token id]
  **NOTE** the Token ID also appends the chain ID before the token address, so the chain ID will appear once at the start of the OwnerTokenTbv ID and once in the quote token subsection of the ID.
  
  """
  id: String!
  """
  The payout Token address for which TBV is being calculated.
  
  """
  payoutToken: Bonds_Token!
  """
  The quote Token for which TBV is being calculated.
  
  """
  quoteToken: Bonds_Token!
  """
  The network name, as used by Graph Protocol.
  **NOTE** This may not be the same as the name as used by wallets.
  As such, we use the chainId field to identify networks in our frontend.
  
  """
  network: String!
  """
  The numeric chain ID on which the contracts are deployed.
  
  """
  chainId: BigInt!
  """
  The amount of the quote token received across the owner's markets.
  
  """
  tbv: Bonds_BigDecimal!
  """
  A list of BondPurchase records in which the owner has received the quote token.
  
  """
  bondPurchases(skip: Int = 0, first: Int = 100, orderBy: Bonds_BondPurchase_orderBy, orderDirection: Bonds_OrderDirection, where: Bonds_BondPurchase_filter): [Bonds_BondPurchase!]
  sourceName: String
}

input Bonds_PayoutTokenTbv_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  payoutToken: String
  payoutToken_not: String
  payoutToken_gt: String
  payoutToken_lt: String
  payoutToken_gte: String
  payoutToken_lte: String
  payoutToken_in: [String!]
  payoutToken_not_in: [String!]
  payoutToken_contains: String
  payoutToken_contains_nocase: String
  payoutToken_not_contains: String
  payoutToken_not_contains_nocase: String
  payoutToken_starts_with: String
  payoutToken_starts_with_nocase: String
  payoutToken_not_starts_with: String
  payoutToken_not_starts_with_nocase: String
  payoutToken_ends_with: String
  payoutToken_ends_with_nocase: String
  payoutToken_not_ends_with: String
  payoutToken_not_ends_with_nocase: String
  payoutToken_: Bonds_Token_filter
  quoteToken: String
  quoteToken_not: String
  quoteToken_gt: String
  quoteToken_lt: String
  quoteToken_gte: String
  quoteToken_lte: String
  quoteToken_in: [String!]
  quoteToken_not_in: [String!]
  quoteToken_contains: String
  quoteToken_contains_nocase: String
  quoteToken_not_contains: String
  quoteToken_not_contains_nocase: String
  quoteToken_starts_with: String
  quoteToken_starts_with_nocase: String
  quoteToken_not_starts_with: String
  quoteToken_not_starts_with_nocase: String
  quoteToken_ends_with: String
  quoteToken_ends_with_nocase: String
  quoteToken_not_ends_with: String
  quoteToken_not_ends_with_nocase: String
  quoteToken_: Bonds_Token_filter
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  tbv: Bonds_BigDecimal
  tbv_not: Bonds_BigDecimal
  tbv_gt: Bonds_BigDecimal
  tbv_lt: Bonds_BigDecimal
  tbv_gte: Bonds_BigDecimal
  tbv_lte: Bonds_BigDecimal
  tbv_in: [Bonds_BigDecimal!]
  tbv_not_in: [Bonds_BigDecimal!]
  bondPurchases_: Bonds_BondPurchase_filter
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_PayoutTokenTbv_filter]
  or: [Bonds_PayoutTokenTbv_filter]
}

enum Bonds_PayoutTokenTbv_orderBy {
  id
  payoutToken
  payoutToken__id
  payoutToken__network
  payoutToken__chainId
  payoutToken__address
  payoutToken__decimals
  payoutToken__symbol
  payoutToken__name
  payoutToken__typeName
  payoutToken__usedAsPayout
  payoutToken__usedAsQuote
  payoutToken__totalPayoutAmount
  payoutToken__purchaseCount
  quoteToken
  quoteToken__id
  quoteToken__network
  quoteToken__chainId
  quoteToken__address
  quoteToken__decimals
  quoteToken__symbol
  quoteToken__name
  quoteToken__typeName
  quoteToken__usedAsPayout
  quoteToken__usedAsQuote
  quoteToken__totalPayoutAmount
  quoteToken__purchaseCount
  network
  chainId
  tbv
  bondPurchases
}

input Bonds_PayoutToken_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_PayoutToken_filter]
  or: [Bonds_PayoutToken_filter]
}

enum Bonds_PayoutToken_orderBy {
  id
}

"""
Workaround due to no simple entity count being available.

"""
type Bonds_PurchaseCount {
  """
  There should only be one PurchaseCount entry, with id "purchase-count".
  
  """
  id: String!
  """
  The total number of bond purchases across all markets on this chain.
  
  """
  count: BigInt!
  sourceName: String
}

input Bonds_PurchaseCount_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_PurchaseCount_filter]
  or: [Bonds_PurchaseCount_filter]
}

enum Bonds_PurchaseCount_orderBy {
  id
  count
}

type Bonds_QuoteToken {
  id: String!
  sourceName: String
}

input Bonds_QuoteToken_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_QuoteToken_filter]
  or: [Bonds_QuoteToken_filter]
}

enum Bonds_QuoteToken_orderBy {
  id
}

"""
The Token entity tracks all payout and quote tokens, including LP pairs, Balancer Pools etc and their constituent tokens.

"""
type Bonds_Token {
  """
  Unique ID for the Token entity, in the format:
  [chainId]_[token address]
  
  """
  id: String!
  """
  The network name, as used by Graph Protocol.
  **NOTE** This may not be the same as the name as used by wallets.
  As such, we use the chainId field to identify networks in our frontend.
  
  """
  network: String!
  """
  The numeric chain ID on which the contracts are deployed.
  
  """
  chainId: BigInt!
  """
  The address of the Token.
  
  """
  address: String!
  """
  The number of decimals for the Token.
  
  """
  decimals: BigInt!
  """
  The Token symbol.
  
  """
  symbol: String!
  """
  The Token name.
  
  """
  name: String!
  """
  The smart contract (as opposed to token) name - e.g. "ERC20", "SLP", "BalancerWeightedPool".
  
  """
  typeName: String!
  """
  A reference to the Pair record, if the Token is a Uniswap-V2 (or compatible) LP token, null if it is not.
  
  """
  lpPair: Bonds_Pair
  """
  A reference to the BalancerWeightedPool record, if the Token is a BalancerWeightedPool, or null if it is not.
  
  """
  balancerWeightedPool: Bonds_BalancerWeightedPool
  """
  Whether the Token has been used as a Payout Token for any Markets
  
  """
  usedAsPayout: Boolean!
  """
  Whether the Token has been used as a Quote Token for any Markets
  
  """
  usedAsQuote: Boolean!
  """
  The amount of the this token paid out across the owner's markets.
  
  """
  totalPayoutAmount: Bonds_BigDecimal!
  """
  The total number of times this Token has been purchased on this chain.
  
  """
  purchaseCount: BigInt!
  """
  A list of PayoutTokenTbv for this Token.
  
  """
  payoutTokenTbvs(skip: Int = 0, first: Int = 100, orderBy: Bonds_PayoutTokenTbv_orderBy, orderDirection: Bonds_OrderDirection, where: Bonds_PayoutTokenTbv_filter): [Bonds_PayoutTokenTbv!]
  """
  The UniqueTokenBonderCount for this Token
  
  """
  uniqueBonders: Bonds_UniqueTokenBonderCount
  """
  Markets for this Token
  
  """
  markets(skip: Int = 0, first: Int = 100, orderBy: Bonds_Market_orderBy, orderDirection: Bonds_OrderDirection, where: Bonds_Market_filter): [Bonds_Market!]
  sourceName: String
}

input Bonds_Token_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  typeName: String
  typeName_not: String
  typeName_gt: String
  typeName_lt: String
  typeName_gte: String
  typeName_lte: String
  typeName_in: [String!]
  typeName_not_in: [String!]
  typeName_contains: String
  typeName_contains_nocase: String
  typeName_not_contains: String
  typeName_not_contains_nocase: String
  typeName_starts_with: String
  typeName_starts_with_nocase: String
  typeName_not_starts_with: String
  typeName_not_starts_with_nocase: String
  typeName_ends_with: String
  typeName_ends_with_nocase: String
  typeName_not_ends_with: String
  typeName_not_ends_with_nocase: String
  lpPair: String
  lpPair_not: String
  lpPair_gt: String
  lpPair_lt: String
  lpPair_gte: String
  lpPair_lte: String
  lpPair_in: [String!]
  lpPair_not_in: [String!]
  lpPair_contains: String
  lpPair_contains_nocase: String
  lpPair_not_contains: String
  lpPair_not_contains_nocase: String
  lpPair_starts_with: String
  lpPair_starts_with_nocase: String
  lpPair_not_starts_with: String
  lpPair_not_starts_with_nocase: String
  lpPair_ends_with: String
  lpPair_ends_with_nocase: String
  lpPair_not_ends_with: String
  lpPair_not_ends_with_nocase: String
  lpPair_: Bonds_Pair_filter
  balancerWeightedPool: String
  balancerWeightedPool_not: String
  balancerWeightedPool_gt: String
  balancerWeightedPool_lt: String
  balancerWeightedPool_gte: String
  balancerWeightedPool_lte: String
  balancerWeightedPool_in: [String!]
  balancerWeightedPool_not_in: [String!]
  balancerWeightedPool_contains: String
  balancerWeightedPool_contains_nocase: String
  balancerWeightedPool_not_contains: String
  balancerWeightedPool_not_contains_nocase: String
  balancerWeightedPool_starts_with: String
  balancerWeightedPool_starts_with_nocase: String
  balancerWeightedPool_not_starts_with: String
  balancerWeightedPool_not_starts_with_nocase: String
  balancerWeightedPool_ends_with: String
  balancerWeightedPool_ends_with_nocase: String
  balancerWeightedPool_not_ends_with: String
  balancerWeightedPool_not_ends_with_nocase: String
  balancerWeightedPool_: Bonds_BalancerWeightedPool_filter
  usedAsPayout: Boolean
  usedAsPayout_not: Boolean
  usedAsPayout_in: [Boolean!]
  usedAsPayout_not_in: [Boolean!]
  usedAsQuote: Boolean
  usedAsQuote_not: Boolean
  usedAsQuote_in: [Boolean!]
  usedAsQuote_not_in: [Boolean!]
  totalPayoutAmount: Bonds_BigDecimal
  totalPayoutAmount_not: Bonds_BigDecimal
  totalPayoutAmount_gt: Bonds_BigDecimal
  totalPayoutAmount_lt: Bonds_BigDecimal
  totalPayoutAmount_gte: Bonds_BigDecimal
  totalPayoutAmount_lte: Bonds_BigDecimal
  totalPayoutAmount_in: [Bonds_BigDecimal!]
  totalPayoutAmount_not_in: [Bonds_BigDecimal!]
  purchaseCount: BigInt
  purchaseCount_not: BigInt
  purchaseCount_gt: BigInt
  purchaseCount_lt: BigInt
  purchaseCount_gte: BigInt
  purchaseCount_lte: BigInt
  purchaseCount_in: [BigInt!]
  purchaseCount_not_in: [BigInt!]
  payoutTokenTbvs_: Bonds_PayoutTokenTbv_filter
  uniqueBonders_: Bonds_UniqueTokenBonderCount_filter
  markets_: Bonds_Market_filter
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_Token_filter]
  or: [Bonds_Token_filter]
}

enum Bonds_Token_orderBy {
  id
  network
  chainId
  address
  decimals
  symbol
  name
  typeName
  lpPair
  lpPair__id
  balancerWeightedPool
  balancerWeightedPool__id
  balancerWeightedPool__vaultAddress
  balancerWeightedPool__poolId
  usedAsPayout
  usedAsQuote
  totalPayoutAmount
  purchaseCount
  payoutTokenTbvs
  uniqueBonders
  uniqueBonders__id
  uniqueBonders__count
  markets
}

"""
The Tune entity tracks Market tuning events.

"""
type Bonds_Tune {
  """
  The ID of the Market to which the event relates.
  
  """
  id: String!
  """
  A reference to the related Market record.
  
  """
  market: Bonds_Market!
  """
  The pre-tuning value of the control variable.
  
  """
  oldControlVariable: BigInt!
  """
  The post-tuning value of the control variable.
  
  """
  newControlVariable: BigInt!
  """
  The difference between the old and new control variables.
  oldControlVariable - newControlVariable
  
  """
  deltaTime: BigInt!
  """
  The timestamp at which the tuning event occurred.
  
  """
  timestamp: BigInt!
  sourceName: String
}

input Bonds_Tune_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Bonds_Market_filter
  oldControlVariable: BigInt
  oldControlVariable_not: BigInt
  oldControlVariable_gt: BigInt
  oldControlVariable_lt: BigInt
  oldControlVariable_gte: BigInt
  oldControlVariable_lte: BigInt
  oldControlVariable_in: [BigInt!]
  oldControlVariable_not_in: [BigInt!]
  newControlVariable: BigInt
  newControlVariable_not: BigInt
  newControlVariable_gt: BigInt
  newControlVariable_lt: BigInt
  newControlVariable_gte: BigInt
  newControlVariable_lte: BigInt
  newControlVariable_in: [BigInt!]
  newControlVariable_not_in: [BigInt!]
  deltaTime: BigInt
  deltaTime_not: BigInt
  deltaTime_gt: BigInt
  deltaTime_lt: BigInt
  deltaTime_gte: BigInt
  deltaTime_lte: BigInt
  deltaTime_in: [BigInt!]
  deltaTime_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_Tune_filter]
  or: [Bonds_Tune_filter]
}

enum Bonds_Tune_orderBy {
  id
  market
  market__id
  market__name
  market__type
  market__network
  market__chainId
  market__auctioneer
  market__teller
  market__marketId
  market__owner
  market__vesting
  market__start
  market__conclusion
  market__vestingType
  market__isInstantSwap
  market__hasClosed
  market__totalBondedAmount
  market__totalPayoutAmount
  market__creationBlockTimestamp
  market__callbackAddress
  market__capacity
  market__capacityInQuote
  market__minPrice
  market__price
  market__scale
  market__averageBondPrice
  market__bondsIssued
  oldControlVariable
  newControlVariable
  deltaTime
  timestamp
}

"""
A UniqueBonder record is created for each unique combination of chain, market owner, bond purchaser.

"""
type Bonds_UniqueBonder {
  """
  Unique ID for the UniqueBonder entity, in the format:
  [chainId]_[Market owner address]__[bond purchaser address]
  
  """
  id: String!
  sourceName: String
}

"""
Workaround due to no simple entity count being available.

"""
type Bonds_UniqueBonderCount {
  """
  There should be one UniqueBonderCount entry per market owner, with owner address as id.
  
  """
  id: String!
  """
  The total number of unique bonders for this token on this chain.
  
  """
  count: BigInt!
  sourceName: String
}

input Bonds_UniqueBonderCount_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_UniqueBonderCount_filter]
  or: [Bonds_UniqueBonderCount_filter]
}

enum Bonds_UniqueBonderCount_orderBy {
  id
  count
}

input Bonds_UniqueBonder_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_UniqueBonder_filter]
  or: [Bonds_UniqueBonder_filter]
}

enum Bonds_UniqueBonder_orderBy {
  id
}

"""
A UniqueTokenBonder record is created for each unique combination of chain, payout token address, bond purchaser.

"""
type Bonds_UniqueTokenBonder {
  """
  Unique ID for the UniqueTokenBonder entity, in the format:
  [chainId]_[payout token address]__[bond purchaser address]
  
  """
  id: String!
  sourceName: String
}

"""
Workaround due to no simple entity count being available.

"""
type Bonds_UniqueTokenBonderCount {
  """
  There should be one UniqueTokenBonderCount entry per token, with token address as id.
  
  """
  id: String!
  """
  The token for which bonders are being counted.
  
  """
  token: Bonds_Token!
  """
  The total number of unique bonders for this token on this chain.
  
  """
  count: BigInt!
  sourceName: String
}

input Bonds_UniqueTokenBonderCount_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Bonds_Token_filter
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_UniqueTokenBonderCount_filter]
  or: [Bonds_UniqueTokenBonderCount_filter]
}

enum Bonds_UniqueTokenBonderCount_orderBy {
  id
  token
  token__id
  token__network
  token__chainId
  token__address
  token__decimals
  token__symbol
  token__name
  token__typeName
  token__usedAsPayout
  token__usedAsQuote
  token__totalPayoutAmount
  token__purchaseCount
  count
}

input Bonds_UniqueTokenBonder_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: Bonds_BlockChangedFilter
  and: [Bonds_UniqueTokenBonder_filter]
  or: [Bonds_UniqueTokenBonder_filter]
}

enum Bonds_UniqueTokenBonder_orderBy {
  id
}

type Bonds__Block_ {
  """The hash of the block"""
  hash: Bonds_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bonds_Bytes
  sourceName: String
}

"""The type for the top-level _meta field"""
type Bonds__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: Bonds__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
  sourceName: String
}

enum SUSHISWAP_V3_Aggregation_interval {
  hour
  day
}

scalar SUSHISWAP_V3_BigDecimal

input SUSHISWAP_V3_BlockChangedFilter {
  number_gte: Int!
}

input SUSHISWAP_V3_Block_height {
  hash: SUSHISWAP_V3_Bytes
  number: Int
  number_gte: Int
}

type SUSHISWAP_V3_Bundle {
  id: ID!
  ethPriceUSD: SUSHISWAP_V3_BigDecimal!
  sourceName: String
}

input SUSHISWAP_V3_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPriceUSD: SUSHISWAP_V3_BigDecimal
  ethPriceUSD_not: SUSHISWAP_V3_BigDecimal
  ethPriceUSD_gt: SUSHISWAP_V3_BigDecimal
  ethPriceUSD_lt: SUSHISWAP_V3_BigDecimal
  ethPriceUSD_gte: SUSHISWAP_V3_BigDecimal
  ethPriceUSD_lte: SUSHISWAP_V3_BigDecimal
  ethPriceUSD_in: [SUSHISWAP_V3_BigDecimal!]
  ethPriceUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_Bundle_filter]
  or: [SUSHISWAP_V3_Bundle_filter]
}

enum SUSHISWAP_V3_Bundle_orderBy {
  id
  ethPriceUSD
}

type SUSHISWAP_V3_Burn {
  id: ID!
  transaction: SUSHISWAP_V3_Transaction!
  pool: SUSHISWAP_V3_Pool!
  token0: SUSHISWAP_V3_Token!
  token1: SUSHISWAP_V3_Token!
  timestamp: BigInt!
  owner: SUSHISWAP_V3_Bytes
  origin: SUSHISWAP_V3_Bytes!
  amount: BigInt!
  amount0: SUSHISWAP_V3_BigDecimal!
  amount1: SUSHISWAP_V3_BigDecimal!
  amountUSD: SUSHISWAP_V3_BigDecimal
  tickLower: BigInt!
  tickUpper: BigInt!
  logIndex: BigInt
  sourceName: String
}

input SUSHISWAP_V3_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: SUSHISWAP_V3_Transaction_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: SUSHISWAP_V3_Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: SUSHISWAP_V3_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: SUSHISWAP_V3_Token_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  owner: SUSHISWAP_V3_Bytes
  owner_not: SUSHISWAP_V3_Bytes
  owner_gt: SUSHISWAP_V3_Bytes
  owner_lt: SUSHISWAP_V3_Bytes
  owner_gte: SUSHISWAP_V3_Bytes
  owner_lte: SUSHISWAP_V3_Bytes
  owner_in: [SUSHISWAP_V3_Bytes!]
  owner_not_in: [SUSHISWAP_V3_Bytes!]
  owner_contains: SUSHISWAP_V3_Bytes
  owner_not_contains: SUSHISWAP_V3_Bytes
  origin: SUSHISWAP_V3_Bytes
  origin_not: SUSHISWAP_V3_Bytes
  origin_gt: SUSHISWAP_V3_Bytes
  origin_lt: SUSHISWAP_V3_Bytes
  origin_gte: SUSHISWAP_V3_Bytes
  origin_lte: SUSHISWAP_V3_Bytes
  origin_in: [SUSHISWAP_V3_Bytes!]
  origin_not_in: [SUSHISWAP_V3_Bytes!]
  origin_contains: SUSHISWAP_V3_Bytes
  origin_not_contains: SUSHISWAP_V3_Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amount0: SUSHISWAP_V3_BigDecimal
  amount0_not: SUSHISWAP_V3_BigDecimal
  amount0_gt: SUSHISWAP_V3_BigDecimal
  amount0_lt: SUSHISWAP_V3_BigDecimal
  amount0_gte: SUSHISWAP_V3_BigDecimal
  amount0_lte: SUSHISWAP_V3_BigDecimal
  amount0_in: [SUSHISWAP_V3_BigDecimal!]
  amount0_not_in: [SUSHISWAP_V3_BigDecimal!]
  amount1: SUSHISWAP_V3_BigDecimal
  amount1_not: SUSHISWAP_V3_BigDecimal
  amount1_gt: SUSHISWAP_V3_BigDecimal
  amount1_lt: SUSHISWAP_V3_BigDecimal
  amount1_gte: SUSHISWAP_V3_BigDecimal
  amount1_lte: SUSHISWAP_V3_BigDecimal
  amount1_in: [SUSHISWAP_V3_BigDecimal!]
  amount1_not_in: [SUSHISWAP_V3_BigDecimal!]
  amountUSD: SUSHISWAP_V3_BigDecimal
  amountUSD_not: SUSHISWAP_V3_BigDecimal
  amountUSD_gt: SUSHISWAP_V3_BigDecimal
  amountUSD_lt: SUSHISWAP_V3_BigDecimal
  amountUSD_gte: SUSHISWAP_V3_BigDecimal
  amountUSD_lte: SUSHISWAP_V3_BigDecimal
  amountUSD_in: [SUSHISWAP_V3_BigDecimal!]
  amountUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_Burn_filter]
  or: [SUSHISWAP_V3_Burn_filter]
}

enum SUSHISWAP_V3_Burn_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  timestamp
  owner
  origin
  amount
  amount0
  amount1
  amountUSD
  tickLower
  tickUpper
  logIndex
}

scalar SUSHISWAP_V3_Bytes

type SUSHISWAP_V3_Collect {
  id: ID!
  transaction: SUSHISWAP_V3_Transaction!
  timestamp: BigInt!
  pool: SUSHISWAP_V3_Pool!
  owner: SUSHISWAP_V3_Bytes
  amount0: SUSHISWAP_V3_BigDecimal!
  amount1: SUSHISWAP_V3_BigDecimal!
  amountUSD: SUSHISWAP_V3_BigDecimal
  tickLower: BigInt!
  tickUpper: BigInt!
  logIndex: BigInt
  sourceName: String
}

input SUSHISWAP_V3_Collect_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: SUSHISWAP_V3_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: SUSHISWAP_V3_Pool_filter
  owner: SUSHISWAP_V3_Bytes
  owner_not: SUSHISWAP_V3_Bytes
  owner_gt: SUSHISWAP_V3_Bytes
  owner_lt: SUSHISWAP_V3_Bytes
  owner_gte: SUSHISWAP_V3_Bytes
  owner_lte: SUSHISWAP_V3_Bytes
  owner_in: [SUSHISWAP_V3_Bytes!]
  owner_not_in: [SUSHISWAP_V3_Bytes!]
  owner_contains: SUSHISWAP_V3_Bytes
  owner_not_contains: SUSHISWAP_V3_Bytes
  amount0: SUSHISWAP_V3_BigDecimal
  amount0_not: SUSHISWAP_V3_BigDecimal
  amount0_gt: SUSHISWAP_V3_BigDecimal
  amount0_lt: SUSHISWAP_V3_BigDecimal
  amount0_gte: SUSHISWAP_V3_BigDecimal
  amount0_lte: SUSHISWAP_V3_BigDecimal
  amount0_in: [SUSHISWAP_V3_BigDecimal!]
  amount0_not_in: [SUSHISWAP_V3_BigDecimal!]
  amount1: SUSHISWAP_V3_BigDecimal
  amount1_not: SUSHISWAP_V3_BigDecimal
  amount1_gt: SUSHISWAP_V3_BigDecimal
  amount1_lt: SUSHISWAP_V3_BigDecimal
  amount1_gte: SUSHISWAP_V3_BigDecimal
  amount1_lte: SUSHISWAP_V3_BigDecimal
  amount1_in: [SUSHISWAP_V3_BigDecimal!]
  amount1_not_in: [SUSHISWAP_V3_BigDecimal!]
  amountUSD: SUSHISWAP_V3_BigDecimal
  amountUSD_not: SUSHISWAP_V3_BigDecimal
  amountUSD_gt: SUSHISWAP_V3_BigDecimal
  amountUSD_lt: SUSHISWAP_V3_BigDecimal
  amountUSD_gte: SUSHISWAP_V3_BigDecimal
  amountUSD_lte: SUSHISWAP_V3_BigDecimal
  amountUSD_in: [SUSHISWAP_V3_BigDecimal!]
  amountUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_Collect_filter]
  or: [SUSHISWAP_V3_Collect_filter]
}

enum SUSHISWAP_V3_Collect_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  timestamp
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  owner
  amount0
  amount1
  amountUSD
  tickLower
  tickUpper
  logIndex
}

type SUSHISWAP_V3_Factory {
  id: ID!
  poolCount: BigInt!
  txCount: BigInt!
  totalVolumeUSD: SUSHISWAP_V3_BigDecimal!
  totalVolumeETH: SUSHISWAP_V3_BigDecimal!
  totalFeesUSD: SUSHISWAP_V3_BigDecimal!
  totalFeesETH: SUSHISWAP_V3_BigDecimal!
  untrackedVolumeUSD: SUSHISWAP_V3_BigDecimal!
  totalValueLockedUSD: SUSHISWAP_V3_BigDecimal!
  totalValueLockedETH: SUSHISWAP_V3_BigDecimal!
  totalValueLockedUSDUntracked: SUSHISWAP_V3_BigDecimal!
  totalValueLockedETHUntracked: SUSHISWAP_V3_BigDecimal!
  owner: ID!
  chainId: Int!
  sourceName: String
}

input SUSHISWAP_V3_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolCount: BigInt
  poolCount_not: BigInt
  poolCount_gt: BigInt
  poolCount_lt: BigInt
  poolCount_gte: BigInt
  poolCount_lte: BigInt
  poolCount_in: [BigInt!]
  poolCount_not_in: [BigInt!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  totalVolumeUSD: SUSHISWAP_V3_BigDecimal
  totalVolumeUSD_not: SUSHISWAP_V3_BigDecimal
  totalVolumeUSD_gt: SUSHISWAP_V3_BigDecimal
  totalVolumeUSD_lt: SUSHISWAP_V3_BigDecimal
  totalVolumeUSD_gte: SUSHISWAP_V3_BigDecimal
  totalVolumeUSD_lte: SUSHISWAP_V3_BigDecimal
  totalVolumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  totalVolumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalVolumeETH: SUSHISWAP_V3_BigDecimal
  totalVolumeETH_not: SUSHISWAP_V3_BigDecimal
  totalVolumeETH_gt: SUSHISWAP_V3_BigDecimal
  totalVolumeETH_lt: SUSHISWAP_V3_BigDecimal
  totalVolumeETH_gte: SUSHISWAP_V3_BigDecimal
  totalVolumeETH_lte: SUSHISWAP_V3_BigDecimal
  totalVolumeETH_in: [SUSHISWAP_V3_BigDecimal!]
  totalVolumeETH_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalFeesUSD: SUSHISWAP_V3_BigDecimal
  totalFeesUSD_not: SUSHISWAP_V3_BigDecimal
  totalFeesUSD_gt: SUSHISWAP_V3_BigDecimal
  totalFeesUSD_lt: SUSHISWAP_V3_BigDecimal
  totalFeesUSD_gte: SUSHISWAP_V3_BigDecimal
  totalFeesUSD_lte: SUSHISWAP_V3_BigDecimal
  totalFeesUSD_in: [SUSHISWAP_V3_BigDecimal!]
  totalFeesUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalFeesETH: SUSHISWAP_V3_BigDecimal
  totalFeesETH_not: SUSHISWAP_V3_BigDecimal
  totalFeesETH_gt: SUSHISWAP_V3_BigDecimal
  totalFeesETH_lt: SUSHISWAP_V3_BigDecimal
  totalFeesETH_gte: SUSHISWAP_V3_BigDecimal
  totalFeesETH_lte: SUSHISWAP_V3_BigDecimal
  totalFeesETH_in: [SUSHISWAP_V3_BigDecimal!]
  totalFeesETH_not_in: [SUSHISWAP_V3_BigDecimal!]
  untrackedVolumeUSD: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_not: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_gt: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_lt: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_gte: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_lte: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  untrackedVolumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSD: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_not: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_gt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_lt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_gte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_lte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedETH: SUSHISWAP_V3_BigDecimal
  totalValueLockedETH_not: SUSHISWAP_V3_BigDecimal
  totalValueLockedETH_gt: SUSHISWAP_V3_BigDecimal
  totalValueLockedETH_lt: SUSHISWAP_V3_BigDecimal
  totalValueLockedETH_gte: SUSHISWAP_V3_BigDecimal
  totalValueLockedETH_lte: SUSHISWAP_V3_BigDecimal
  totalValueLockedETH_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedETH_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSDUntracked: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_not: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_gt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_lt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_gte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_lte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSDUntracked_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedETHUntracked: SUSHISWAP_V3_BigDecimal
  totalValueLockedETHUntracked_not: SUSHISWAP_V3_BigDecimal
  totalValueLockedETHUntracked_gt: SUSHISWAP_V3_BigDecimal
  totalValueLockedETHUntracked_lt: SUSHISWAP_V3_BigDecimal
  totalValueLockedETHUntracked_gte: SUSHISWAP_V3_BigDecimal
  totalValueLockedETHUntracked_lte: SUSHISWAP_V3_BigDecimal
  totalValueLockedETHUntracked_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedETHUntracked_not_in: [SUSHISWAP_V3_BigDecimal!]
  owner: ID
  owner_not: ID
  owner_gt: ID
  owner_lt: ID
  owner_gte: ID
  owner_lte: ID
  owner_in: [ID!]
  owner_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_Factory_filter]
  or: [SUSHISWAP_V3_Factory_filter]
}

enum SUSHISWAP_V3_Factory_orderBy {
  id
  poolCount
  txCount
  totalVolumeUSD
  totalVolumeETH
  totalFeesUSD
  totalFeesETH
  untrackedVolumeUSD
  totalValueLockedUSD
  totalValueLockedETH
  totalValueLockedUSDUntracked
  totalValueLockedETHUntracked
  owner
}

type SUSHISWAP_V3_Flash {
  id: ID!
  transaction: SUSHISWAP_V3_Transaction!
  timestamp: BigInt!
  pool: SUSHISWAP_V3_Pool!
  sender: SUSHISWAP_V3_Bytes!
  recipient: SUSHISWAP_V3_Bytes!
  amount0: SUSHISWAP_V3_BigDecimal!
  amount1: SUSHISWAP_V3_BigDecimal!
  amountUSD: SUSHISWAP_V3_BigDecimal!
  amount0Paid: SUSHISWAP_V3_BigDecimal!
  amount1Paid: SUSHISWAP_V3_BigDecimal!
  logIndex: BigInt
  sourceName: String
}

input SUSHISWAP_V3_Flash_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: SUSHISWAP_V3_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: SUSHISWAP_V3_Pool_filter
  sender: SUSHISWAP_V3_Bytes
  sender_not: SUSHISWAP_V3_Bytes
  sender_gt: SUSHISWAP_V3_Bytes
  sender_lt: SUSHISWAP_V3_Bytes
  sender_gte: SUSHISWAP_V3_Bytes
  sender_lte: SUSHISWAP_V3_Bytes
  sender_in: [SUSHISWAP_V3_Bytes!]
  sender_not_in: [SUSHISWAP_V3_Bytes!]
  sender_contains: SUSHISWAP_V3_Bytes
  sender_not_contains: SUSHISWAP_V3_Bytes
  recipient: SUSHISWAP_V3_Bytes
  recipient_not: SUSHISWAP_V3_Bytes
  recipient_gt: SUSHISWAP_V3_Bytes
  recipient_lt: SUSHISWAP_V3_Bytes
  recipient_gte: SUSHISWAP_V3_Bytes
  recipient_lte: SUSHISWAP_V3_Bytes
  recipient_in: [SUSHISWAP_V3_Bytes!]
  recipient_not_in: [SUSHISWAP_V3_Bytes!]
  recipient_contains: SUSHISWAP_V3_Bytes
  recipient_not_contains: SUSHISWAP_V3_Bytes
  amount0: SUSHISWAP_V3_BigDecimal
  amount0_not: SUSHISWAP_V3_BigDecimal
  amount0_gt: SUSHISWAP_V3_BigDecimal
  amount0_lt: SUSHISWAP_V3_BigDecimal
  amount0_gte: SUSHISWAP_V3_BigDecimal
  amount0_lte: SUSHISWAP_V3_BigDecimal
  amount0_in: [SUSHISWAP_V3_BigDecimal!]
  amount0_not_in: [SUSHISWAP_V3_BigDecimal!]
  amount1: SUSHISWAP_V3_BigDecimal
  amount1_not: SUSHISWAP_V3_BigDecimal
  amount1_gt: SUSHISWAP_V3_BigDecimal
  amount1_lt: SUSHISWAP_V3_BigDecimal
  amount1_gte: SUSHISWAP_V3_BigDecimal
  amount1_lte: SUSHISWAP_V3_BigDecimal
  amount1_in: [SUSHISWAP_V3_BigDecimal!]
  amount1_not_in: [SUSHISWAP_V3_BigDecimal!]
  amountUSD: SUSHISWAP_V3_BigDecimal
  amountUSD_not: SUSHISWAP_V3_BigDecimal
  amountUSD_gt: SUSHISWAP_V3_BigDecimal
  amountUSD_lt: SUSHISWAP_V3_BigDecimal
  amountUSD_gte: SUSHISWAP_V3_BigDecimal
  amountUSD_lte: SUSHISWAP_V3_BigDecimal
  amountUSD_in: [SUSHISWAP_V3_BigDecimal!]
  amountUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  amount0Paid: SUSHISWAP_V3_BigDecimal
  amount0Paid_not: SUSHISWAP_V3_BigDecimal
  amount0Paid_gt: SUSHISWAP_V3_BigDecimal
  amount0Paid_lt: SUSHISWAP_V3_BigDecimal
  amount0Paid_gte: SUSHISWAP_V3_BigDecimal
  amount0Paid_lte: SUSHISWAP_V3_BigDecimal
  amount0Paid_in: [SUSHISWAP_V3_BigDecimal!]
  amount0Paid_not_in: [SUSHISWAP_V3_BigDecimal!]
  amount1Paid: SUSHISWAP_V3_BigDecimal
  amount1Paid_not: SUSHISWAP_V3_BigDecimal
  amount1Paid_gt: SUSHISWAP_V3_BigDecimal
  amount1Paid_lt: SUSHISWAP_V3_BigDecimal
  amount1Paid_gte: SUSHISWAP_V3_BigDecimal
  amount1Paid_lte: SUSHISWAP_V3_BigDecimal
  amount1Paid_in: [SUSHISWAP_V3_BigDecimal!]
  amount1Paid_not_in: [SUSHISWAP_V3_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_Flash_filter]
  or: [SUSHISWAP_V3_Flash_filter]
}

enum SUSHISWAP_V3_Flash_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  timestamp
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  sender
  recipient
  amount0
  amount1
  amountUSD
  amount0Paid
  amount1Paid
  logIndex
}

"""
8 bytes signed integer

"""
scalar SUSHISWAP_V3_Int8

type SUSHISWAP_V3_Mint {
  id: ID!
  transaction: SUSHISWAP_V3_Transaction!
  timestamp: BigInt!
  pool: SUSHISWAP_V3_Pool!
  token0: SUSHISWAP_V3_Token!
  token1: SUSHISWAP_V3_Token!
  owner: SUSHISWAP_V3_Bytes!
  sender: SUSHISWAP_V3_Bytes
  origin: SUSHISWAP_V3_Bytes!
  amount: BigInt!
  amount0: SUSHISWAP_V3_BigDecimal!
  amount1: SUSHISWAP_V3_BigDecimal!
  amountUSD: SUSHISWAP_V3_BigDecimal
  tickLower: BigInt!
  tickUpper: BigInt!
  logIndex: BigInt
  sourceName: String
}

input SUSHISWAP_V3_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: SUSHISWAP_V3_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: SUSHISWAP_V3_Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: SUSHISWAP_V3_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: SUSHISWAP_V3_Token_filter
  owner: SUSHISWAP_V3_Bytes
  owner_not: SUSHISWAP_V3_Bytes
  owner_gt: SUSHISWAP_V3_Bytes
  owner_lt: SUSHISWAP_V3_Bytes
  owner_gte: SUSHISWAP_V3_Bytes
  owner_lte: SUSHISWAP_V3_Bytes
  owner_in: [SUSHISWAP_V3_Bytes!]
  owner_not_in: [SUSHISWAP_V3_Bytes!]
  owner_contains: SUSHISWAP_V3_Bytes
  owner_not_contains: SUSHISWAP_V3_Bytes
  sender: SUSHISWAP_V3_Bytes
  sender_not: SUSHISWAP_V3_Bytes
  sender_gt: SUSHISWAP_V3_Bytes
  sender_lt: SUSHISWAP_V3_Bytes
  sender_gte: SUSHISWAP_V3_Bytes
  sender_lte: SUSHISWAP_V3_Bytes
  sender_in: [SUSHISWAP_V3_Bytes!]
  sender_not_in: [SUSHISWAP_V3_Bytes!]
  sender_contains: SUSHISWAP_V3_Bytes
  sender_not_contains: SUSHISWAP_V3_Bytes
  origin: SUSHISWAP_V3_Bytes
  origin_not: SUSHISWAP_V3_Bytes
  origin_gt: SUSHISWAP_V3_Bytes
  origin_lt: SUSHISWAP_V3_Bytes
  origin_gte: SUSHISWAP_V3_Bytes
  origin_lte: SUSHISWAP_V3_Bytes
  origin_in: [SUSHISWAP_V3_Bytes!]
  origin_not_in: [SUSHISWAP_V3_Bytes!]
  origin_contains: SUSHISWAP_V3_Bytes
  origin_not_contains: SUSHISWAP_V3_Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amount0: SUSHISWAP_V3_BigDecimal
  amount0_not: SUSHISWAP_V3_BigDecimal
  amount0_gt: SUSHISWAP_V3_BigDecimal
  amount0_lt: SUSHISWAP_V3_BigDecimal
  amount0_gte: SUSHISWAP_V3_BigDecimal
  amount0_lte: SUSHISWAP_V3_BigDecimal
  amount0_in: [SUSHISWAP_V3_BigDecimal!]
  amount0_not_in: [SUSHISWAP_V3_BigDecimal!]
  amount1: SUSHISWAP_V3_BigDecimal
  amount1_not: SUSHISWAP_V3_BigDecimal
  amount1_gt: SUSHISWAP_V3_BigDecimal
  amount1_lt: SUSHISWAP_V3_BigDecimal
  amount1_gte: SUSHISWAP_V3_BigDecimal
  amount1_lte: SUSHISWAP_V3_BigDecimal
  amount1_in: [SUSHISWAP_V3_BigDecimal!]
  amount1_not_in: [SUSHISWAP_V3_BigDecimal!]
  amountUSD: SUSHISWAP_V3_BigDecimal
  amountUSD_not: SUSHISWAP_V3_BigDecimal
  amountUSD_gt: SUSHISWAP_V3_BigDecimal
  amountUSD_lt: SUSHISWAP_V3_BigDecimal
  amountUSD_gte: SUSHISWAP_V3_BigDecimal
  amountUSD_lte: SUSHISWAP_V3_BigDecimal
  amountUSD_in: [SUSHISWAP_V3_BigDecimal!]
  amountUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_Mint_filter]
  or: [SUSHISWAP_V3_Mint_filter]
}

enum SUSHISWAP_V3_Mint_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  timestamp
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  owner
  sender
  origin
  amount
  amount0
  amount1
  amountUSD
  tickLower
  tickUpper
  logIndex
}

"""Defines the order direction, either ascending or descending"""
enum SUSHISWAP_V3_OrderDirection {
  asc
  desc
}

type SUSHISWAP_V3_Pool {
  id: ID!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  token0: SUSHISWAP_V3_Token!
  token1: SUSHISWAP_V3_Token!
  feeTier: BigInt!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  feeGrowthGlobal0X128: BigInt!
  feeGrowthGlobal1X128: BigInt!
  token0Price: SUSHISWAP_V3_BigDecimal!
  token1Price: SUSHISWAP_V3_BigDecimal!
  tick: BigInt
  observationIndex: BigInt!
  volumeToken0: SUSHISWAP_V3_BigDecimal!
  volumeToken1: SUSHISWAP_V3_BigDecimal!
  volumeUSD: SUSHISWAP_V3_BigDecimal!
  untrackedVolumeUSD: SUSHISWAP_V3_BigDecimal!
  feesUSD: SUSHISWAP_V3_BigDecimal!
  txCount: BigInt!
  collectedFeesToken0: SUSHISWAP_V3_BigDecimal!
  collectedFeesToken1: SUSHISWAP_V3_BigDecimal!
  collectedFeesUSD: SUSHISWAP_V3_BigDecimal!
  totalValueLockedToken0: SUSHISWAP_V3_BigDecimal!
  totalValueLockedToken1: SUSHISWAP_V3_BigDecimal!
  totalValueLockedETH: SUSHISWAP_V3_BigDecimal!
  totalValueLockedUSD: SUSHISWAP_V3_BigDecimal!
  totalValueLockedUSDUntracked: SUSHISWAP_V3_BigDecimal!
  liquidityProviderCount: BigInt!
  poolHourData(skip: Int = 0, first: Int = 100, orderBy: SUSHISWAP_V3_PoolHourData_orderBy, orderDirection: SUSHISWAP_V3_OrderDirection, where: SUSHISWAP_V3_PoolHourData_filter): [SUSHISWAP_V3_PoolHourData!]!
  poolDayData(skip: Int = 0, first: Int = 100, orderBy: SUSHISWAP_V3_PoolDayData_orderBy, orderDirection: SUSHISWAP_V3_OrderDirection, where: SUSHISWAP_V3_PoolDayData_filter): [SUSHISWAP_V3_PoolDayData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: SUSHISWAP_V3_Mint_orderBy, orderDirection: SUSHISWAP_V3_OrderDirection, where: SUSHISWAP_V3_Mint_filter): [SUSHISWAP_V3_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: SUSHISWAP_V3_Burn_orderBy, orderDirection: SUSHISWAP_V3_OrderDirection, where: SUSHISWAP_V3_Burn_filter): [SUSHISWAP_V3_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: SUSHISWAP_V3_Swap_orderBy, orderDirection: SUSHISWAP_V3_OrderDirection, where: SUSHISWAP_V3_Swap_filter): [SUSHISWAP_V3_Swap!]!
  collects(skip: Int = 0, first: Int = 100, orderBy: SUSHISWAP_V3_Collect_orderBy, orderDirection: SUSHISWAP_V3_OrderDirection, where: SUSHISWAP_V3_Collect_filter): [SUSHISWAP_V3_Collect!]!
  ticks(skip: Int = 0, first: Int = 100, orderBy: SUSHISWAP_V3_Tick_orderBy, orderDirection: SUSHISWAP_V3_OrderDirection, where: SUSHISWAP_V3_Tick_filter): [SUSHISWAP_V3_Tick!]!
  sourceName: String
}

type SUSHISWAP_V3_PoolDayData {
  id: ID!
  date: Int!
  pool: SUSHISWAP_V3_Pool!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  token0Price: SUSHISWAP_V3_BigDecimal!
  token1Price: SUSHISWAP_V3_BigDecimal!
  tick: BigInt
  feeGrowthGlobal0X128: BigInt!
  feeGrowthGlobal1X128: BigInt!
  tvlUSD: SUSHISWAP_V3_BigDecimal!
  volumeToken0: SUSHISWAP_V3_BigDecimal!
  volumeToken1: SUSHISWAP_V3_BigDecimal!
  volumeUSD: SUSHISWAP_V3_BigDecimal!
  feesUSD: SUSHISWAP_V3_BigDecimal!
  txCount: BigInt!
  open: SUSHISWAP_V3_BigDecimal!
  high: SUSHISWAP_V3_BigDecimal!
  low: SUSHISWAP_V3_BigDecimal!
  close: SUSHISWAP_V3_BigDecimal!
  sourceName: String
}

input SUSHISWAP_V3_PoolDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: SUSHISWAP_V3_Pool_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  sqrtPrice: BigInt
  sqrtPrice_not: BigInt
  sqrtPrice_gt: BigInt
  sqrtPrice_lt: BigInt
  sqrtPrice_gte: BigInt
  sqrtPrice_lte: BigInt
  sqrtPrice_in: [BigInt!]
  sqrtPrice_not_in: [BigInt!]
  token0Price: SUSHISWAP_V3_BigDecimal
  token0Price_not: SUSHISWAP_V3_BigDecimal
  token0Price_gt: SUSHISWAP_V3_BigDecimal
  token0Price_lt: SUSHISWAP_V3_BigDecimal
  token0Price_gte: SUSHISWAP_V3_BigDecimal
  token0Price_lte: SUSHISWAP_V3_BigDecimal
  token0Price_in: [SUSHISWAP_V3_BigDecimal!]
  token0Price_not_in: [SUSHISWAP_V3_BigDecimal!]
  token1Price: SUSHISWAP_V3_BigDecimal
  token1Price_not: SUSHISWAP_V3_BigDecimal
  token1Price_gt: SUSHISWAP_V3_BigDecimal
  token1Price_lt: SUSHISWAP_V3_BigDecimal
  token1Price_gte: SUSHISWAP_V3_BigDecimal
  token1Price_lte: SUSHISWAP_V3_BigDecimal
  token1Price_in: [SUSHISWAP_V3_BigDecimal!]
  token1Price_not_in: [SUSHISWAP_V3_BigDecimal!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  feeGrowthGlobal0X128: BigInt
  feeGrowthGlobal0X128_not: BigInt
  feeGrowthGlobal0X128_gt: BigInt
  feeGrowthGlobal0X128_lt: BigInt
  feeGrowthGlobal0X128_gte: BigInt
  feeGrowthGlobal0X128_lte: BigInt
  feeGrowthGlobal0X128_in: [BigInt!]
  feeGrowthGlobal0X128_not_in: [BigInt!]
  feeGrowthGlobal1X128: BigInt
  feeGrowthGlobal1X128_not: BigInt
  feeGrowthGlobal1X128_gt: BigInt
  feeGrowthGlobal1X128_lt: BigInt
  feeGrowthGlobal1X128_gte: BigInt
  feeGrowthGlobal1X128_lte: BigInt
  feeGrowthGlobal1X128_in: [BigInt!]
  feeGrowthGlobal1X128_not_in: [BigInt!]
  tvlUSD: SUSHISWAP_V3_BigDecimal
  tvlUSD_not: SUSHISWAP_V3_BigDecimal
  tvlUSD_gt: SUSHISWAP_V3_BigDecimal
  tvlUSD_lt: SUSHISWAP_V3_BigDecimal
  tvlUSD_gte: SUSHISWAP_V3_BigDecimal
  tvlUSD_lte: SUSHISWAP_V3_BigDecimal
  tvlUSD_in: [SUSHISWAP_V3_BigDecimal!]
  tvlUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken0: SUSHISWAP_V3_BigDecimal
  volumeToken0_not: SUSHISWAP_V3_BigDecimal
  volumeToken0_gt: SUSHISWAP_V3_BigDecimal
  volumeToken0_lt: SUSHISWAP_V3_BigDecimal
  volumeToken0_gte: SUSHISWAP_V3_BigDecimal
  volumeToken0_lte: SUSHISWAP_V3_BigDecimal
  volumeToken0_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken1: SUSHISWAP_V3_BigDecimal
  volumeToken1_not: SUSHISWAP_V3_BigDecimal
  volumeToken1_gt: SUSHISWAP_V3_BigDecimal
  volumeToken1_lt: SUSHISWAP_V3_BigDecimal
  volumeToken1_gte: SUSHISWAP_V3_BigDecimal
  volumeToken1_lte: SUSHISWAP_V3_BigDecimal
  volumeToken1_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD: SUSHISWAP_V3_BigDecimal
  volumeUSD_not: SUSHISWAP_V3_BigDecimal
  volumeUSD_gt: SUSHISWAP_V3_BigDecimal
  volumeUSD_lt: SUSHISWAP_V3_BigDecimal
  volumeUSD_gte: SUSHISWAP_V3_BigDecimal
  volumeUSD_lte: SUSHISWAP_V3_BigDecimal
  volumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD: SUSHISWAP_V3_BigDecimal
  feesUSD_not: SUSHISWAP_V3_BigDecimal
  feesUSD_gt: SUSHISWAP_V3_BigDecimal
  feesUSD_lt: SUSHISWAP_V3_BigDecimal
  feesUSD_gte: SUSHISWAP_V3_BigDecimal
  feesUSD_lte: SUSHISWAP_V3_BigDecimal
  feesUSD_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  open: SUSHISWAP_V3_BigDecimal
  open_not: SUSHISWAP_V3_BigDecimal
  open_gt: SUSHISWAP_V3_BigDecimal
  open_lt: SUSHISWAP_V3_BigDecimal
  open_gte: SUSHISWAP_V3_BigDecimal
  open_lte: SUSHISWAP_V3_BigDecimal
  open_in: [SUSHISWAP_V3_BigDecimal!]
  open_not_in: [SUSHISWAP_V3_BigDecimal!]
  high: SUSHISWAP_V3_BigDecimal
  high_not: SUSHISWAP_V3_BigDecimal
  high_gt: SUSHISWAP_V3_BigDecimal
  high_lt: SUSHISWAP_V3_BigDecimal
  high_gte: SUSHISWAP_V3_BigDecimal
  high_lte: SUSHISWAP_V3_BigDecimal
  high_in: [SUSHISWAP_V3_BigDecimal!]
  high_not_in: [SUSHISWAP_V3_BigDecimal!]
  low: SUSHISWAP_V3_BigDecimal
  low_not: SUSHISWAP_V3_BigDecimal
  low_gt: SUSHISWAP_V3_BigDecimal
  low_lt: SUSHISWAP_V3_BigDecimal
  low_gte: SUSHISWAP_V3_BigDecimal
  low_lte: SUSHISWAP_V3_BigDecimal
  low_in: [SUSHISWAP_V3_BigDecimal!]
  low_not_in: [SUSHISWAP_V3_BigDecimal!]
  close: SUSHISWAP_V3_BigDecimal
  close_not: SUSHISWAP_V3_BigDecimal
  close_gt: SUSHISWAP_V3_BigDecimal
  close_lt: SUSHISWAP_V3_BigDecimal
  close_gte: SUSHISWAP_V3_BigDecimal
  close_lte: SUSHISWAP_V3_BigDecimal
  close_in: [SUSHISWAP_V3_BigDecimal!]
  close_not_in: [SUSHISWAP_V3_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_PoolDayData_filter]
  or: [SUSHISWAP_V3_PoolDayData_filter]
}

enum SUSHISWAP_V3_PoolDayData_orderBy {
  id
  date
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  liquidity
  sqrtPrice
  token0Price
  token1Price
  tick
  feeGrowthGlobal0X128
  feeGrowthGlobal1X128
  tvlUSD
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
  txCount
  open
  high
  low
  close
}

type SUSHISWAP_V3_PoolHourData {
  id: ID!
  periodStartUnix: Int!
  pool: SUSHISWAP_V3_Pool!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  token0Price: SUSHISWAP_V3_BigDecimal!
  token1Price: SUSHISWAP_V3_BigDecimal!
  tick: BigInt
  feeGrowthGlobal0X128: BigInt!
  feeGrowthGlobal1X128: BigInt!
  tvlUSD: SUSHISWAP_V3_BigDecimal!
  volumeToken0: SUSHISWAP_V3_BigDecimal!
  volumeToken1: SUSHISWAP_V3_BigDecimal!
  volumeUSD: SUSHISWAP_V3_BigDecimal!
  feesUSD: SUSHISWAP_V3_BigDecimal!
  txCount: BigInt!
  open: SUSHISWAP_V3_BigDecimal!
  high: SUSHISWAP_V3_BigDecimal!
  low: SUSHISWAP_V3_BigDecimal!
  close: SUSHISWAP_V3_BigDecimal!
  sourceName: String
}

input SUSHISWAP_V3_PoolHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  periodStartUnix: Int
  periodStartUnix_not: Int
  periodStartUnix_gt: Int
  periodStartUnix_lt: Int
  periodStartUnix_gte: Int
  periodStartUnix_lte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: SUSHISWAP_V3_Pool_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  sqrtPrice: BigInt
  sqrtPrice_not: BigInt
  sqrtPrice_gt: BigInt
  sqrtPrice_lt: BigInt
  sqrtPrice_gte: BigInt
  sqrtPrice_lte: BigInt
  sqrtPrice_in: [BigInt!]
  sqrtPrice_not_in: [BigInt!]
  token0Price: SUSHISWAP_V3_BigDecimal
  token0Price_not: SUSHISWAP_V3_BigDecimal
  token0Price_gt: SUSHISWAP_V3_BigDecimal
  token0Price_lt: SUSHISWAP_V3_BigDecimal
  token0Price_gte: SUSHISWAP_V3_BigDecimal
  token0Price_lte: SUSHISWAP_V3_BigDecimal
  token0Price_in: [SUSHISWAP_V3_BigDecimal!]
  token0Price_not_in: [SUSHISWAP_V3_BigDecimal!]
  token1Price: SUSHISWAP_V3_BigDecimal
  token1Price_not: SUSHISWAP_V3_BigDecimal
  token1Price_gt: SUSHISWAP_V3_BigDecimal
  token1Price_lt: SUSHISWAP_V3_BigDecimal
  token1Price_gte: SUSHISWAP_V3_BigDecimal
  token1Price_lte: SUSHISWAP_V3_BigDecimal
  token1Price_in: [SUSHISWAP_V3_BigDecimal!]
  token1Price_not_in: [SUSHISWAP_V3_BigDecimal!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  feeGrowthGlobal0X128: BigInt
  feeGrowthGlobal0X128_not: BigInt
  feeGrowthGlobal0X128_gt: BigInt
  feeGrowthGlobal0X128_lt: BigInt
  feeGrowthGlobal0X128_gte: BigInt
  feeGrowthGlobal0X128_lte: BigInt
  feeGrowthGlobal0X128_in: [BigInt!]
  feeGrowthGlobal0X128_not_in: [BigInt!]
  feeGrowthGlobal1X128: BigInt
  feeGrowthGlobal1X128_not: BigInt
  feeGrowthGlobal1X128_gt: BigInt
  feeGrowthGlobal1X128_lt: BigInt
  feeGrowthGlobal1X128_gte: BigInt
  feeGrowthGlobal1X128_lte: BigInt
  feeGrowthGlobal1X128_in: [BigInt!]
  feeGrowthGlobal1X128_not_in: [BigInt!]
  tvlUSD: SUSHISWAP_V3_BigDecimal
  tvlUSD_not: SUSHISWAP_V3_BigDecimal
  tvlUSD_gt: SUSHISWAP_V3_BigDecimal
  tvlUSD_lt: SUSHISWAP_V3_BigDecimal
  tvlUSD_gte: SUSHISWAP_V3_BigDecimal
  tvlUSD_lte: SUSHISWAP_V3_BigDecimal
  tvlUSD_in: [SUSHISWAP_V3_BigDecimal!]
  tvlUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken0: SUSHISWAP_V3_BigDecimal
  volumeToken0_not: SUSHISWAP_V3_BigDecimal
  volumeToken0_gt: SUSHISWAP_V3_BigDecimal
  volumeToken0_lt: SUSHISWAP_V3_BigDecimal
  volumeToken0_gte: SUSHISWAP_V3_BigDecimal
  volumeToken0_lte: SUSHISWAP_V3_BigDecimal
  volumeToken0_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken1: SUSHISWAP_V3_BigDecimal
  volumeToken1_not: SUSHISWAP_V3_BigDecimal
  volumeToken1_gt: SUSHISWAP_V3_BigDecimal
  volumeToken1_lt: SUSHISWAP_V3_BigDecimal
  volumeToken1_gte: SUSHISWAP_V3_BigDecimal
  volumeToken1_lte: SUSHISWAP_V3_BigDecimal
  volumeToken1_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD: SUSHISWAP_V3_BigDecimal
  volumeUSD_not: SUSHISWAP_V3_BigDecimal
  volumeUSD_gt: SUSHISWAP_V3_BigDecimal
  volumeUSD_lt: SUSHISWAP_V3_BigDecimal
  volumeUSD_gte: SUSHISWAP_V3_BigDecimal
  volumeUSD_lte: SUSHISWAP_V3_BigDecimal
  volumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD: SUSHISWAP_V3_BigDecimal
  feesUSD_not: SUSHISWAP_V3_BigDecimal
  feesUSD_gt: SUSHISWAP_V3_BigDecimal
  feesUSD_lt: SUSHISWAP_V3_BigDecimal
  feesUSD_gte: SUSHISWAP_V3_BigDecimal
  feesUSD_lte: SUSHISWAP_V3_BigDecimal
  feesUSD_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  open: SUSHISWAP_V3_BigDecimal
  open_not: SUSHISWAP_V3_BigDecimal
  open_gt: SUSHISWAP_V3_BigDecimal
  open_lt: SUSHISWAP_V3_BigDecimal
  open_gte: SUSHISWAP_V3_BigDecimal
  open_lte: SUSHISWAP_V3_BigDecimal
  open_in: [SUSHISWAP_V3_BigDecimal!]
  open_not_in: [SUSHISWAP_V3_BigDecimal!]
  high: SUSHISWAP_V3_BigDecimal
  high_not: SUSHISWAP_V3_BigDecimal
  high_gt: SUSHISWAP_V3_BigDecimal
  high_lt: SUSHISWAP_V3_BigDecimal
  high_gte: SUSHISWAP_V3_BigDecimal
  high_lte: SUSHISWAP_V3_BigDecimal
  high_in: [SUSHISWAP_V3_BigDecimal!]
  high_not_in: [SUSHISWAP_V3_BigDecimal!]
  low: SUSHISWAP_V3_BigDecimal
  low_not: SUSHISWAP_V3_BigDecimal
  low_gt: SUSHISWAP_V3_BigDecimal
  low_lt: SUSHISWAP_V3_BigDecimal
  low_gte: SUSHISWAP_V3_BigDecimal
  low_lte: SUSHISWAP_V3_BigDecimal
  low_in: [SUSHISWAP_V3_BigDecimal!]
  low_not_in: [SUSHISWAP_V3_BigDecimal!]
  close: SUSHISWAP_V3_BigDecimal
  close_not: SUSHISWAP_V3_BigDecimal
  close_gt: SUSHISWAP_V3_BigDecimal
  close_lt: SUSHISWAP_V3_BigDecimal
  close_gte: SUSHISWAP_V3_BigDecimal
  close_lte: SUSHISWAP_V3_BigDecimal
  close_in: [SUSHISWAP_V3_BigDecimal!]
  close_not_in: [SUSHISWAP_V3_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_PoolHourData_filter]
  or: [SUSHISWAP_V3_PoolHourData_filter]
}

enum SUSHISWAP_V3_PoolHourData_orderBy {
  id
  periodStartUnix
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  liquidity
  sqrtPrice
  token0Price
  token1Price
  tick
  feeGrowthGlobal0X128
  feeGrowthGlobal1X128
  tvlUSD
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
  txCount
  open
  high
  low
  close
}

input SUSHISWAP_V3_Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: SUSHISWAP_V3_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: SUSHISWAP_V3_Token_filter
  feeTier: BigInt
  feeTier_not: BigInt
  feeTier_gt: BigInt
  feeTier_lt: BigInt
  feeTier_gte: BigInt
  feeTier_lte: BigInt
  feeTier_in: [BigInt!]
  feeTier_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  sqrtPrice: BigInt
  sqrtPrice_not: BigInt
  sqrtPrice_gt: BigInt
  sqrtPrice_lt: BigInt
  sqrtPrice_gte: BigInt
  sqrtPrice_lte: BigInt
  sqrtPrice_in: [BigInt!]
  sqrtPrice_not_in: [BigInt!]
  feeGrowthGlobal0X128: BigInt
  feeGrowthGlobal0X128_not: BigInt
  feeGrowthGlobal0X128_gt: BigInt
  feeGrowthGlobal0X128_lt: BigInt
  feeGrowthGlobal0X128_gte: BigInt
  feeGrowthGlobal0X128_lte: BigInt
  feeGrowthGlobal0X128_in: [BigInt!]
  feeGrowthGlobal0X128_not_in: [BigInt!]
  feeGrowthGlobal1X128: BigInt
  feeGrowthGlobal1X128_not: BigInt
  feeGrowthGlobal1X128_gt: BigInt
  feeGrowthGlobal1X128_lt: BigInt
  feeGrowthGlobal1X128_gte: BigInt
  feeGrowthGlobal1X128_lte: BigInt
  feeGrowthGlobal1X128_in: [BigInt!]
  feeGrowthGlobal1X128_not_in: [BigInt!]
  token0Price: SUSHISWAP_V3_BigDecimal
  token0Price_not: SUSHISWAP_V3_BigDecimal
  token0Price_gt: SUSHISWAP_V3_BigDecimal
  token0Price_lt: SUSHISWAP_V3_BigDecimal
  token0Price_gte: SUSHISWAP_V3_BigDecimal
  token0Price_lte: SUSHISWAP_V3_BigDecimal
  token0Price_in: [SUSHISWAP_V3_BigDecimal!]
  token0Price_not_in: [SUSHISWAP_V3_BigDecimal!]
  token1Price: SUSHISWAP_V3_BigDecimal
  token1Price_not: SUSHISWAP_V3_BigDecimal
  token1Price_gt: SUSHISWAP_V3_BigDecimal
  token1Price_lt: SUSHISWAP_V3_BigDecimal
  token1Price_gte: SUSHISWAP_V3_BigDecimal
  token1Price_lte: SUSHISWAP_V3_BigDecimal
  token1Price_in: [SUSHISWAP_V3_BigDecimal!]
  token1Price_not_in: [SUSHISWAP_V3_BigDecimal!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  observationIndex: BigInt
  observationIndex_not: BigInt
  observationIndex_gt: BigInt
  observationIndex_lt: BigInt
  observationIndex_gte: BigInt
  observationIndex_lte: BigInt
  observationIndex_in: [BigInt!]
  observationIndex_not_in: [BigInt!]
  volumeToken0: SUSHISWAP_V3_BigDecimal
  volumeToken0_not: SUSHISWAP_V3_BigDecimal
  volumeToken0_gt: SUSHISWAP_V3_BigDecimal
  volumeToken0_lt: SUSHISWAP_V3_BigDecimal
  volumeToken0_gte: SUSHISWAP_V3_BigDecimal
  volumeToken0_lte: SUSHISWAP_V3_BigDecimal
  volumeToken0_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken1: SUSHISWAP_V3_BigDecimal
  volumeToken1_not: SUSHISWAP_V3_BigDecimal
  volumeToken1_gt: SUSHISWAP_V3_BigDecimal
  volumeToken1_lt: SUSHISWAP_V3_BigDecimal
  volumeToken1_gte: SUSHISWAP_V3_BigDecimal
  volumeToken1_lte: SUSHISWAP_V3_BigDecimal
  volumeToken1_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD: SUSHISWAP_V3_BigDecimal
  volumeUSD_not: SUSHISWAP_V3_BigDecimal
  volumeUSD_gt: SUSHISWAP_V3_BigDecimal
  volumeUSD_lt: SUSHISWAP_V3_BigDecimal
  volumeUSD_gte: SUSHISWAP_V3_BigDecimal
  volumeUSD_lte: SUSHISWAP_V3_BigDecimal
  volumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  untrackedVolumeUSD: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_not: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_gt: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_lt: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_gte: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_lte: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  untrackedVolumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD: SUSHISWAP_V3_BigDecimal
  feesUSD_not: SUSHISWAP_V3_BigDecimal
  feesUSD_gt: SUSHISWAP_V3_BigDecimal
  feesUSD_lt: SUSHISWAP_V3_BigDecimal
  feesUSD_gte: SUSHISWAP_V3_BigDecimal
  feesUSD_lte: SUSHISWAP_V3_BigDecimal
  feesUSD_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  collectedFeesToken0: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_not: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_gt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_lt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_gte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_lte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken1: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_not: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_gt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_lt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_gte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_lte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesUSD: SUSHISWAP_V3_BigDecimal
  collectedFeesUSD_not: SUSHISWAP_V3_BigDecimal
  collectedFeesUSD_gt: SUSHISWAP_V3_BigDecimal
  collectedFeesUSD_lt: SUSHISWAP_V3_BigDecimal
  collectedFeesUSD_gte: SUSHISWAP_V3_BigDecimal
  collectedFeesUSD_lte: SUSHISWAP_V3_BigDecimal
  collectedFeesUSD_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedToken0: SUSHISWAP_V3_BigDecimal
  totalValueLockedToken0_not: SUSHISWAP_V3_BigDecimal
  totalValueLockedToken0_gt: SUSHISWAP_V3_BigDecimal
  totalValueLockedToken0_lt: SUSHISWAP_V3_BigDecimal
  totalValueLockedToken0_gte: SUSHISWAP_V3_BigDecimal
  totalValueLockedToken0_lte: SUSHISWAP_V3_BigDecimal
  totalValueLockedToken0_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedToken1: SUSHISWAP_V3_BigDecimal
  totalValueLockedToken1_not: SUSHISWAP_V3_BigDecimal
  totalValueLockedToken1_gt: SUSHISWAP_V3_BigDecimal
  totalValueLockedToken1_lt: SUSHISWAP_V3_BigDecimal
  totalValueLockedToken1_gte: SUSHISWAP_V3_BigDecimal
  totalValueLockedToken1_lte: SUSHISWAP_V3_BigDecimal
  totalValueLockedToken1_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedETH: SUSHISWAP_V3_BigDecimal
  totalValueLockedETH_not: SUSHISWAP_V3_BigDecimal
  totalValueLockedETH_gt: SUSHISWAP_V3_BigDecimal
  totalValueLockedETH_lt: SUSHISWAP_V3_BigDecimal
  totalValueLockedETH_gte: SUSHISWAP_V3_BigDecimal
  totalValueLockedETH_lte: SUSHISWAP_V3_BigDecimal
  totalValueLockedETH_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedETH_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSD: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_not: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_gt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_lt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_gte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_lte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSDUntracked: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_not: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_gt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_lt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_gte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_lte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSDUntracked_not_in: [SUSHISWAP_V3_BigDecimal!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  poolHourData_: SUSHISWAP_V3_PoolHourData_filter
  poolDayData_: SUSHISWAP_V3_PoolDayData_filter
  mints_: SUSHISWAP_V3_Mint_filter
  burns_: SUSHISWAP_V3_Burn_filter
  swaps_: SUSHISWAP_V3_Swap_filter
  collects_: SUSHISWAP_V3_Collect_filter
  ticks_: SUSHISWAP_V3_Tick_filter
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_Pool_filter]
  or: [SUSHISWAP_V3_Pool_filter]
}

enum SUSHISWAP_V3_Pool_orderBy {
  id
  createdAtTimestamp
  createdAtBlockNumber
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  feeTier
  liquidity
  sqrtPrice
  feeGrowthGlobal0X128
  feeGrowthGlobal1X128
  token0Price
  token1Price
  tick
  observationIndex
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  feesUSD
  txCount
  collectedFeesToken0
  collectedFeesToken1
  collectedFeesUSD
  totalValueLockedToken0
  totalValueLockedToken1
  totalValueLockedETH
  totalValueLockedUSD
  totalValueLockedUSDUntracked
  liquidityProviderCount
  poolHourData
  poolDayData
  mints
  burns
  swaps
  collects
  ticks
}

type SUSHISWAP_V3_Position {
  id: ID!
  owner: SUSHISWAP_V3_Bytes!
  pool: SUSHISWAP_V3_Pool!
  token0: SUSHISWAP_V3_Token!
  token1: SUSHISWAP_V3_Token!
  tickLower: SUSHISWAP_V3_Tick!
  tickUpper: SUSHISWAP_V3_Tick!
  liquidity: BigInt!
  depositedToken0: SUSHISWAP_V3_BigDecimal!
  depositedToken1: SUSHISWAP_V3_BigDecimal!
  withdrawnToken0: SUSHISWAP_V3_BigDecimal!
  withdrawnToken1: SUSHISWAP_V3_BigDecimal!
  collectedFeesToken0: SUSHISWAP_V3_BigDecimal!
  collectedFeesToken1: SUSHISWAP_V3_BigDecimal!
  transaction: SUSHISWAP_V3_Transaction!
  feeGrowthInside0LastX128: BigInt!
  feeGrowthInside1LastX128: BigInt!
  sourceName: String
}

type SUSHISWAP_V3_PositionSnapshot {
  id: ID!
  owner: SUSHISWAP_V3_Bytes!
  pool: SUSHISWAP_V3_Pool!
  position: SUSHISWAP_V3_Position!
  blockNumber: BigInt!
  timestamp: BigInt!
  liquidity: BigInt!
  depositedToken0: SUSHISWAP_V3_BigDecimal!
  depositedToken1: SUSHISWAP_V3_BigDecimal!
  withdrawnToken0: SUSHISWAP_V3_BigDecimal!
  withdrawnToken1: SUSHISWAP_V3_BigDecimal!
  collectedFeesToken0: SUSHISWAP_V3_BigDecimal!
  collectedFeesToken1: SUSHISWAP_V3_BigDecimal!
  transaction: SUSHISWAP_V3_Transaction!
  feeGrowthInside0LastX128: BigInt!
  feeGrowthInside1LastX128: BigInt!
  sourceName: String
}

input SUSHISWAP_V3_PositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: SUSHISWAP_V3_Bytes
  owner_not: SUSHISWAP_V3_Bytes
  owner_gt: SUSHISWAP_V3_Bytes
  owner_lt: SUSHISWAP_V3_Bytes
  owner_gte: SUSHISWAP_V3_Bytes
  owner_lte: SUSHISWAP_V3_Bytes
  owner_in: [SUSHISWAP_V3_Bytes!]
  owner_not_in: [SUSHISWAP_V3_Bytes!]
  owner_contains: SUSHISWAP_V3_Bytes
  owner_not_contains: SUSHISWAP_V3_Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: SUSHISWAP_V3_Pool_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: SUSHISWAP_V3_Position_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  depositedToken0: SUSHISWAP_V3_BigDecimal
  depositedToken0_not: SUSHISWAP_V3_BigDecimal
  depositedToken0_gt: SUSHISWAP_V3_BigDecimal
  depositedToken0_lt: SUSHISWAP_V3_BigDecimal
  depositedToken0_gte: SUSHISWAP_V3_BigDecimal
  depositedToken0_lte: SUSHISWAP_V3_BigDecimal
  depositedToken0_in: [SUSHISWAP_V3_BigDecimal!]
  depositedToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  depositedToken1: SUSHISWAP_V3_BigDecimal
  depositedToken1_not: SUSHISWAP_V3_BigDecimal
  depositedToken1_gt: SUSHISWAP_V3_BigDecimal
  depositedToken1_lt: SUSHISWAP_V3_BigDecimal
  depositedToken1_gte: SUSHISWAP_V3_BigDecimal
  depositedToken1_lte: SUSHISWAP_V3_BigDecimal
  depositedToken1_in: [SUSHISWAP_V3_BigDecimal!]
  depositedToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  withdrawnToken0: SUSHISWAP_V3_BigDecimal
  withdrawnToken0_not: SUSHISWAP_V3_BigDecimal
  withdrawnToken0_gt: SUSHISWAP_V3_BigDecimal
  withdrawnToken0_lt: SUSHISWAP_V3_BigDecimal
  withdrawnToken0_gte: SUSHISWAP_V3_BigDecimal
  withdrawnToken0_lte: SUSHISWAP_V3_BigDecimal
  withdrawnToken0_in: [SUSHISWAP_V3_BigDecimal!]
  withdrawnToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  withdrawnToken1: SUSHISWAP_V3_BigDecimal
  withdrawnToken1_not: SUSHISWAP_V3_BigDecimal
  withdrawnToken1_gt: SUSHISWAP_V3_BigDecimal
  withdrawnToken1_lt: SUSHISWAP_V3_BigDecimal
  withdrawnToken1_gte: SUSHISWAP_V3_BigDecimal
  withdrawnToken1_lte: SUSHISWAP_V3_BigDecimal
  withdrawnToken1_in: [SUSHISWAP_V3_BigDecimal!]
  withdrawnToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken0: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_not: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_gt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_lt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_gte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_lte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken1: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_not: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_gt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_lt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_gte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_lte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: SUSHISWAP_V3_Transaction_filter
  feeGrowthInside0LastX128: BigInt
  feeGrowthInside0LastX128_not: BigInt
  feeGrowthInside0LastX128_gt: BigInt
  feeGrowthInside0LastX128_lt: BigInt
  feeGrowthInside0LastX128_gte: BigInt
  feeGrowthInside0LastX128_lte: BigInt
  feeGrowthInside0LastX128_in: [BigInt!]
  feeGrowthInside0LastX128_not_in: [BigInt!]
  feeGrowthInside1LastX128: BigInt
  feeGrowthInside1LastX128_not: BigInt
  feeGrowthInside1LastX128_gt: BigInt
  feeGrowthInside1LastX128_lt: BigInt
  feeGrowthInside1LastX128_gte: BigInt
  feeGrowthInside1LastX128_lte: BigInt
  feeGrowthInside1LastX128_in: [BigInt!]
  feeGrowthInside1LastX128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_PositionSnapshot_filter]
  or: [SUSHISWAP_V3_PositionSnapshot_filter]
}

enum SUSHISWAP_V3_PositionSnapshot_orderBy {
  id
  owner
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  position
  position__id
  position__owner
  position__liquidity
  position__depositedToken0
  position__depositedToken1
  position__withdrawnToken0
  position__withdrawnToken1
  position__collectedFeesToken0
  position__collectedFeesToken1
  position__feeGrowthInside0LastX128
  position__feeGrowthInside1LastX128
  blockNumber
  timestamp
  liquidity
  depositedToken0
  depositedToken1
  withdrawnToken0
  withdrawnToken1
  collectedFeesToken0
  collectedFeesToken1
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  feeGrowthInside0LastX128
  feeGrowthInside1LastX128
}

input SUSHISWAP_V3_Position_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: SUSHISWAP_V3_Bytes
  owner_not: SUSHISWAP_V3_Bytes
  owner_gt: SUSHISWAP_V3_Bytes
  owner_lt: SUSHISWAP_V3_Bytes
  owner_gte: SUSHISWAP_V3_Bytes
  owner_lte: SUSHISWAP_V3_Bytes
  owner_in: [SUSHISWAP_V3_Bytes!]
  owner_not_in: [SUSHISWAP_V3_Bytes!]
  owner_contains: SUSHISWAP_V3_Bytes
  owner_not_contains: SUSHISWAP_V3_Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: SUSHISWAP_V3_Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: SUSHISWAP_V3_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: SUSHISWAP_V3_Token_filter
  tickLower: String
  tickLower_not: String
  tickLower_gt: String
  tickLower_lt: String
  tickLower_gte: String
  tickLower_lte: String
  tickLower_in: [String!]
  tickLower_not_in: [String!]
  tickLower_contains: String
  tickLower_contains_nocase: String
  tickLower_not_contains: String
  tickLower_not_contains_nocase: String
  tickLower_starts_with: String
  tickLower_starts_with_nocase: String
  tickLower_not_starts_with: String
  tickLower_not_starts_with_nocase: String
  tickLower_ends_with: String
  tickLower_ends_with_nocase: String
  tickLower_not_ends_with: String
  tickLower_not_ends_with_nocase: String
  tickLower_: SUSHISWAP_V3_Tick_filter
  tickUpper: String
  tickUpper_not: String
  tickUpper_gt: String
  tickUpper_lt: String
  tickUpper_gte: String
  tickUpper_lte: String
  tickUpper_in: [String!]
  tickUpper_not_in: [String!]
  tickUpper_contains: String
  tickUpper_contains_nocase: String
  tickUpper_not_contains: String
  tickUpper_not_contains_nocase: String
  tickUpper_starts_with: String
  tickUpper_starts_with_nocase: String
  tickUpper_not_starts_with: String
  tickUpper_not_starts_with_nocase: String
  tickUpper_ends_with: String
  tickUpper_ends_with_nocase: String
  tickUpper_not_ends_with: String
  tickUpper_not_ends_with_nocase: String
  tickUpper_: SUSHISWAP_V3_Tick_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  depositedToken0: SUSHISWAP_V3_BigDecimal
  depositedToken0_not: SUSHISWAP_V3_BigDecimal
  depositedToken0_gt: SUSHISWAP_V3_BigDecimal
  depositedToken0_lt: SUSHISWAP_V3_BigDecimal
  depositedToken0_gte: SUSHISWAP_V3_BigDecimal
  depositedToken0_lte: SUSHISWAP_V3_BigDecimal
  depositedToken0_in: [SUSHISWAP_V3_BigDecimal!]
  depositedToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  depositedToken1: SUSHISWAP_V3_BigDecimal
  depositedToken1_not: SUSHISWAP_V3_BigDecimal
  depositedToken1_gt: SUSHISWAP_V3_BigDecimal
  depositedToken1_lt: SUSHISWAP_V3_BigDecimal
  depositedToken1_gte: SUSHISWAP_V3_BigDecimal
  depositedToken1_lte: SUSHISWAP_V3_BigDecimal
  depositedToken1_in: [SUSHISWAP_V3_BigDecimal!]
  depositedToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  withdrawnToken0: SUSHISWAP_V3_BigDecimal
  withdrawnToken0_not: SUSHISWAP_V3_BigDecimal
  withdrawnToken0_gt: SUSHISWAP_V3_BigDecimal
  withdrawnToken0_lt: SUSHISWAP_V3_BigDecimal
  withdrawnToken0_gte: SUSHISWAP_V3_BigDecimal
  withdrawnToken0_lte: SUSHISWAP_V3_BigDecimal
  withdrawnToken0_in: [SUSHISWAP_V3_BigDecimal!]
  withdrawnToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  withdrawnToken1: SUSHISWAP_V3_BigDecimal
  withdrawnToken1_not: SUSHISWAP_V3_BigDecimal
  withdrawnToken1_gt: SUSHISWAP_V3_BigDecimal
  withdrawnToken1_lt: SUSHISWAP_V3_BigDecimal
  withdrawnToken1_gte: SUSHISWAP_V3_BigDecimal
  withdrawnToken1_lte: SUSHISWAP_V3_BigDecimal
  withdrawnToken1_in: [SUSHISWAP_V3_BigDecimal!]
  withdrawnToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken0: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_not: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_gt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_lt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_gte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_lte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken1: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_not: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_gt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_lt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_gte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_lte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: SUSHISWAP_V3_Transaction_filter
  feeGrowthInside0LastX128: BigInt
  feeGrowthInside0LastX128_not: BigInt
  feeGrowthInside0LastX128_gt: BigInt
  feeGrowthInside0LastX128_lt: BigInt
  feeGrowthInside0LastX128_gte: BigInt
  feeGrowthInside0LastX128_lte: BigInt
  feeGrowthInside0LastX128_in: [BigInt!]
  feeGrowthInside0LastX128_not_in: [BigInt!]
  feeGrowthInside1LastX128: BigInt
  feeGrowthInside1LastX128_not: BigInt
  feeGrowthInside1LastX128_gt: BigInt
  feeGrowthInside1LastX128_lt: BigInt
  feeGrowthInside1LastX128_gte: BigInt
  feeGrowthInside1LastX128_lte: BigInt
  feeGrowthInside1LastX128_in: [BigInt!]
  feeGrowthInside1LastX128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_Position_filter]
  or: [SUSHISWAP_V3_Position_filter]
}

enum SUSHISWAP_V3_Position_orderBy {
  id
  owner
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  tickLower
  tickLower__id
  tickLower__poolAddress
  tickLower__tickIdx
  tickLower__liquidityGross
  tickLower__liquidityNet
  tickLower__price0
  tickLower__price1
  tickLower__volumeToken0
  tickLower__volumeToken1
  tickLower__volumeUSD
  tickLower__untrackedVolumeUSD
  tickLower__feesUSD
  tickLower__collectedFeesToken0
  tickLower__collectedFeesToken1
  tickLower__collectedFeesUSD
  tickLower__createdAtTimestamp
  tickLower__createdAtBlockNumber
  tickLower__liquidityProviderCount
  tickLower__feeGrowthOutside0X128
  tickLower__feeGrowthOutside1X128
  tickUpper
  tickUpper__id
  tickUpper__poolAddress
  tickUpper__tickIdx
  tickUpper__liquidityGross
  tickUpper__liquidityNet
  tickUpper__price0
  tickUpper__price1
  tickUpper__volumeToken0
  tickUpper__volumeToken1
  tickUpper__volumeUSD
  tickUpper__untrackedVolumeUSD
  tickUpper__feesUSD
  tickUpper__collectedFeesToken0
  tickUpper__collectedFeesToken1
  tickUpper__collectedFeesUSD
  tickUpper__createdAtTimestamp
  tickUpper__createdAtBlockNumber
  tickUpper__liquidityProviderCount
  tickUpper__feeGrowthOutside0X128
  tickUpper__feeGrowthOutside1X128
  liquidity
  depositedToken0
  depositedToken1
  withdrawnToken0
  withdrawnToken1
  collectedFeesToken0
  collectedFeesToken1
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  feeGrowthInside0LastX128
  feeGrowthInside1LastX128
}

type SUSHISWAP_V3_Swap {
  id: ID!
  transaction: SUSHISWAP_V3_Transaction!
  timestamp: BigInt!
  pool: SUSHISWAP_V3_Pool!
  token0: SUSHISWAP_V3_Token!
  token1: SUSHISWAP_V3_Token!
  sender: SUSHISWAP_V3_Bytes!
  recipient: SUSHISWAP_V3_Bytes!
  origin: SUSHISWAP_V3_Bytes!
  amount0: SUSHISWAP_V3_BigDecimal!
  amount1: SUSHISWAP_V3_BigDecimal!
  amountUSD: SUSHISWAP_V3_BigDecimal!
  sqrtPriceX96: BigInt!
  tick: BigInt!
  logIndex: BigInt
  sourceName: String
}

input SUSHISWAP_V3_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: SUSHISWAP_V3_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: SUSHISWAP_V3_Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: SUSHISWAP_V3_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: SUSHISWAP_V3_Token_filter
  sender: SUSHISWAP_V3_Bytes
  sender_not: SUSHISWAP_V3_Bytes
  sender_gt: SUSHISWAP_V3_Bytes
  sender_lt: SUSHISWAP_V3_Bytes
  sender_gte: SUSHISWAP_V3_Bytes
  sender_lte: SUSHISWAP_V3_Bytes
  sender_in: [SUSHISWAP_V3_Bytes!]
  sender_not_in: [SUSHISWAP_V3_Bytes!]
  sender_contains: SUSHISWAP_V3_Bytes
  sender_not_contains: SUSHISWAP_V3_Bytes
  recipient: SUSHISWAP_V3_Bytes
  recipient_not: SUSHISWAP_V3_Bytes
  recipient_gt: SUSHISWAP_V3_Bytes
  recipient_lt: SUSHISWAP_V3_Bytes
  recipient_gte: SUSHISWAP_V3_Bytes
  recipient_lte: SUSHISWAP_V3_Bytes
  recipient_in: [SUSHISWAP_V3_Bytes!]
  recipient_not_in: [SUSHISWAP_V3_Bytes!]
  recipient_contains: SUSHISWAP_V3_Bytes
  recipient_not_contains: SUSHISWAP_V3_Bytes
  origin: SUSHISWAP_V3_Bytes
  origin_not: SUSHISWAP_V3_Bytes
  origin_gt: SUSHISWAP_V3_Bytes
  origin_lt: SUSHISWAP_V3_Bytes
  origin_gte: SUSHISWAP_V3_Bytes
  origin_lte: SUSHISWAP_V3_Bytes
  origin_in: [SUSHISWAP_V3_Bytes!]
  origin_not_in: [SUSHISWAP_V3_Bytes!]
  origin_contains: SUSHISWAP_V3_Bytes
  origin_not_contains: SUSHISWAP_V3_Bytes
  amount0: SUSHISWAP_V3_BigDecimal
  amount0_not: SUSHISWAP_V3_BigDecimal
  amount0_gt: SUSHISWAP_V3_BigDecimal
  amount0_lt: SUSHISWAP_V3_BigDecimal
  amount0_gte: SUSHISWAP_V3_BigDecimal
  amount0_lte: SUSHISWAP_V3_BigDecimal
  amount0_in: [SUSHISWAP_V3_BigDecimal!]
  amount0_not_in: [SUSHISWAP_V3_BigDecimal!]
  amount1: SUSHISWAP_V3_BigDecimal
  amount1_not: SUSHISWAP_V3_BigDecimal
  amount1_gt: SUSHISWAP_V3_BigDecimal
  amount1_lt: SUSHISWAP_V3_BigDecimal
  amount1_gte: SUSHISWAP_V3_BigDecimal
  amount1_lte: SUSHISWAP_V3_BigDecimal
  amount1_in: [SUSHISWAP_V3_BigDecimal!]
  amount1_not_in: [SUSHISWAP_V3_BigDecimal!]
  amountUSD: SUSHISWAP_V3_BigDecimal
  amountUSD_not: SUSHISWAP_V3_BigDecimal
  amountUSD_gt: SUSHISWAP_V3_BigDecimal
  amountUSD_lt: SUSHISWAP_V3_BigDecimal
  amountUSD_gte: SUSHISWAP_V3_BigDecimal
  amountUSD_lte: SUSHISWAP_V3_BigDecimal
  amountUSD_in: [SUSHISWAP_V3_BigDecimal!]
  amountUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  sqrtPriceX96: BigInt
  sqrtPriceX96_not: BigInt
  sqrtPriceX96_gt: BigInt
  sqrtPriceX96_lt: BigInt
  sqrtPriceX96_gte: BigInt
  sqrtPriceX96_lte: BigInt
  sqrtPriceX96_in: [BigInt!]
  sqrtPriceX96_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_Swap_filter]
  or: [SUSHISWAP_V3_Swap_filter]
}

enum SUSHISWAP_V3_Swap_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  timestamp
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  sender
  recipient
  origin
  amount0
  amount1
  amountUSD
  sqrtPriceX96
  tick
  logIndex
}

type SUSHISWAP_V3_Tick {
  id: ID!
  poolAddress: String
  tickIdx: BigInt!
  pool: SUSHISWAP_V3_Pool!
  liquidityGross: BigInt!
  liquidityNet: BigInt!
  price0: SUSHISWAP_V3_BigDecimal!
  price1: SUSHISWAP_V3_BigDecimal!
  volumeToken0: SUSHISWAP_V3_BigDecimal!
  volumeToken1: SUSHISWAP_V3_BigDecimal!
  volumeUSD: SUSHISWAP_V3_BigDecimal!
  untrackedVolumeUSD: SUSHISWAP_V3_BigDecimal!
  feesUSD: SUSHISWAP_V3_BigDecimal!
  collectedFeesToken0: SUSHISWAP_V3_BigDecimal!
  collectedFeesToken1: SUSHISWAP_V3_BigDecimal!
  collectedFeesUSD: SUSHISWAP_V3_BigDecimal!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  liquidityProviderCount: BigInt!
  feeGrowthOutside0X128: BigInt!
  feeGrowthOutside1X128: BigInt!
  sourceName: String
}

type SUSHISWAP_V3_TickDayData {
  id: ID!
  date: Int!
  pool: SUSHISWAP_V3_Pool!
  tick: SUSHISWAP_V3_Tick!
  liquidityGross: BigInt!
  liquidityNet: BigInt!
  volumeToken0: SUSHISWAP_V3_BigDecimal!
  volumeToken1: SUSHISWAP_V3_BigDecimal!
  volumeUSD: SUSHISWAP_V3_BigDecimal!
  feesUSD: SUSHISWAP_V3_BigDecimal!
  feeGrowthOutside0X128: BigInt!
  feeGrowthOutside1X128: BigInt!
  sourceName: String
}

input SUSHISWAP_V3_TickDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: SUSHISWAP_V3_Pool_filter
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: SUSHISWAP_V3_Tick_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  volumeToken0: SUSHISWAP_V3_BigDecimal
  volumeToken0_not: SUSHISWAP_V3_BigDecimal
  volumeToken0_gt: SUSHISWAP_V3_BigDecimal
  volumeToken0_lt: SUSHISWAP_V3_BigDecimal
  volumeToken0_gte: SUSHISWAP_V3_BigDecimal
  volumeToken0_lte: SUSHISWAP_V3_BigDecimal
  volumeToken0_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken1: SUSHISWAP_V3_BigDecimal
  volumeToken1_not: SUSHISWAP_V3_BigDecimal
  volumeToken1_gt: SUSHISWAP_V3_BigDecimal
  volumeToken1_lt: SUSHISWAP_V3_BigDecimal
  volumeToken1_gte: SUSHISWAP_V3_BigDecimal
  volumeToken1_lte: SUSHISWAP_V3_BigDecimal
  volumeToken1_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD: SUSHISWAP_V3_BigDecimal
  volumeUSD_not: SUSHISWAP_V3_BigDecimal
  volumeUSD_gt: SUSHISWAP_V3_BigDecimal
  volumeUSD_lt: SUSHISWAP_V3_BigDecimal
  volumeUSD_gte: SUSHISWAP_V3_BigDecimal
  volumeUSD_lte: SUSHISWAP_V3_BigDecimal
  volumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD: SUSHISWAP_V3_BigDecimal
  feesUSD_not: SUSHISWAP_V3_BigDecimal
  feesUSD_gt: SUSHISWAP_V3_BigDecimal
  feesUSD_lt: SUSHISWAP_V3_BigDecimal
  feesUSD_gte: SUSHISWAP_V3_BigDecimal
  feesUSD_lte: SUSHISWAP_V3_BigDecimal
  feesUSD_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  feeGrowthOutside0X128: BigInt
  feeGrowthOutside0X128_not: BigInt
  feeGrowthOutside0X128_gt: BigInt
  feeGrowthOutside0X128_lt: BigInt
  feeGrowthOutside0X128_gte: BigInt
  feeGrowthOutside0X128_lte: BigInt
  feeGrowthOutside0X128_in: [BigInt!]
  feeGrowthOutside0X128_not_in: [BigInt!]
  feeGrowthOutside1X128: BigInt
  feeGrowthOutside1X128_not: BigInt
  feeGrowthOutside1X128_gt: BigInt
  feeGrowthOutside1X128_lt: BigInt
  feeGrowthOutside1X128_gte: BigInt
  feeGrowthOutside1X128_lte: BigInt
  feeGrowthOutside1X128_in: [BigInt!]
  feeGrowthOutside1X128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_TickDayData_filter]
  or: [SUSHISWAP_V3_TickDayData_filter]
}

enum SUSHISWAP_V3_TickDayData_orderBy {
  id
  date
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  tick
  tick__id
  tick__poolAddress
  tick__tickIdx
  tick__liquidityGross
  tick__liquidityNet
  tick__price0
  tick__price1
  tick__volumeToken0
  tick__volumeToken1
  tick__volumeUSD
  tick__untrackedVolumeUSD
  tick__feesUSD
  tick__collectedFeesToken0
  tick__collectedFeesToken1
  tick__collectedFeesUSD
  tick__createdAtTimestamp
  tick__createdAtBlockNumber
  tick__liquidityProviderCount
  tick__feeGrowthOutside0X128
  tick__feeGrowthOutside1X128
  liquidityGross
  liquidityNet
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
  feeGrowthOutside0X128
  feeGrowthOutside1X128
}

type SUSHISWAP_V3_TickHourData {
  id: ID!
  periodStartUnix: Int!
  pool: SUSHISWAP_V3_Pool!
  tick: SUSHISWAP_V3_Tick!
  liquidityGross: BigInt!
  liquidityNet: BigInt!
  volumeToken0: SUSHISWAP_V3_BigDecimal!
  volumeToken1: SUSHISWAP_V3_BigDecimal!
  volumeUSD: SUSHISWAP_V3_BigDecimal!
  feesUSD: SUSHISWAP_V3_BigDecimal!
  sourceName: String
}

input SUSHISWAP_V3_TickHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  periodStartUnix: Int
  periodStartUnix_not: Int
  periodStartUnix_gt: Int
  periodStartUnix_lt: Int
  periodStartUnix_gte: Int
  periodStartUnix_lte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: SUSHISWAP_V3_Pool_filter
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: SUSHISWAP_V3_Tick_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  volumeToken0: SUSHISWAP_V3_BigDecimal
  volumeToken0_not: SUSHISWAP_V3_BigDecimal
  volumeToken0_gt: SUSHISWAP_V3_BigDecimal
  volumeToken0_lt: SUSHISWAP_V3_BigDecimal
  volumeToken0_gte: SUSHISWAP_V3_BigDecimal
  volumeToken0_lte: SUSHISWAP_V3_BigDecimal
  volumeToken0_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken1: SUSHISWAP_V3_BigDecimal
  volumeToken1_not: SUSHISWAP_V3_BigDecimal
  volumeToken1_gt: SUSHISWAP_V3_BigDecimal
  volumeToken1_lt: SUSHISWAP_V3_BigDecimal
  volumeToken1_gte: SUSHISWAP_V3_BigDecimal
  volumeToken1_lte: SUSHISWAP_V3_BigDecimal
  volumeToken1_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD: SUSHISWAP_V3_BigDecimal
  volumeUSD_not: SUSHISWAP_V3_BigDecimal
  volumeUSD_gt: SUSHISWAP_V3_BigDecimal
  volumeUSD_lt: SUSHISWAP_V3_BigDecimal
  volumeUSD_gte: SUSHISWAP_V3_BigDecimal
  volumeUSD_lte: SUSHISWAP_V3_BigDecimal
  volumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD: SUSHISWAP_V3_BigDecimal
  feesUSD_not: SUSHISWAP_V3_BigDecimal
  feesUSD_gt: SUSHISWAP_V3_BigDecimal
  feesUSD_lt: SUSHISWAP_V3_BigDecimal
  feesUSD_gte: SUSHISWAP_V3_BigDecimal
  feesUSD_lte: SUSHISWAP_V3_BigDecimal
  feesUSD_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_TickHourData_filter]
  or: [SUSHISWAP_V3_TickHourData_filter]
}

enum SUSHISWAP_V3_TickHourData_orderBy {
  id
  periodStartUnix
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  tick
  tick__id
  tick__poolAddress
  tick__tickIdx
  tick__liquidityGross
  tick__liquidityNet
  tick__price0
  tick__price1
  tick__volumeToken0
  tick__volumeToken1
  tick__volumeUSD
  tick__untrackedVolumeUSD
  tick__feesUSD
  tick__collectedFeesToken0
  tick__collectedFeesToken1
  tick__collectedFeesUSD
  tick__createdAtTimestamp
  tick__createdAtBlockNumber
  tick__liquidityProviderCount
  tick__feeGrowthOutside0X128
  tick__feeGrowthOutside1X128
  liquidityGross
  liquidityNet
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
}

input SUSHISWAP_V3_Tick_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolAddress: String
  poolAddress_not: String
  poolAddress_gt: String
  poolAddress_lt: String
  poolAddress_gte: String
  poolAddress_lte: String
  poolAddress_in: [String!]
  poolAddress_not_in: [String!]
  poolAddress_contains: String
  poolAddress_contains_nocase: String
  poolAddress_not_contains: String
  poolAddress_not_contains_nocase: String
  poolAddress_starts_with: String
  poolAddress_starts_with_nocase: String
  poolAddress_not_starts_with: String
  poolAddress_not_starts_with_nocase: String
  poolAddress_ends_with: String
  poolAddress_ends_with_nocase: String
  poolAddress_not_ends_with: String
  poolAddress_not_ends_with_nocase: String
  tickIdx: BigInt
  tickIdx_not: BigInt
  tickIdx_gt: BigInt
  tickIdx_lt: BigInt
  tickIdx_gte: BigInt
  tickIdx_lte: BigInt
  tickIdx_in: [BigInt!]
  tickIdx_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: SUSHISWAP_V3_Pool_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  price0: SUSHISWAP_V3_BigDecimal
  price0_not: SUSHISWAP_V3_BigDecimal
  price0_gt: SUSHISWAP_V3_BigDecimal
  price0_lt: SUSHISWAP_V3_BigDecimal
  price0_gte: SUSHISWAP_V3_BigDecimal
  price0_lte: SUSHISWAP_V3_BigDecimal
  price0_in: [SUSHISWAP_V3_BigDecimal!]
  price0_not_in: [SUSHISWAP_V3_BigDecimal!]
  price1: SUSHISWAP_V3_BigDecimal
  price1_not: SUSHISWAP_V3_BigDecimal
  price1_gt: SUSHISWAP_V3_BigDecimal
  price1_lt: SUSHISWAP_V3_BigDecimal
  price1_gte: SUSHISWAP_V3_BigDecimal
  price1_lte: SUSHISWAP_V3_BigDecimal
  price1_in: [SUSHISWAP_V3_BigDecimal!]
  price1_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken0: SUSHISWAP_V3_BigDecimal
  volumeToken0_not: SUSHISWAP_V3_BigDecimal
  volumeToken0_gt: SUSHISWAP_V3_BigDecimal
  volumeToken0_lt: SUSHISWAP_V3_BigDecimal
  volumeToken0_gte: SUSHISWAP_V3_BigDecimal
  volumeToken0_lte: SUSHISWAP_V3_BigDecimal
  volumeToken0_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken1: SUSHISWAP_V3_BigDecimal
  volumeToken1_not: SUSHISWAP_V3_BigDecimal
  volumeToken1_gt: SUSHISWAP_V3_BigDecimal
  volumeToken1_lt: SUSHISWAP_V3_BigDecimal
  volumeToken1_gte: SUSHISWAP_V3_BigDecimal
  volumeToken1_lte: SUSHISWAP_V3_BigDecimal
  volumeToken1_in: [SUSHISWAP_V3_BigDecimal!]
  volumeToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD: SUSHISWAP_V3_BigDecimal
  volumeUSD_not: SUSHISWAP_V3_BigDecimal
  volumeUSD_gt: SUSHISWAP_V3_BigDecimal
  volumeUSD_lt: SUSHISWAP_V3_BigDecimal
  volumeUSD_gte: SUSHISWAP_V3_BigDecimal
  volumeUSD_lte: SUSHISWAP_V3_BigDecimal
  volumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  untrackedVolumeUSD: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_not: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_gt: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_lt: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_gte: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_lte: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  untrackedVolumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD: SUSHISWAP_V3_BigDecimal
  feesUSD_not: SUSHISWAP_V3_BigDecimal
  feesUSD_gt: SUSHISWAP_V3_BigDecimal
  feesUSD_lt: SUSHISWAP_V3_BigDecimal
  feesUSD_gte: SUSHISWAP_V3_BigDecimal
  feesUSD_lte: SUSHISWAP_V3_BigDecimal
  feesUSD_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken0: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_not: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_gt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_lt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_gte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_lte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken0_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken0_not_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken1: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_not: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_gt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_lt: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_gte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_lte: SUSHISWAP_V3_BigDecimal
  collectedFeesToken1_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesToken1_not_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesUSD: SUSHISWAP_V3_BigDecimal
  collectedFeesUSD_not: SUSHISWAP_V3_BigDecimal
  collectedFeesUSD_gt: SUSHISWAP_V3_BigDecimal
  collectedFeesUSD_lt: SUSHISWAP_V3_BigDecimal
  collectedFeesUSD_gte: SUSHISWAP_V3_BigDecimal
  collectedFeesUSD_lte: SUSHISWAP_V3_BigDecimal
  collectedFeesUSD_in: [SUSHISWAP_V3_BigDecimal!]
  collectedFeesUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  feeGrowthOutside0X128: BigInt
  feeGrowthOutside0X128_not: BigInt
  feeGrowthOutside0X128_gt: BigInt
  feeGrowthOutside0X128_lt: BigInt
  feeGrowthOutside0X128_gte: BigInt
  feeGrowthOutside0X128_lte: BigInt
  feeGrowthOutside0X128_in: [BigInt!]
  feeGrowthOutside0X128_not_in: [BigInt!]
  feeGrowthOutside1X128: BigInt
  feeGrowthOutside1X128_not: BigInt
  feeGrowthOutside1X128_gt: BigInt
  feeGrowthOutside1X128_lt: BigInt
  feeGrowthOutside1X128_gte: BigInt
  feeGrowthOutside1X128_lte: BigInt
  feeGrowthOutside1X128_in: [BigInt!]
  feeGrowthOutside1X128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_Tick_filter]
  or: [SUSHISWAP_V3_Tick_filter]
}

enum SUSHISWAP_V3_Tick_orderBy {
  id
  poolAddress
  tickIdx
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  liquidityGross
  liquidityNet
  price0
  price1
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  feesUSD
  collectedFeesToken0
  collectedFeesToken1
  collectedFeesUSD
  createdAtTimestamp
  createdAtBlockNumber
  liquidityProviderCount
  feeGrowthOutside0X128
  feeGrowthOutside1X128
}

type SUSHISWAP_V3_Token {
  id: ID!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: SUSHISWAP_V3_BigDecimal!
  volumeUSD: SUSHISWAP_V3_BigDecimal!
  untrackedVolumeUSD: SUSHISWAP_V3_BigDecimal!
  feesUSD: SUSHISWAP_V3_BigDecimal!
  txCount: BigInt!
  poolCount: BigInt!
  totalValueLocked: SUSHISWAP_V3_BigDecimal!
  totalValueLockedUSD: SUSHISWAP_V3_BigDecimal!
  totalValueLockedUSDUntracked: SUSHISWAP_V3_BigDecimal!
  derivedETH: SUSHISWAP_V3_BigDecimal!
  whitelistPools(skip: Int = 0, first: Int = 100, orderBy: SUSHISWAP_V3_Pool_orderBy, orderDirection: SUSHISWAP_V3_OrderDirection, where: SUSHISWAP_V3_Pool_filter): [SUSHISWAP_V3_Pool!]!
  tokenDayData(skip: Int = 0, first: Int = 100, orderBy: SUSHISWAP_V3_TokenDayData_orderBy, orderDirection: SUSHISWAP_V3_OrderDirection, where: SUSHISWAP_V3_TokenDayData_filter): [SUSHISWAP_V3_TokenDayData!]!
  sourceName: String
}

type SUSHISWAP_V3_TokenDayData {
  id: ID!
  date: Int!
  token: SUSHISWAP_V3_Token!
  volume: SUSHISWAP_V3_BigDecimal!
  volumeUSD: SUSHISWAP_V3_BigDecimal!
  untrackedVolumeUSD: SUSHISWAP_V3_BigDecimal!
  totalValueLocked: SUSHISWAP_V3_BigDecimal!
  totalValueLockedUSD: SUSHISWAP_V3_BigDecimal!
  priceUSD: SUSHISWAP_V3_BigDecimal!
  feesUSD: SUSHISWAP_V3_BigDecimal!
  open: SUSHISWAP_V3_BigDecimal!
  high: SUSHISWAP_V3_BigDecimal!
  low: SUSHISWAP_V3_BigDecimal!
  close: SUSHISWAP_V3_BigDecimal!
  sourceName: String
}

input SUSHISWAP_V3_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: SUSHISWAP_V3_Token_filter
  volume: SUSHISWAP_V3_BigDecimal
  volume_not: SUSHISWAP_V3_BigDecimal
  volume_gt: SUSHISWAP_V3_BigDecimal
  volume_lt: SUSHISWAP_V3_BigDecimal
  volume_gte: SUSHISWAP_V3_BigDecimal
  volume_lte: SUSHISWAP_V3_BigDecimal
  volume_in: [SUSHISWAP_V3_BigDecimal!]
  volume_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD: SUSHISWAP_V3_BigDecimal
  volumeUSD_not: SUSHISWAP_V3_BigDecimal
  volumeUSD_gt: SUSHISWAP_V3_BigDecimal
  volumeUSD_lt: SUSHISWAP_V3_BigDecimal
  volumeUSD_gte: SUSHISWAP_V3_BigDecimal
  volumeUSD_lte: SUSHISWAP_V3_BigDecimal
  volumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  untrackedVolumeUSD: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_not: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_gt: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_lt: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_gte: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_lte: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  untrackedVolumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLocked: SUSHISWAP_V3_BigDecimal
  totalValueLocked_not: SUSHISWAP_V3_BigDecimal
  totalValueLocked_gt: SUSHISWAP_V3_BigDecimal
  totalValueLocked_lt: SUSHISWAP_V3_BigDecimal
  totalValueLocked_gte: SUSHISWAP_V3_BigDecimal
  totalValueLocked_lte: SUSHISWAP_V3_BigDecimal
  totalValueLocked_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLocked_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSD: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_not: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_gt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_lt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_gte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_lte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  priceUSD: SUSHISWAP_V3_BigDecimal
  priceUSD_not: SUSHISWAP_V3_BigDecimal
  priceUSD_gt: SUSHISWAP_V3_BigDecimal
  priceUSD_lt: SUSHISWAP_V3_BigDecimal
  priceUSD_gte: SUSHISWAP_V3_BigDecimal
  priceUSD_lte: SUSHISWAP_V3_BigDecimal
  priceUSD_in: [SUSHISWAP_V3_BigDecimal!]
  priceUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD: SUSHISWAP_V3_BigDecimal
  feesUSD_not: SUSHISWAP_V3_BigDecimal
  feesUSD_gt: SUSHISWAP_V3_BigDecimal
  feesUSD_lt: SUSHISWAP_V3_BigDecimal
  feesUSD_gte: SUSHISWAP_V3_BigDecimal
  feesUSD_lte: SUSHISWAP_V3_BigDecimal
  feesUSD_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  open: SUSHISWAP_V3_BigDecimal
  open_not: SUSHISWAP_V3_BigDecimal
  open_gt: SUSHISWAP_V3_BigDecimal
  open_lt: SUSHISWAP_V3_BigDecimal
  open_gte: SUSHISWAP_V3_BigDecimal
  open_lte: SUSHISWAP_V3_BigDecimal
  open_in: [SUSHISWAP_V3_BigDecimal!]
  open_not_in: [SUSHISWAP_V3_BigDecimal!]
  high: SUSHISWAP_V3_BigDecimal
  high_not: SUSHISWAP_V3_BigDecimal
  high_gt: SUSHISWAP_V3_BigDecimal
  high_lt: SUSHISWAP_V3_BigDecimal
  high_gte: SUSHISWAP_V3_BigDecimal
  high_lte: SUSHISWAP_V3_BigDecimal
  high_in: [SUSHISWAP_V3_BigDecimal!]
  high_not_in: [SUSHISWAP_V3_BigDecimal!]
  low: SUSHISWAP_V3_BigDecimal
  low_not: SUSHISWAP_V3_BigDecimal
  low_gt: SUSHISWAP_V3_BigDecimal
  low_lt: SUSHISWAP_V3_BigDecimal
  low_gte: SUSHISWAP_V3_BigDecimal
  low_lte: SUSHISWAP_V3_BigDecimal
  low_in: [SUSHISWAP_V3_BigDecimal!]
  low_not_in: [SUSHISWAP_V3_BigDecimal!]
  close: SUSHISWAP_V3_BigDecimal
  close_not: SUSHISWAP_V3_BigDecimal
  close_gt: SUSHISWAP_V3_BigDecimal
  close_lt: SUSHISWAP_V3_BigDecimal
  close_gte: SUSHISWAP_V3_BigDecimal
  close_lte: SUSHISWAP_V3_BigDecimal
  close_in: [SUSHISWAP_V3_BigDecimal!]
  close_not_in: [SUSHISWAP_V3_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_TokenDayData_filter]
  or: [SUSHISWAP_V3_TokenDayData_filter]
}

enum SUSHISWAP_V3_TokenDayData_orderBy {
  id
  date
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__totalSupply
  token__volume
  token__volumeUSD
  token__untrackedVolumeUSD
  token__feesUSD
  token__txCount
  token__poolCount
  token__totalValueLocked
  token__totalValueLockedUSD
  token__totalValueLockedUSDUntracked
  token__derivedETH
  volume
  volumeUSD
  untrackedVolumeUSD
  totalValueLocked
  totalValueLockedUSD
  priceUSD
  feesUSD
  open
  high
  low
  close
}

type SUSHISWAP_V3_TokenHourData {
  id: ID!
  periodStartUnix: Int!
  token: SUSHISWAP_V3_Token!
  volume: SUSHISWAP_V3_BigDecimal!
  volumeUSD: SUSHISWAP_V3_BigDecimal!
  untrackedVolumeUSD: SUSHISWAP_V3_BigDecimal!
  totalValueLocked: SUSHISWAP_V3_BigDecimal!
  totalValueLockedUSD: SUSHISWAP_V3_BigDecimal!
  priceUSD: SUSHISWAP_V3_BigDecimal!
  feesUSD: SUSHISWAP_V3_BigDecimal!
  open: SUSHISWAP_V3_BigDecimal!
  high: SUSHISWAP_V3_BigDecimal!
  low: SUSHISWAP_V3_BigDecimal!
  close: SUSHISWAP_V3_BigDecimal!
  sourceName: String
}

input SUSHISWAP_V3_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  periodStartUnix: Int
  periodStartUnix_not: Int
  periodStartUnix_gt: Int
  periodStartUnix_lt: Int
  periodStartUnix_gte: Int
  periodStartUnix_lte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: SUSHISWAP_V3_Token_filter
  volume: SUSHISWAP_V3_BigDecimal
  volume_not: SUSHISWAP_V3_BigDecimal
  volume_gt: SUSHISWAP_V3_BigDecimal
  volume_lt: SUSHISWAP_V3_BigDecimal
  volume_gte: SUSHISWAP_V3_BigDecimal
  volume_lte: SUSHISWAP_V3_BigDecimal
  volume_in: [SUSHISWAP_V3_BigDecimal!]
  volume_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD: SUSHISWAP_V3_BigDecimal
  volumeUSD_not: SUSHISWAP_V3_BigDecimal
  volumeUSD_gt: SUSHISWAP_V3_BigDecimal
  volumeUSD_lt: SUSHISWAP_V3_BigDecimal
  volumeUSD_gte: SUSHISWAP_V3_BigDecimal
  volumeUSD_lte: SUSHISWAP_V3_BigDecimal
  volumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  untrackedVolumeUSD: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_not: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_gt: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_lt: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_gte: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_lte: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  untrackedVolumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLocked: SUSHISWAP_V3_BigDecimal
  totalValueLocked_not: SUSHISWAP_V3_BigDecimal
  totalValueLocked_gt: SUSHISWAP_V3_BigDecimal
  totalValueLocked_lt: SUSHISWAP_V3_BigDecimal
  totalValueLocked_gte: SUSHISWAP_V3_BigDecimal
  totalValueLocked_lte: SUSHISWAP_V3_BigDecimal
  totalValueLocked_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLocked_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSD: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_not: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_gt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_lt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_gte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_lte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  priceUSD: SUSHISWAP_V3_BigDecimal
  priceUSD_not: SUSHISWAP_V3_BigDecimal
  priceUSD_gt: SUSHISWAP_V3_BigDecimal
  priceUSD_lt: SUSHISWAP_V3_BigDecimal
  priceUSD_gte: SUSHISWAP_V3_BigDecimal
  priceUSD_lte: SUSHISWAP_V3_BigDecimal
  priceUSD_in: [SUSHISWAP_V3_BigDecimal!]
  priceUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD: SUSHISWAP_V3_BigDecimal
  feesUSD_not: SUSHISWAP_V3_BigDecimal
  feesUSD_gt: SUSHISWAP_V3_BigDecimal
  feesUSD_lt: SUSHISWAP_V3_BigDecimal
  feesUSD_gte: SUSHISWAP_V3_BigDecimal
  feesUSD_lte: SUSHISWAP_V3_BigDecimal
  feesUSD_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  open: SUSHISWAP_V3_BigDecimal
  open_not: SUSHISWAP_V3_BigDecimal
  open_gt: SUSHISWAP_V3_BigDecimal
  open_lt: SUSHISWAP_V3_BigDecimal
  open_gte: SUSHISWAP_V3_BigDecimal
  open_lte: SUSHISWAP_V3_BigDecimal
  open_in: [SUSHISWAP_V3_BigDecimal!]
  open_not_in: [SUSHISWAP_V3_BigDecimal!]
  high: SUSHISWAP_V3_BigDecimal
  high_not: SUSHISWAP_V3_BigDecimal
  high_gt: SUSHISWAP_V3_BigDecimal
  high_lt: SUSHISWAP_V3_BigDecimal
  high_gte: SUSHISWAP_V3_BigDecimal
  high_lte: SUSHISWAP_V3_BigDecimal
  high_in: [SUSHISWAP_V3_BigDecimal!]
  high_not_in: [SUSHISWAP_V3_BigDecimal!]
  low: SUSHISWAP_V3_BigDecimal
  low_not: SUSHISWAP_V3_BigDecimal
  low_gt: SUSHISWAP_V3_BigDecimal
  low_lt: SUSHISWAP_V3_BigDecimal
  low_gte: SUSHISWAP_V3_BigDecimal
  low_lte: SUSHISWAP_V3_BigDecimal
  low_in: [SUSHISWAP_V3_BigDecimal!]
  low_not_in: [SUSHISWAP_V3_BigDecimal!]
  close: SUSHISWAP_V3_BigDecimal
  close_not: SUSHISWAP_V3_BigDecimal
  close_gt: SUSHISWAP_V3_BigDecimal
  close_lt: SUSHISWAP_V3_BigDecimal
  close_gte: SUSHISWAP_V3_BigDecimal
  close_lte: SUSHISWAP_V3_BigDecimal
  close_in: [SUSHISWAP_V3_BigDecimal!]
  close_not_in: [SUSHISWAP_V3_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_TokenHourData_filter]
  or: [SUSHISWAP_V3_TokenHourData_filter]
}

enum SUSHISWAP_V3_TokenHourData_orderBy {
  id
  periodStartUnix
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__totalSupply
  token__volume
  token__volumeUSD
  token__untrackedVolumeUSD
  token__feesUSD
  token__txCount
  token__poolCount
  token__totalValueLocked
  token__totalValueLockedUSD
  token__totalValueLockedUSDUntracked
  token__derivedETH
  volume
  volumeUSD
  untrackedVolumeUSD
  totalValueLocked
  totalValueLockedUSD
  priceUSD
  feesUSD
  open
  high
  low
  close
}

input SUSHISWAP_V3_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: SUSHISWAP_V3_BigDecimal
  volume_not: SUSHISWAP_V3_BigDecimal
  volume_gt: SUSHISWAP_V3_BigDecimal
  volume_lt: SUSHISWAP_V3_BigDecimal
  volume_gte: SUSHISWAP_V3_BigDecimal
  volume_lte: SUSHISWAP_V3_BigDecimal
  volume_in: [SUSHISWAP_V3_BigDecimal!]
  volume_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD: SUSHISWAP_V3_BigDecimal
  volumeUSD_not: SUSHISWAP_V3_BigDecimal
  volumeUSD_gt: SUSHISWAP_V3_BigDecimal
  volumeUSD_lt: SUSHISWAP_V3_BigDecimal
  volumeUSD_gte: SUSHISWAP_V3_BigDecimal
  volumeUSD_lte: SUSHISWAP_V3_BigDecimal
  volumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  untrackedVolumeUSD: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_not: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_gt: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_lt: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_gte: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_lte: SUSHISWAP_V3_BigDecimal
  untrackedVolumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  untrackedVolumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD: SUSHISWAP_V3_BigDecimal
  feesUSD_not: SUSHISWAP_V3_BigDecimal
  feesUSD_gt: SUSHISWAP_V3_BigDecimal
  feesUSD_lt: SUSHISWAP_V3_BigDecimal
  feesUSD_gte: SUSHISWAP_V3_BigDecimal
  feesUSD_lte: SUSHISWAP_V3_BigDecimal
  feesUSD_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  poolCount: BigInt
  poolCount_not: BigInt
  poolCount_gt: BigInt
  poolCount_lt: BigInt
  poolCount_gte: BigInt
  poolCount_lte: BigInt
  poolCount_in: [BigInt!]
  poolCount_not_in: [BigInt!]
  totalValueLocked: SUSHISWAP_V3_BigDecimal
  totalValueLocked_not: SUSHISWAP_V3_BigDecimal
  totalValueLocked_gt: SUSHISWAP_V3_BigDecimal
  totalValueLocked_lt: SUSHISWAP_V3_BigDecimal
  totalValueLocked_gte: SUSHISWAP_V3_BigDecimal
  totalValueLocked_lte: SUSHISWAP_V3_BigDecimal
  totalValueLocked_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLocked_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSD: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_not: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_gt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_lt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_gte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_lte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSD_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSDUntracked: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_not: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_gt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_lt: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_gte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_lte: SUSHISWAP_V3_BigDecimal
  totalValueLockedUSDUntracked_in: [SUSHISWAP_V3_BigDecimal!]
  totalValueLockedUSDUntracked_not_in: [SUSHISWAP_V3_BigDecimal!]
  derivedETH: SUSHISWAP_V3_BigDecimal
  derivedETH_not: SUSHISWAP_V3_BigDecimal
  derivedETH_gt: SUSHISWAP_V3_BigDecimal
  derivedETH_lt: SUSHISWAP_V3_BigDecimal
  derivedETH_gte: SUSHISWAP_V3_BigDecimal
  derivedETH_lte: SUSHISWAP_V3_BigDecimal
  derivedETH_in: [SUSHISWAP_V3_BigDecimal!]
  derivedETH_not_in: [SUSHISWAP_V3_BigDecimal!]
  whitelistPools: [String!]
  whitelistPools_not: [String!]
  whitelistPools_contains: [String!]
  whitelistPools_contains_nocase: [String!]
  whitelistPools_not_contains: [String!]
  whitelistPools_not_contains_nocase: [String!]
  whitelistPools_: SUSHISWAP_V3_Pool_filter
  tokenDayData_: SUSHISWAP_V3_TokenDayData_filter
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_Token_filter]
  or: [SUSHISWAP_V3_Token_filter]
}

enum SUSHISWAP_V3_Token_orderBy {
  id
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  feesUSD
  txCount
  poolCount
  totalValueLocked
  totalValueLockedUSD
  totalValueLockedUSDUntracked
  derivedETH
  whitelistPools
  tokenDayData
}

type SUSHISWAP_V3_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: SUSHISWAP_V3_Mint_orderBy, orderDirection: SUSHISWAP_V3_OrderDirection, where: SUSHISWAP_V3_Mint_filter): [SUSHISWAP_V3_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: SUSHISWAP_V3_Burn_orderBy, orderDirection: SUSHISWAP_V3_OrderDirection, where: SUSHISWAP_V3_Burn_filter): [SUSHISWAP_V3_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: SUSHISWAP_V3_Swap_orderBy, orderDirection: SUSHISWAP_V3_OrderDirection, where: SUSHISWAP_V3_Swap_filter): [SUSHISWAP_V3_Swap]!
  flashed(skip: Int = 0, first: Int = 100, orderBy: SUSHISWAP_V3_Flash_orderBy, orderDirection: SUSHISWAP_V3_OrderDirection, where: SUSHISWAP_V3_Flash_filter): [SUSHISWAP_V3_Flash]!
  collects(skip: Int = 0, first: Int = 100, orderBy: SUSHISWAP_V3_Collect_orderBy, orderDirection: SUSHISWAP_V3_OrderDirection, where: SUSHISWAP_V3_Collect_filter): [SUSHISWAP_V3_Collect]!
  sourceName: String
}

input SUSHISWAP_V3_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  mints_: SUSHISWAP_V3_Mint_filter
  burns_: SUSHISWAP_V3_Burn_filter
  swaps_: SUSHISWAP_V3_Swap_filter
  flashed_: SUSHISWAP_V3_Flash_filter
  collects_: SUSHISWAP_V3_Collect_filter
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_Transaction_filter]
  or: [SUSHISWAP_V3_Transaction_filter]
}

enum SUSHISWAP_V3_Transaction_orderBy {
  id
  blockNumber
  timestamp
  gasUsed
  gasPrice
  mints
  burns
  swaps
  flashed
  collects
}

type SUSHISWAP_V3_UniswapDayData {
  id: ID!
  date: Int!
  volumeETH: SUSHISWAP_V3_BigDecimal!
  volumeUSD: SUSHISWAP_V3_BigDecimal!
  volumeUSDUntracked: SUSHISWAP_V3_BigDecimal!
  feesUSD: SUSHISWAP_V3_BigDecimal!
  txCount: BigInt!
  tvlUSD: SUSHISWAP_V3_BigDecimal!
  sourceName: String
}

input SUSHISWAP_V3_UniswapDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  volumeETH: SUSHISWAP_V3_BigDecimal
  volumeETH_not: SUSHISWAP_V3_BigDecimal
  volumeETH_gt: SUSHISWAP_V3_BigDecimal
  volumeETH_lt: SUSHISWAP_V3_BigDecimal
  volumeETH_gte: SUSHISWAP_V3_BigDecimal
  volumeETH_lte: SUSHISWAP_V3_BigDecimal
  volumeETH_in: [SUSHISWAP_V3_BigDecimal!]
  volumeETH_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD: SUSHISWAP_V3_BigDecimal
  volumeUSD_not: SUSHISWAP_V3_BigDecimal
  volumeUSD_gt: SUSHISWAP_V3_BigDecimal
  volumeUSD_lt: SUSHISWAP_V3_BigDecimal
  volumeUSD_gte: SUSHISWAP_V3_BigDecimal
  volumeUSD_lte: SUSHISWAP_V3_BigDecimal
  volumeUSD_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSDUntracked: SUSHISWAP_V3_BigDecimal
  volumeUSDUntracked_not: SUSHISWAP_V3_BigDecimal
  volumeUSDUntracked_gt: SUSHISWAP_V3_BigDecimal
  volumeUSDUntracked_lt: SUSHISWAP_V3_BigDecimal
  volumeUSDUntracked_gte: SUSHISWAP_V3_BigDecimal
  volumeUSDUntracked_lte: SUSHISWAP_V3_BigDecimal
  volumeUSDUntracked_in: [SUSHISWAP_V3_BigDecimal!]
  volumeUSDUntracked_not_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD: SUSHISWAP_V3_BigDecimal
  feesUSD_not: SUSHISWAP_V3_BigDecimal
  feesUSD_gt: SUSHISWAP_V3_BigDecimal
  feesUSD_lt: SUSHISWAP_V3_BigDecimal
  feesUSD_gte: SUSHISWAP_V3_BigDecimal
  feesUSD_lte: SUSHISWAP_V3_BigDecimal
  feesUSD_in: [SUSHISWAP_V3_BigDecimal!]
  feesUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tvlUSD: SUSHISWAP_V3_BigDecimal
  tvlUSD_not: SUSHISWAP_V3_BigDecimal
  tvlUSD_gt: SUSHISWAP_V3_BigDecimal
  tvlUSD_lt: SUSHISWAP_V3_BigDecimal
  tvlUSD_gte: SUSHISWAP_V3_BigDecimal
  tvlUSD_lte: SUSHISWAP_V3_BigDecimal
  tvlUSD_in: [SUSHISWAP_V3_BigDecimal!]
  tvlUSD_not_in: [SUSHISWAP_V3_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: SUSHISWAP_V3_BlockChangedFilter
  and: [SUSHISWAP_V3_UniswapDayData_filter]
  or: [SUSHISWAP_V3_UniswapDayData_filter]
}

enum SUSHISWAP_V3_UniswapDayData_orderBy {
  id
  date
  volumeETH
  volumeUSD
  volumeUSDUntracked
  feesUSD
  txCount
  tvlUSD
}

type SUSHISWAP_V3__Block_ {
  """The hash of the block"""
  hash: SUSHISWAP_V3_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: SUSHISWAP_V3_Bytes
  sourceName: String
}

"""The type for the top-level _meta field"""
type SUSHISWAP_V3__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: SUSHISWAP_V3__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
  sourceName: String
}

enum CONCENTRATED_Aggregation_interval {
  hour
  day
}

scalar CONCENTRATED_BigDecimal

input CONCENTRATED_BlockChangedFilter {
  number_gte: Int!
}

input CONCENTRATED_Block_height {
  hash: CONCENTRATED_Bytes
  number: Int
  number_gte: Int
}

type CONCENTRATED_Bundle {
  id: ID!
  ethPriceUSD: CONCENTRATED_BigDecimal!
  sourceName: String
}

input CONCENTRATED_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPriceUSD: CONCENTRATED_BigDecimal
  ethPriceUSD_not: CONCENTRATED_BigDecimal
  ethPriceUSD_gt: CONCENTRATED_BigDecimal
  ethPriceUSD_lt: CONCENTRATED_BigDecimal
  ethPriceUSD_gte: CONCENTRATED_BigDecimal
  ethPriceUSD_lte: CONCENTRATED_BigDecimal
  ethPriceUSD_in: [CONCENTRATED_BigDecimal!]
  ethPriceUSD_not_in: [CONCENTRATED_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_Bundle_filter]
  or: [CONCENTRATED_Bundle_filter]
}

enum CONCENTRATED_Bundle_orderBy {
  id
  ethPriceUSD
}

type CONCENTRATED_Burn {
  id: ID!
  transaction: CONCENTRATED_Transaction!
  pool: CONCENTRATED_Pool!
  token0: CONCENTRATED_Token!
  token1: CONCENTRATED_Token!
  timestamp: BigInt!
  owner: CONCENTRATED_Bytes
  origin: CONCENTRATED_Bytes!
  amount: BigInt!
  amount0: CONCENTRATED_BigDecimal!
  amount1: CONCENTRATED_BigDecimal!
  amountUSD: CONCENTRATED_BigDecimal
  tickLower: BigInt!
  tickUpper: BigInt!
  logIndex: BigInt
  sourceName: String
}

input CONCENTRATED_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: CONCENTRATED_Transaction_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: CONCENTRATED_Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: CONCENTRATED_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: CONCENTRATED_Token_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  owner: CONCENTRATED_Bytes
  owner_not: CONCENTRATED_Bytes
  owner_gt: CONCENTRATED_Bytes
  owner_lt: CONCENTRATED_Bytes
  owner_gte: CONCENTRATED_Bytes
  owner_lte: CONCENTRATED_Bytes
  owner_in: [CONCENTRATED_Bytes!]
  owner_not_in: [CONCENTRATED_Bytes!]
  owner_contains: CONCENTRATED_Bytes
  owner_not_contains: CONCENTRATED_Bytes
  origin: CONCENTRATED_Bytes
  origin_not: CONCENTRATED_Bytes
  origin_gt: CONCENTRATED_Bytes
  origin_lt: CONCENTRATED_Bytes
  origin_gte: CONCENTRATED_Bytes
  origin_lte: CONCENTRATED_Bytes
  origin_in: [CONCENTRATED_Bytes!]
  origin_not_in: [CONCENTRATED_Bytes!]
  origin_contains: CONCENTRATED_Bytes
  origin_not_contains: CONCENTRATED_Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amount0: CONCENTRATED_BigDecimal
  amount0_not: CONCENTRATED_BigDecimal
  amount0_gt: CONCENTRATED_BigDecimal
  amount0_lt: CONCENTRATED_BigDecimal
  amount0_gte: CONCENTRATED_BigDecimal
  amount0_lte: CONCENTRATED_BigDecimal
  amount0_in: [CONCENTRATED_BigDecimal!]
  amount0_not_in: [CONCENTRATED_BigDecimal!]
  amount1: CONCENTRATED_BigDecimal
  amount1_not: CONCENTRATED_BigDecimal
  amount1_gt: CONCENTRATED_BigDecimal
  amount1_lt: CONCENTRATED_BigDecimal
  amount1_gte: CONCENTRATED_BigDecimal
  amount1_lte: CONCENTRATED_BigDecimal
  amount1_in: [CONCENTRATED_BigDecimal!]
  amount1_not_in: [CONCENTRATED_BigDecimal!]
  amountUSD: CONCENTRATED_BigDecimal
  amountUSD_not: CONCENTRATED_BigDecimal
  amountUSD_gt: CONCENTRATED_BigDecimal
  amountUSD_lt: CONCENTRATED_BigDecimal
  amountUSD_gte: CONCENTRATED_BigDecimal
  amountUSD_lte: CONCENTRATED_BigDecimal
  amountUSD_in: [CONCENTRATED_BigDecimal!]
  amountUSD_not_in: [CONCENTRATED_BigDecimal!]
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_Burn_filter]
  or: [CONCENTRATED_Burn_filter]
}

enum CONCENTRATED_Burn_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  timestamp
  owner
  origin
  amount
  amount0
  amount1
  amountUSD
  tickLower
  tickUpper
  logIndex
}

scalar CONCENTRATED_Bytes

type CONCENTRATED_Collect {
  id: ID!
  transaction: CONCENTRATED_Transaction!
  timestamp: BigInt!
  pool: CONCENTRATED_Pool!
  owner: CONCENTRATED_Bytes
  amount0: CONCENTRATED_BigDecimal!
  amount1: CONCENTRATED_BigDecimal!
  amountUSD: CONCENTRATED_BigDecimal
  tickLower: BigInt!
  tickUpper: BigInt!
  logIndex: BigInt
  sourceName: String
}

input CONCENTRATED_Collect_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: CONCENTRATED_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: CONCENTRATED_Pool_filter
  owner: CONCENTRATED_Bytes
  owner_not: CONCENTRATED_Bytes
  owner_gt: CONCENTRATED_Bytes
  owner_lt: CONCENTRATED_Bytes
  owner_gte: CONCENTRATED_Bytes
  owner_lte: CONCENTRATED_Bytes
  owner_in: [CONCENTRATED_Bytes!]
  owner_not_in: [CONCENTRATED_Bytes!]
  owner_contains: CONCENTRATED_Bytes
  owner_not_contains: CONCENTRATED_Bytes
  amount0: CONCENTRATED_BigDecimal
  amount0_not: CONCENTRATED_BigDecimal
  amount0_gt: CONCENTRATED_BigDecimal
  amount0_lt: CONCENTRATED_BigDecimal
  amount0_gte: CONCENTRATED_BigDecimal
  amount0_lte: CONCENTRATED_BigDecimal
  amount0_in: [CONCENTRATED_BigDecimal!]
  amount0_not_in: [CONCENTRATED_BigDecimal!]
  amount1: CONCENTRATED_BigDecimal
  amount1_not: CONCENTRATED_BigDecimal
  amount1_gt: CONCENTRATED_BigDecimal
  amount1_lt: CONCENTRATED_BigDecimal
  amount1_gte: CONCENTRATED_BigDecimal
  amount1_lte: CONCENTRATED_BigDecimal
  amount1_in: [CONCENTRATED_BigDecimal!]
  amount1_not_in: [CONCENTRATED_BigDecimal!]
  amountUSD: CONCENTRATED_BigDecimal
  amountUSD_not: CONCENTRATED_BigDecimal
  amountUSD_gt: CONCENTRATED_BigDecimal
  amountUSD_lt: CONCENTRATED_BigDecimal
  amountUSD_gte: CONCENTRATED_BigDecimal
  amountUSD_lte: CONCENTRATED_BigDecimal
  amountUSD_in: [CONCENTRATED_BigDecimal!]
  amountUSD_not_in: [CONCENTRATED_BigDecimal!]
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_Collect_filter]
  or: [CONCENTRATED_Collect_filter]
}

enum CONCENTRATED_Collect_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  timestamp
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  owner
  amount0
  amount1
  amountUSD
  tickLower
  tickUpper
  logIndex
}

type CONCENTRATED_Factory {
  id: ID!
  poolCount: BigInt!
  txCount: BigInt!
  totalVolumeUSD: CONCENTRATED_BigDecimal!
  totalVolumeETH: CONCENTRATED_BigDecimal!
  totalFeesUSD: CONCENTRATED_BigDecimal!
  totalFeesETH: CONCENTRATED_BigDecimal!
  untrackedVolumeUSD: CONCENTRATED_BigDecimal!
  totalValueLockedUSD: CONCENTRATED_BigDecimal!
  totalValueLockedETH: CONCENTRATED_BigDecimal!
  totalValueLockedUSDUntracked: CONCENTRATED_BigDecimal!
  totalValueLockedETHUntracked: CONCENTRATED_BigDecimal!
  owner: ID!
  sourceName: String
}

input CONCENTRATED_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolCount: BigInt
  poolCount_not: BigInt
  poolCount_gt: BigInt
  poolCount_lt: BigInt
  poolCount_gte: BigInt
  poolCount_lte: BigInt
  poolCount_in: [BigInt!]
  poolCount_not_in: [BigInt!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  totalVolumeUSD: CONCENTRATED_BigDecimal
  totalVolumeUSD_not: CONCENTRATED_BigDecimal
  totalVolumeUSD_gt: CONCENTRATED_BigDecimal
  totalVolumeUSD_lt: CONCENTRATED_BigDecimal
  totalVolumeUSD_gte: CONCENTRATED_BigDecimal
  totalVolumeUSD_lte: CONCENTRATED_BigDecimal
  totalVolumeUSD_in: [CONCENTRATED_BigDecimal!]
  totalVolumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  totalVolumeETH: CONCENTRATED_BigDecimal
  totalVolumeETH_not: CONCENTRATED_BigDecimal
  totalVolumeETH_gt: CONCENTRATED_BigDecimal
  totalVolumeETH_lt: CONCENTRATED_BigDecimal
  totalVolumeETH_gte: CONCENTRATED_BigDecimal
  totalVolumeETH_lte: CONCENTRATED_BigDecimal
  totalVolumeETH_in: [CONCENTRATED_BigDecimal!]
  totalVolumeETH_not_in: [CONCENTRATED_BigDecimal!]
  totalFeesUSD: CONCENTRATED_BigDecimal
  totalFeesUSD_not: CONCENTRATED_BigDecimal
  totalFeesUSD_gt: CONCENTRATED_BigDecimal
  totalFeesUSD_lt: CONCENTRATED_BigDecimal
  totalFeesUSD_gte: CONCENTRATED_BigDecimal
  totalFeesUSD_lte: CONCENTRATED_BigDecimal
  totalFeesUSD_in: [CONCENTRATED_BigDecimal!]
  totalFeesUSD_not_in: [CONCENTRATED_BigDecimal!]
  totalFeesETH: CONCENTRATED_BigDecimal
  totalFeesETH_not: CONCENTRATED_BigDecimal
  totalFeesETH_gt: CONCENTRATED_BigDecimal
  totalFeesETH_lt: CONCENTRATED_BigDecimal
  totalFeesETH_gte: CONCENTRATED_BigDecimal
  totalFeesETH_lte: CONCENTRATED_BigDecimal
  totalFeesETH_in: [CONCENTRATED_BigDecimal!]
  totalFeesETH_not_in: [CONCENTRATED_BigDecimal!]
  untrackedVolumeUSD: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_not: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_gt: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_lt: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_gte: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_lte: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_in: [CONCENTRATED_BigDecimal!]
  untrackedVolumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSD: CONCENTRATED_BigDecimal
  totalValueLockedUSD_not: CONCENTRATED_BigDecimal
  totalValueLockedUSD_gt: CONCENTRATED_BigDecimal
  totalValueLockedUSD_lt: CONCENTRATED_BigDecimal
  totalValueLockedUSD_gte: CONCENTRATED_BigDecimal
  totalValueLockedUSD_lte: CONCENTRATED_BigDecimal
  totalValueLockedUSD_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSD_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedETH: CONCENTRATED_BigDecimal
  totalValueLockedETH_not: CONCENTRATED_BigDecimal
  totalValueLockedETH_gt: CONCENTRATED_BigDecimal
  totalValueLockedETH_lt: CONCENTRATED_BigDecimal
  totalValueLockedETH_gte: CONCENTRATED_BigDecimal
  totalValueLockedETH_lte: CONCENTRATED_BigDecimal
  totalValueLockedETH_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedETH_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSDUntracked: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_not: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_gt: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_lt: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_gte: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_lte: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSDUntracked_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedETHUntracked: CONCENTRATED_BigDecimal
  totalValueLockedETHUntracked_not: CONCENTRATED_BigDecimal
  totalValueLockedETHUntracked_gt: CONCENTRATED_BigDecimal
  totalValueLockedETHUntracked_lt: CONCENTRATED_BigDecimal
  totalValueLockedETHUntracked_gte: CONCENTRATED_BigDecimal
  totalValueLockedETHUntracked_lte: CONCENTRATED_BigDecimal
  totalValueLockedETHUntracked_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedETHUntracked_not_in: [CONCENTRATED_BigDecimal!]
  owner: ID
  owner_not: ID
  owner_gt: ID
  owner_lt: ID
  owner_gte: ID
  owner_lte: ID
  owner_in: [ID!]
  owner_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_Factory_filter]
  or: [CONCENTRATED_Factory_filter]
}

enum CONCENTRATED_Factory_orderBy {
  id
  poolCount
  txCount
  totalVolumeUSD
  totalVolumeETH
  totalFeesUSD
  totalFeesETH
  untrackedVolumeUSD
  totalValueLockedUSD
  totalValueLockedETH
  totalValueLockedUSDUntracked
  totalValueLockedETHUntracked
  owner
}

type CONCENTRATED_Flash {
  id: ID!
  transaction: CONCENTRATED_Transaction!
  timestamp: BigInt!
  pool: CONCENTRATED_Pool!
  sender: CONCENTRATED_Bytes!
  recipient: CONCENTRATED_Bytes!
  amount0: CONCENTRATED_BigDecimal!
  amount1: CONCENTRATED_BigDecimal!
  amountUSD: CONCENTRATED_BigDecimal!
  amount0Paid: CONCENTRATED_BigDecimal!
  amount1Paid: CONCENTRATED_BigDecimal!
  logIndex: BigInt
  sourceName: String
}

input CONCENTRATED_Flash_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: CONCENTRATED_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: CONCENTRATED_Pool_filter
  sender: CONCENTRATED_Bytes
  sender_not: CONCENTRATED_Bytes
  sender_gt: CONCENTRATED_Bytes
  sender_lt: CONCENTRATED_Bytes
  sender_gte: CONCENTRATED_Bytes
  sender_lte: CONCENTRATED_Bytes
  sender_in: [CONCENTRATED_Bytes!]
  sender_not_in: [CONCENTRATED_Bytes!]
  sender_contains: CONCENTRATED_Bytes
  sender_not_contains: CONCENTRATED_Bytes
  recipient: CONCENTRATED_Bytes
  recipient_not: CONCENTRATED_Bytes
  recipient_gt: CONCENTRATED_Bytes
  recipient_lt: CONCENTRATED_Bytes
  recipient_gte: CONCENTRATED_Bytes
  recipient_lte: CONCENTRATED_Bytes
  recipient_in: [CONCENTRATED_Bytes!]
  recipient_not_in: [CONCENTRATED_Bytes!]
  recipient_contains: CONCENTRATED_Bytes
  recipient_not_contains: CONCENTRATED_Bytes
  amount0: CONCENTRATED_BigDecimal
  amount0_not: CONCENTRATED_BigDecimal
  amount0_gt: CONCENTRATED_BigDecimal
  amount0_lt: CONCENTRATED_BigDecimal
  amount0_gte: CONCENTRATED_BigDecimal
  amount0_lte: CONCENTRATED_BigDecimal
  amount0_in: [CONCENTRATED_BigDecimal!]
  amount0_not_in: [CONCENTRATED_BigDecimal!]
  amount1: CONCENTRATED_BigDecimal
  amount1_not: CONCENTRATED_BigDecimal
  amount1_gt: CONCENTRATED_BigDecimal
  amount1_lt: CONCENTRATED_BigDecimal
  amount1_gte: CONCENTRATED_BigDecimal
  amount1_lte: CONCENTRATED_BigDecimal
  amount1_in: [CONCENTRATED_BigDecimal!]
  amount1_not_in: [CONCENTRATED_BigDecimal!]
  amountUSD: CONCENTRATED_BigDecimal
  amountUSD_not: CONCENTRATED_BigDecimal
  amountUSD_gt: CONCENTRATED_BigDecimal
  amountUSD_lt: CONCENTRATED_BigDecimal
  amountUSD_gte: CONCENTRATED_BigDecimal
  amountUSD_lte: CONCENTRATED_BigDecimal
  amountUSD_in: [CONCENTRATED_BigDecimal!]
  amountUSD_not_in: [CONCENTRATED_BigDecimal!]
  amount0Paid: CONCENTRATED_BigDecimal
  amount0Paid_not: CONCENTRATED_BigDecimal
  amount0Paid_gt: CONCENTRATED_BigDecimal
  amount0Paid_lt: CONCENTRATED_BigDecimal
  amount0Paid_gte: CONCENTRATED_BigDecimal
  amount0Paid_lte: CONCENTRATED_BigDecimal
  amount0Paid_in: [CONCENTRATED_BigDecimal!]
  amount0Paid_not_in: [CONCENTRATED_BigDecimal!]
  amount1Paid: CONCENTRATED_BigDecimal
  amount1Paid_not: CONCENTRATED_BigDecimal
  amount1Paid_gt: CONCENTRATED_BigDecimal
  amount1Paid_lt: CONCENTRATED_BigDecimal
  amount1Paid_gte: CONCENTRATED_BigDecimal
  amount1Paid_lte: CONCENTRATED_BigDecimal
  amount1Paid_in: [CONCENTRATED_BigDecimal!]
  amount1Paid_not_in: [CONCENTRATED_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_Flash_filter]
  or: [CONCENTRATED_Flash_filter]
}

enum CONCENTRATED_Flash_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  timestamp
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  sender
  recipient
  amount0
  amount1
  amountUSD
  amount0Paid
  amount1Paid
  logIndex
}

"""
8 bytes signed integer

"""
scalar CONCENTRATED_Int8

type CONCENTRATED_Mint {
  id: ID!
  transaction: CONCENTRATED_Transaction!
  timestamp: BigInt!
  pool: CONCENTRATED_Pool!
  token0: CONCENTRATED_Token!
  token1: CONCENTRATED_Token!
  owner: CONCENTRATED_Bytes!
  sender: CONCENTRATED_Bytes
  origin: CONCENTRATED_Bytes!
  amount: BigInt!
  amount0: CONCENTRATED_BigDecimal!
  amount1: CONCENTRATED_BigDecimal!
  amountUSD: CONCENTRATED_BigDecimal
  tickLower: BigInt!
  tickUpper: BigInt!
  logIndex: BigInt
  sourceName: String
}

input CONCENTRATED_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: CONCENTRATED_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: CONCENTRATED_Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: CONCENTRATED_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: CONCENTRATED_Token_filter
  owner: CONCENTRATED_Bytes
  owner_not: CONCENTRATED_Bytes
  owner_gt: CONCENTRATED_Bytes
  owner_lt: CONCENTRATED_Bytes
  owner_gte: CONCENTRATED_Bytes
  owner_lte: CONCENTRATED_Bytes
  owner_in: [CONCENTRATED_Bytes!]
  owner_not_in: [CONCENTRATED_Bytes!]
  owner_contains: CONCENTRATED_Bytes
  owner_not_contains: CONCENTRATED_Bytes
  sender: CONCENTRATED_Bytes
  sender_not: CONCENTRATED_Bytes
  sender_gt: CONCENTRATED_Bytes
  sender_lt: CONCENTRATED_Bytes
  sender_gte: CONCENTRATED_Bytes
  sender_lte: CONCENTRATED_Bytes
  sender_in: [CONCENTRATED_Bytes!]
  sender_not_in: [CONCENTRATED_Bytes!]
  sender_contains: CONCENTRATED_Bytes
  sender_not_contains: CONCENTRATED_Bytes
  origin: CONCENTRATED_Bytes
  origin_not: CONCENTRATED_Bytes
  origin_gt: CONCENTRATED_Bytes
  origin_lt: CONCENTRATED_Bytes
  origin_gte: CONCENTRATED_Bytes
  origin_lte: CONCENTRATED_Bytes
  origin_in: [CONCENTRATED_Bytes!]
  origin_not_in: [CONCENTRATED_Bytes!]
  origin_contains: CONCENTRATED_Bytes
  origin_not_contains: CONCENTRATED_Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amount0: CONCENTRATED_BigDecimal
  amount0_not: CONCENTRATED_BigDecimal
  amount0_gt: CONCENTRATED_BigDecimal
  amount0_lt: CONCENTRATED_BigDecimal
  amount0_gte: CONCENTRATED_BigDecimal
  amount0_lte: CONCENTRATED_BigDecimal
  amount0_in: [CONCENTRATED_BigDecimal!]
  amount0_not_in: [CONCENTRATED_BigDecimal!]
  amount1: CONCENTRATED_BigDecimal
  amount1_not: CONCENTRATED_BigDecimal
  amount1_gt: CONCENTRATED_BigDecimal
  amount1_lt: CONCENTRATED_BigDecimal
  amount1_gte: CONCENTRATED_BigDecimal
  amount1_lte: CONCENTRATED_BigDecimal
  amount1_in: [CONCENTRATED_BigDecimal!]
  amount1_not_in: [CONCENTRATED_BigDecimal!]
  amountUSD: CONCENTRATED_BigDecimal
  amountUSD_not: CONCENTRATED_BigDecimal
  amountUSD_gt: CONCENTRATED_BigDecimal
  amountUSD_lt: CONCENTRATED_BigDecimal
  amountUSD_gte: CONCENTRATED_BigDecimal
  amountUSD_lte: CONCENTRATED_BigDecimal
  amountUSD_in: [CONCENTRATED_BigDecimal!]
  amountUSD_not_in: [CONCENTRATED_BigDecimal!]
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_Mint_filter]
  or: [CONCENTRATED_Mint_filter]
}

enum CONCENTRATED_Mint_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  timestamp
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  owner
  sender
  origin
  amount
  amount0
  amount1
  amountUSD
  tickLower
  tickUpper
  logIndex
}

"""Defines the order direction, either ascending or descending"""
enum CONCENTRATED_OrderDirection {
  asc
  desc
}

type CONCENTRATED_Pool {
  id: ID!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  token0: CONCENTRATED_Token!
  token1: CONCENTRATED_Token!
  feeTier: BigInt!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  feeGrowthGlobal0X128: BigInt!
  feeGrowthGlobal1X128: BigInt!
  token0Price: CONCENTRATED_BigDecimal!
  token1Price: CONCENTRATED_BigDecimal!
  tick: BigInt
  observationIndex: BigInt!
  volumeToken0: CONCENTRATED_BigDecimal!
  volumeToken1: CONCENTRATED_BigDecimal!
  volumeUSD: CONCENTRATED_BigDecimal!
  untrackedVolumeUSD: CONCENTRATED_BigDecimal!
  feesUSD: CONCENTRATED_BigDecimal!
  txCount: BigInt!
  collectedFeesToken0: CONCENTRATED_BigDecimal!
  collectedFeesToken1: CONCENTRATED_BigDecimal!
  collectedFeesUSD: CONCENTRATED_BigDecimal!
  totalValueLockedToken0: CONCENTRATED_BigDecimal!
  totalValueLockedToken1: CONCENTRATED_BigDecimal!
  totalValueLockedETH: CONCENTRATED_BigDecimal!
  totalValueLockedUSD: CONCENTRATED_BigDecimal!
  totalValueLockedUSDUntracked: CONCENTRATED_BigDecimal!
  liquidityProviderCount: BigInt!
  poolHourData(skip: Int = 0, first: Int = 100, orderBy: CONCENTRATED_PoolHourData_orderBy, orderDirection: CONCENTRATED_OrderDirection, where: CONCENTRATED_PoolHourData_filter): [CONCENTRATED_PoolHourData!]!
  poolDayData(skip: Int = 0, first: Int = 100, orderBy: CONCENTRATED_PoolDayData_orderBy, orderDirection: CONCENTRATED_OrderDirection, where: CONCENTRATED_PoolDayData_filter): [CONCENTRATED_PoolDayData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: CONCENTRATED_Mint_orderBy, orderDirection: CONCENTRATED_OrderDirection, where: CONCENTRATED_Mint_filter): [CONCENTRATED_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: CONCENTRATED_Burn_orderBy, orderDirection: CONCENTRATED_OrderDirection, where: CONCENTRATED_Burn_filter): [CONCENTRATED_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: CONCENTRATED_Swap_orderBy, orderDirection: CONCENTRATED_OrderDirection, where: CONCENTRATED_Swap_filter): [CONCENTRATED_Swap!]!
  collects(skip: Int = 0, first: Int = 100, orderBy: CONCENTRATED_Collect_orderBy, orderDirection: CONCENTRATED_OrderDirection, where: CONCENTRATED_Collect_filter): [CONCENTRATED_Collect!]!
  ticks(skip: Int = 0, first: Int = 100, orderBy: CONCENTRATED_Tick_orderBy, orderDirection: CONCENTRATED_OrderDirection, where: CONCENTRATED_Tick_filter): [CONCENTRATED_Tick!]!
  sourceName: String
}

type CONCENTRATED_PoolDayData {
  id: ID!
  date: Int!
  pool: CONCENTRATED_Pool!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  token0Price: CONCENTRATED_BigDecimal!
  token1Price: CONCENTRATED_BigDecimal!
  tick: BigInt
  feeGrowthGlobal0X128: BigInt!
  feeGrowthGlobal1X128: BigInt!
  tvlUSD: CONCENTRATED_BigDecimal!
  volumeToken0: CONCENTRATED_BigDecimal!
  volumeToken1: CONCENTRATED_BigDecimal!
  volumeUSD: CONCENTRATED_BigDecimal!
  feesUSD: CONCENTRATED_BigDecimal!
  txCount: BigInt!
  open: CONCENTRATED_BigDecimal!
  high: CONCENTRATED_BigDecimal!
  low: CONCENTRATED_BigDecimal!
  close: CONCENTRATED_BigDecimal!
  sourceName: String
}

input CONCENTRATED_PoolDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: CONCENTRATED_Pool_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  sqrtPrice: BigInt
  sqrtPrice_not: BigInt
  sqrtPrice_gt: BigInt
  sqrtPrice_lt: BigInt
  sqrtPrice_gte: BigInt
  sqrtPrice_lte: BigInt
  sqrtPrice_in: [BigInt!]
  sqrtPrice_not_in: [BigInt!]
  token0Price: CONCENTRATED_BigDecimal
  token0Price_not: CONCENTRATED_BigDecimal
  token0Price_gt: CONCENTRATED_BigDecimal
  token0Price_lt: CONCENTRATED_BigDecimal
  token0Price_gte: CONCENTRATED_BigDecimal
  token0Price_lte: CONCENTRATED_BigDecimal
  token0Price_in: [CONCENTRATED_BigDecimal!]
  token0Price_not_in: [CONCENTRATED_BigDecimal!]
  token1Price: CONCENTRATED_BigDecimal
  token1Price_not: CONCENTRATED_BigDecimal
  token1Price_gt: CONCENTRATED_BigDecimal
  token1Price_lt: CONCENTRATED_BigDecimal
  token1Price_gte: CONCENTRATED_BigDecimal
  token1Price_lte: CONCENTRATED_BigDecimal
  token1Price_in: [CONCENTRATED_BigDecimal!]
  token1Price_not_in: [CONCENTRATED_BigDecimal!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  feeGrowthGlobal0X128: BigInt
  feeGrowthGlobal0X128_not: BigInt
  feeGrowthGlobal0X128_gt: BigInt
  feeGrowthGlobal0X128_lt: BigInt
  feeGrowthGlobal0X128_gte: BigInt
  feeGrowthGlobal0X128_lte: BigInt
  feeGrowthGlobal0X128_in: [BigInt!]
  feeGrowthGlobal0X128_not_in: [BigInt!]
  feeGrowthGlobal1X128: BigInt
  feeGrowthGlobal1X128_not: BigInt
  feeGrowthGlobal1X128_gt: BigInt
  feeGrowthGlobal1X128_lt: BigInt
  feeGrowthGlobal1X128_gte: BigInt
  feeGrowthGlobal1X128_lte: BigInt
  feeGrowthGlobal1X128_in: [BigInt!]
  feeGrowthGlobal1X128_not_in: [BigInt!]
  tvlUSD: CONCENTRATED_BigDecimal
  tvlUSD_not: CONCENTRATED_BigDecimal
  tvlUSD_gt: CONCENTRATED_BigDecimal
  tvlUSD_lt: CONCENTRATED_BigDecimal
  tvlUSD_gte: CONCENTRATED_BigDecimal
  tvlUSD_lte: CONCENTRATED_BigDecimal
  tvlUSD_in: [CONCENTRATED_BigDecimal!]
  tvlUSD_not_in: [CONCENTRATED_BigDecimal!]
  volumeToken0: CONCENTRATED_BigDecimal
  volumeToken0_not: CONCENTRATED_BigDecimal
  volumeToken0_gt: CONCENTRATED_BigDecimal
  volumeToken0_lt: CONCENTRATED_BigDecimal
  volumeToken0_gte: CONCENTRATED_BigDecimal
  volumeToken0_lte: CONCENTRATED_BigDecimal
  volumeToken0_in: [CONCENTRATED_BigDecimal!]
  volumeToken0_not_in: [CONCENTRATED_BigDecimal!]
  volumeToken1: CONCENTRATED_BigDecimal
  volumeToken1_not: CONCENTRATED_BigDecimal
  volumeToken1_gt: CONCENTRATED_BigDecimal
  volumeToken1_lt: CONCENTRATED_BigDecimal
  volumeToken1_gte: CONCENTRATED_BigDecimal
  volumeToken1_lte: CONCENTRATED_BigDecimal
  volumeToken1_in: [CONCENTRATED_BigDecimal!]
  volumeToken1_not_in: [CONCENTRATED_BigDecimal!]
  volumeUSD: CONCENTRATED_BigDecimal
  volumeUSD_not: CONCENTRATED_BigDecimal
  volumeUSD_gt: CONCENTRATED_BigDecimal
  volumeUSD_lt: CONCENTRATED_BigDecimal
  volumeUSD_gte: CONCENTRATED_BigDecimal
  volumeUSD_lte: CONCENTRATED_BigDecimal
  volumeUSD_in: [CONCENTRATED_BigDecimal!]
  volumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  feesUSD: CONCENTRATED_BigDecimal
  feesUSD_not: CONCENTRATED_BigDecimal
  feesUSD_gt: CONCENTRATED_BigDecimal
  feesUSD_lt: CONCENTRATED_BigDecimal
  feesUSD_gte: CONCENTRATED_BigDecimal
  feesUSD_lte: CONCENTRATED_BigDecimal
  feesUSD_in: [CONCENTRATED_BigDecimal!]
  feesUSD_not_in: [CONCENTRATED_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  open: CONCENTRATED_BigDecimal
  open_not: CONCENTRATED_BigDecimal
  open_gt: CONCENTRATED_BigDecimal
  open_lt: CONCENTRATED_BigDecimal
  open_gte: CONCENTRATED_BigDecimal
  open_lte: CONCENTRATED_BigDecimal
  open_in: [CONCENTRATED_BigDecimal!]
  open_not_in: [CONCENTRATED_BigDecimal!]
  high: CONCENTRATED_BigDecimal
  high_not: CONCENTRATED_BigDecimal
  high_gt: CONCENTRATED_BigDecimal
  high_lt: CONCENTRATED_BigDecimal
  high_gte: CONCENTRATED_BigDecimal
  high_lte: CONCENTRATED_BigDecimal
  high_in: [CONCENTRATED_BigDecimal!]
  high_not_in: [CONCENTRATED_BigDecimal!]
  low: CONCENTRATED_BigDecimal
  low_not: CONCENTRATED_BigDecimal
  low_gt: CONCENTRATED_BigDecimal
  low_lt: CONCENTRATED_BigDecimal
  low_gte: CONCENTRATED_BigDecimal
  low_lte: CONCENTRATED_BigDecimal
  low_in: [CONCENTRATED_BigDecimal!]
  low_not_in: [CONCENTRATED_BigDecimal!]
  close: CONCENTRATED_BigDecimal
  close_not: CONCENTRATED_BigDecimal
  close_gt: CONCENTRATED_BigDecimal
  close_lt: CONCENTRATED_BigDecimal
  close_gte: CONCENTRATED_BigDecimal
  close_lte: CONCENTRATED_BigDecimal
  close_in: [CONCENTRATED_BigDecimal!]
  close_not_in: [CONCENTRATED_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_PoolDayData_filter]
  or: [CONCENTRATED_PoolDayData_filter]
}

enum CONCENTRATED_PoolDayData_orderBy {
  id
  date
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  liquidity
  sqrtPrice
  token0Price
  token1Price
  tick
  feeGrowthGlobal0X128
  feeGrowthGlobal1X128
  tvlUSD
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
  txCount
  open
  high
  low
  close
}

type CONCENTRATED_PoolHourData {
  id: ID!
  periodStartUnix: Int!
  pool: CONCENTRATED_Pool!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  token0Price: CONCENTRATED_BigDecimal!
  token1Price: CONCENTRATED_BigDecimal!
  tick: BigInt
  feeGrowthGlobal0X128: BigInt!
  feeGrowthGlobal1X128: BigInt!
  tvlUSD: CONCENTRATED_BigDecimal!
  volumeToken0: CONCENTRATED_BigDecimal!
  volumeToken1: CONCENTRATED_BigDecimal!
  volumeUSD: CONCENTRATED_BigDecimal!
  feesUSD: CONCENTRATED_BigDecimal!
  txCount: BigInt!
  open: CONCENTRATED_BigDecimal!
  high: CONCENTRATED_BigDecimal!
  low: CONCENTRATED_BigDecimal!
  close: CONCENTRATED_BigDecimal!
  sourceName: String
}

input CONCENTRATED_PoolHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  periodStartUnix: Int
  periodStartUnix_not: Int
  periodStartUnix_gt: Int
  periodStartUnix_lt: Int
  periodStartUnix_gte: Int
  periodStartUnix_lte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: CONCENTRATED_Pool_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  sqrtPrice: BigInt
  sqrtPrice_not: BigInt
  sqrtPrice_gt: BigInt
  sqrtPrice_lt: BigInt
  sqrtPrice_gte: BigInt
  sqrtPrice_lte: BigInt
  sqrtPrice_in: [BigInt!]
  sqrtPrice_not_in: [BigInt!]
  token0Price: CONCENTRATED_BigDecimal
  token0Price_not: CONCENTRATED_BigDecimal
  token0Price_gt: CONCENTRATED_BigDecimal
  token0Price_lt: CONCENTRATED_BigDecimal
  token0Price_gte: CONCENTRATED_BigDecimal
  token0Price_lte: CONCENTRATED_BigDecimal
  token0Price_in: [CONCENTRATED_BigDecimal!]
  token0Price_not_in: [CONCENTRATED_BigDecimal!]
  token1Price: CONCENTRATED_BigDecimal
  token1Price_not: CONCENTRATED_BigDecimal
  token1Price_gt: CONCENTRATED_BigDecimal
  token1Price_lt: CONCENTRATED_BigDecimal
  token1Price_gte: CONCENTRATED_BigDecimal
  token1Price_lte: CONCENTRATED_BigDecimal
  token1Price_in: [CONCENTRATED_BigDecimal!]
  token1Price_not_in: [CONCENTRATED_BigDecimal!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  feeGrowthGlobal0X128: BigInt
  feeGrowthGlobal0X128_not: BigInt
  feeGrowthGlobal0X128_gt: BigInt
  feeGrowthGlobal0X128_lt: BigInt
  feeGrowthGlobal0X128_gte: BigInt
  feeGrowthGlobal0X128_lte: BigInt
  feeGrowthGlobal0X128_in: [BigInt!]
  feeGrowthGlobal0X128_not_in: [BigInt!]
  feeGrowthGlobal1X128: BigInt
  feeGrowthGlobal1X128_not: BigInt
  feeGrowthGlobal1X128_gt: BigInt
  feeGrowthGlobal1X128_lt: BigInt
  feeGrowthGlobal1X128_gte: BigInt
  feeGrowthGlobal1X128_lte: BigInt
  feeGrowthGlobal1X128_in: [BigInt!]
  feeGrowthGlobal1X128_not_in: [BigInt!]
  tvlUSD: CONCENTRATED_BigDecimal
  tvlUSD_not: CONCENTRATED_BigDecimal
  tvlUSD_gt: CONCENTRATED_BigDecimal
  tvlUSD_lt: CONCENTRATED_BigDecimal
  tvlUSD_gte: CONCENTRATED_BigDecimal
  tvlUSD_lte: CONCENTRATED_BigDecimal
  tvlUSD_in: [CONCENTRATED_BigDecimal!]
  tvlUSD_not_in: [CONCENTRATED_BigDecimal!]
  volumeToken0: CONCENTRATED_BigDecimal
  volumeToken0_not: CONCENTRATED_BigDecimal
  volumeToken0_gt: CONCENTRATED_BigDecimal
  volumeToken0_lt: CONCENTRATED_BigDecimal
  volumeToken0_gte: CONCENTRATED_BigDecimal
  volumeToken0_lte: CONCENTRATED_BigDecimal
  volumeToken0_in: [CONCENTRATED_BigDecimal!]
  volumeToken0_not_in: [CONCENTRATED_BigDecimal!]
  volumeToken1: CONCENTRATED_BigDecimal
  volumeToken1_not: CONCENTRATED_BigDecimal
  volumeToken1_gt: CONCENTRATED_BigDecimal
  volumeToken1_lt: CONCENTRATED_BigDecimal
  volumeToken1_gte: CONCENTRATED_BigDecimal
  volumeToken1_lte: CONCENTRATED_BigDecimal
  volumeToken1_in: [CONCENTRATED_BigDecimal!]
  volumeToken1_not_in: [CONCENTRATED_BigDecimal!]
  volumeUSD: CONCENTRATED_BigDecimal
  volumeUSD_not: CONCENTRATED_BigDecimal
  volumeUSD_gt: CONCENTRATED_BigDecimal
  volumeUSD_lt: CONCENTRATED_BigDecimal
  volumeUSD_gte: CONCENTRATED_BigDecimal
  volumeUSD_lte: CONCENTRATED_BigDecimal
  volumeUSD_in: [CONCENTRATED_BigDecimal!]
  volumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  feesUSD: CONCENTRATED_BigDecimal
  feesUSD_not: CONCENTRATED_BigDecimal
  feesUSD_gt: CONCENTRATED_BigDecimal
  feesUSD_lt: CONCENTRATED_BigDecimal
  feesUSD_gte: CONCENTRATED_BigDecimal
  feesUSD_lte: CONCENTRATED_BigDecimal
  feesUSD_in: [CONCENTRATED_BigDecimal!]
  feesUSD_not_in: [CONCENTRATED_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  open: CONCENTRATED_BigDecimal
  open_not: CONCENTRATED_BigDecimal
  open_gt: CONCENTRATED_BigDecimal
  open_lt: CONCENTRATED_BigDecimal
  open_gte: CONCENTRATED_BigDecimal
  open_lte: CONCENTRATED_BigDecimal
  open_in: [CONCENTRATED_BigDecimal!]
  open_not_in: [CONCENTRATED_BigDecimal!]
  high: CONCENTRATED_BigDecimal
  high_not: CONCENTRATED_BigDecimal
  high_gt: CONCENTRATED_BigDecimal
  high_lt: CONCENTRATED_BigDecimal
  high_gte: CONCENTRATED_BigDecimal
  high_lte: CONCENTRATED_BigDecimal
  high_in: [CONCENTRATED_BigDecimal!]
  high_not_in: [CONCENTRATED_BigDecimal!]
  low: CONCENTRATED_BigDecimal
  low_not: CONCENTRATED_BigDecimal
  low_gt: CONCENTRATED_BigDecimal
  low_lt: CONCENTRATED_BigDecimal
  low_gte: CONCENTRATED_BigDecimal
  low_lte: CONCENTRATED_BigDecimal
  low_in: [CONCENTRATED_BigDecimal!]
  low_not_in: [CONCENTRATED_BigDecimal!]
  close: CONCENTRATED_BigDecimal
  close_not: CONCENTRATED_BigDecimal
  close_gt: CONCENTRATED_BigDecimal
  close_lt: CONCENTRATED_BigDecimal
  close_gte: CONCENTRATED_BigDecimal
  close_lte: CONCENTRATED_BigDecimal
  close_in: [CONCENTRATED_BigDecimal!]
  close_not_in: [CONCENTRATED_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_PoolHourData_filter]
  or: [CONCENTRATED_PoolHourData_filter]
}

enum CONCENTRATED_PoolHourData_orderBy {
  id
  periodStartUnix
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  liquidity
  sqrtPrice
  token0Price
  token1Price
  tick
  feeGrowthGlobal0X128
  feeGrowthGlobal1X128
  tvlUSD
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
  txCount
  open
  high
  low
  close
}

input CONCENTRATED_Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: CONCENTRATED_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: CONCENTRATED_Token_filter
  feeTier: BigInt
  feeTier_not: BigInt
  feeTier_gt: BigInt
  feeTier_lt: BigInt
  feeTier_gte: BigInt
  feeTier_lte: BigInt
  feeTier_in: [BigInt!]
  feeTier_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  sqrtPrice: BigInt
  sqrtPrice_not: BigInt
  sqrtPrice_gt: BigInt
  sqrtPrice_lt: BigInt
  sqrtPrice_gte: BigInt
  sqrtPrice_lte: BigInt
  sqrtPrice_in: [BigInt!]
  sqrtPrice_not_in: [BigInt!]
  feeGrowthGlobal0X128: BigInt
  feeGrowthGlobal0X128_not: BigInt
  feeGrowthGlobal0X128_gt: BigInt
  feeGrowthGlobal0X128_lt: BigInt
  feeGrowthGlobal0X128_gte: BigInt
  feeGrowthGlobal0X128_lte: BigInt
  feeGrowthGlobal0X128_in: [BigInt!]
  feeGrowthGlobal0X128_not_in: [BigInt!]
  feeGrowthGlobal1X128: BigInt
  feeGrowthGlobal1X128_not: BigInt
  feeGrowthGlobal1X128_gt: BigInt
  feeGrowthGlobal1X128_lt: BigInt
  feeGrowthGlobal1X128_gte: BigInt
  feeGrowthGlobal1X128_lte: BigInt
  feeGrowthGlobal1X128_in: [BigInt!]
  feeGrowthGlobal1X128_not_in: [BigInt!]
  token0Price: CONCENTRATED_BigDecimal
  token0Price_not: CONCENTRATED_BigDecimal
  token0Price_gt: CONCENTRATED_BigDecimal
  token0Price_lt: CONCENTRATED_BigDecimal
  token0Price_gte: CONCENTRATED_BigDecimal
  token0Price_lte: CONCENTRATED_BigDecimal
  token0Price_in: [CONCENTRATED_BigDecimal!]
  token0Price_not_in: [CONCENTRATED_BigDecimal!]
  token1Price: CONCENTRATED_BigDecimal
  token1Price_not: CONCENTRATED_BigDecimal
  token1Price_gt: CONCENTRATED_BigDecimal
  token1Price_lt: CONCENTRATED_BigDecimal
  token1Price_gte: CONCENTRATED_BigDecimal
  token1Price_lte: CONCENTRATED_BigDecimal
  token1Price_in: [CONCENTRATED_BigDecimal!]
  token1Price_not_in: [CONCENTRATED_BigDecimal!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  observationIndex: BigInt
  observationIndex_not: BigInt
  observationIndex_gt: BigInt
  observationIndex_lt: BigInt
  observationIndex_gte: BigInt
  observationIndex_lte: BigInt
  observationIndex_in: [BigInt!]
  observationIndex_not_in: [BigInt!]
  volumeToken0: CONCENTRATED_BigDecimal
  volumeToken0_not: CONCENTRATED_BigDecimal
  volumeToken0_gt: CONCENTRATED_BigDecimal
  volumeToken0_lt: CONCENTRATED_BigDecimal
  volumeToken0_gte: CONCENTRATED_BigDecimal
  volumeToken0_lte: CONCENTRATED_BigDecimal
  volumeToken0_in: [CONCENTRATED_BigDecimal!]
  volumeToken0_not_in: [CONCENTRATED_BigDecimal!]
  volumeToken1: CONCENTRATED_BigDecimal
  volumeToken1_not: CONCENTRATED_BigDecimal
  volumeToken1_gt: CONCENTRATED_BigDecimal
  volumeToken1_lt: CONCENTRATED_BigDecimal
  volumeToken1_gte: CONCENTRATED_BigDecimal
  volumeToken1_lte: CONCENTRATED_BigDecimal
  volumeToken1_in: [CONCENTRATED_BigDecimal!]
  volumeToken1_not_in: [CONCENTRATED_BigDecimal!]
  volumeUSD: CONCENTRATED_BigDecimal
  volumeUSD_not: CONCENTRATED_BigDecimal
  volumeUSD_gt: CONCENTRATED_BigDecimal
  volumeUSD_lt: CONCENTRATED_BigDecimal
  volumeUSD_gte: CONCENTRATED_BigDecimal
  volumeUSD_lte: CONCENTRATED_BigDecimal
  volumeUSD_in: [CONCENTRATED_BigDecimal!]
  volumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  untrackedVolumeUSD: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_not: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_gt: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_lt: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_gte: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_lte: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_in: [CONCENTRATED_BigDecimal!]
  untrackedVolumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  feesUSD: CONCENTRATED_BigDecimal
  feesUSD_not: CONCENTRATED_BigDecimal
  feesUSD_gt: CONCENTRATED_BigDecimal
  feesUSD_lt: CONCENTRATED_BigDecimal
  feesUSD_gte: CONCENTRATED_BigDecimal
  feesUSD_lte: CONCENTRATED_BigDecimal
  feesUSD_in: [CONCENTRATED_BigDecimal!]
  feesUSD_not_in: [CONCENTRATED_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  collectedFeesToken0: CONCENTRATED_BigDecimal
  collectedFeesToken0_not: CONCENTRATED_BigDecimal
  collectedFeesToken0_gt: CONCENTRATED_BigDecimal
  collectedFeesToken0_lt: CONCENTRATED_BigDecimal
  collectedFeesToken0_gte: CONCENTRATED_BigDecimal
  collectedFeesToken0_lte: CONCENTRATED_BigDecimal
  collectedFeesToken0_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken0_not_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken1: CONCENTRATED_BigDecimal
  collectedFeesToken1_not: CONCENTRATED_BigDecimal
  collectedFeesToken1_gt: CONCENTRATED_BigDecimal
  collectedFeesToken1_lt: CONCENTRATED_BigDecimal
  collectedFeesToken1_gte: CONCENTRATED_BigDecimal
  collectedFeesToken1_lte: CONCENTRATED_BigDecimal
  collectedFeesToken1_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken1_not_in: [CONCENTRATED_BigDecimal!]
  collectedFeesUSD: CONCENTRATED_BigDecimal
  collectedFeesUSD_not: CONCENTRATED_BigDecimal
  collectedFeesUSD_gt: CONCENTRATED_BigDecimal
  collectedFeesUSD_lt: CONCENTRATED_BigDecimal
  collectedFeesUSD_gte: CONCENTRATED_BigDecimal
  collectedFeesUSD_lte: CONCENTRATED_BigDecimal
  collectedFeesUSD_in: [CONCENTRATED_BigDecimal!]
  collectedFeesUSD_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedToken0: CONCENTRATED_BigDecimal
  totalValueLockedToken0_not: CONCENTRATED_BigDecimal
  totalValueLockedToken0_gt: CONCENTRATED_BigDecimal
  totalValueLockedToken0_lt: CONCENTRATED_BigDecimal
  totalValueLockedToken0_gte: CONCENTRATED_BigDecimal
  totalValueLockedToken0_lte: CONCENTRATED_BigDecimal
  totalValueLockedToken0_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedToken0_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedToken1: CONCENTRATED_BigDecimal
  totalValueLockedToken1_not: CONCENTRATED_BigDecimal
  totalValueLockedToken1_gt: CONCENTRATED_BigDecimal
  totalValueLockedToken1_lt: CONCENTRATED_BigDecimal
  totalValueLockedToken1_gte: CONCENTRATED_BigDecimal
  totalValueLockedToken1_lte: CONCENTRATED_BigDecimal
  totalValueLockedToken1_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedToken1_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedETH: CONCENTRATED_BigDecimal
  totalValueLockedETH_not: CONCENTRATED_BigDecimal
  totalValueLockedETH_gt: CONCENTRATED_BigDecimal
  totalValueLockedETH_lt: CONCENTRATED_BigDecimal
  totalValueLockedETH_gte: CONCENTRATED_BigDecimal
  totalValueLockedETH_lte: CONCENTRATED_BigDecimal
  totalValueLockedETH_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedETH_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSD: CONCENTRATED_BigDecimal
  totalValueLockedUSD_not: CONCENTRATED_BigDecimal
  totalValueLockedUSD_gt: CONCENTRATED_BigDecimal
  totalValueLockedUSD_lt: CONCENTRATED_BigDecimal
  totalValueLockedUSD_gte: CONCENTRATED_BigDecimal
  totalValueLockedUSD_lte: CONCENTRATED_BigDecimal
  totalValueLockedUSD_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSD_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSDUntracked: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_not: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_gt: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_lt: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_gte: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_lte: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSDUntracked_not_in: [CONCENTRATED_BigDecimal!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  poolHourData_: CONCENTRATED_PoolHourData_filter
  poolDayData_: CONCENTRATED_PoolDayData_filter
  mints_: CONCENTRATED_Mint_filter
  burns_: CONCENTRATED_Burn_filter
  swaps_: CONCENTRATED_Swap_filter
  collects_: CONCENTRATED_Collect_filter
  ticks_: CONCENTRATED_Tick_filter
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_Pool_filter]
  or: [CONCENTRATED_Pool_filter]
}

enum CONCENTRATED_Pool_orderBy {
  id
  createdAtTimestamp
  createdAtBlockNumber
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  feeTier
  liquidity
  sqrtPrice
  feeGrowthGlobal0X128
  feeGrowthGlobal1X128
  token0Price
  token1Price
  tick
  observationIndex
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  feesUSD
  txCount
  collectedFeesToken0
  collectedFeesToken1
  collectedFeesUSD
  totalValueLockedToken0
  totalValueLockedToken1
  totalValueLockedETH
  totalValueLockedUSD
  totalValueLockedUSDUntracked
  liquidityProviderCount
  poolHourData
  poolDayData
  mints
  burns
  swaps
  collects
  ticks
}

type CONCENTRATED_Position {
  id: ID!
  owner: CONCENTRATED_Bytes!
  pool: CONCENTRATED_Pool!
  token0: CONCENTRATED_Token!
  token1: CONCENTRATED_Token!
  tickLower: CONCENTRATED_Tick!
  tickUpper: CONCENTRATED_Tick!
  liquidity: BigInt!
  depositedToken0: CONCENTRATED_BigDecimal!
  depositedToken1: CONCENTRATED_BigDecimal!
  withdrawnToken0: CONCENTRATED_BigDecimal!
  withdrawnToken1: CONCENTRATED_BigDecimal!
  collectedFeesToken0: CONCENTRATED_BigDecimal!
  collectedFeesToken1: CONCENTRATED_BigDecimal!
  transaction: CONCENTRATED_Transaction!
  feeGrowthInside0LastX128: BigInt!
  feeGrowthInside1LastX128: BigInt!
  sourceName: String
}

type CONCENTRATED_PositionSnapshot {
  id: ID!
  owner: CONCENTRATED_Bytes!
  pool: CONCENTRATED_Pool!
  position: CONCENTRATED_Position!
  blockNumber: BigInt!
  timestamp: BigInt!
  liquidity: BigInt!
  depositedToken0: CONCENTRATED_BigDecimal!
  depositedToken1: CONCENTRATED_BigDecimal!
  withdrawnToken0: CONCENTRATED_BigDecimal!
  withdrawnToken1: CONCENTRATED_BigDecimal!
  collectedFeesToken0: CONCENTRATED_BigDecimal!
  collectedFeesToken1: CONCENTRATED_BigDecimal!
  transaction: CONCENTRATED_Transaction!
  feeGrowthInside0LastX128: BigInt!
  feeGrowthInside1LastX128: BigInt!
  sourceName: String
}

input CONCENTRATED_PositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: CONCENTRATED_Bytes
  owner_not: CONCENTRATED_Bytes
  owner_gt: CONCENTRATED_Bytes
  owner_lt: CONCENTRATED_Bytes
  owner_gte: CONCENTRATED_Bytes
  owner_lte: CONCENTRATED_Bytes
  owner_in: [CONCENTRATED_Bytes!]
  owner_not_in: [CONCENTRATED_Bytes!]
  owner_contains: CONCENTRATED_Bytes
  owner_not_contains: CONCENTRATED_Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: CONCENTRATED_Pool_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: CONCENTRATED_Position_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  depositedToken0: CONCENTRATED_BigDecimal
  depositedToken0_not: CONCENTRATED_BigDecimal
  depositedToken0_gt: CONCENTRATED_BigDecimal
  depositedToken0_lt: CONCENTRATED_BigDecimal
  depositedToken0_gte: CONCENTRATED_BigDecimal
  depositedToken0_lte: CONCENTRATED_BigDecimal
  depositedToken0_in: [CONCENTRATED_BigDecimal!]
  depositedToken0_not_in: [CONCENTRATED_BigDecimal!]
  depositedToken1: CONCENTRATED_BigDecimal
  depositedToken1_not: CONCENTRATED_BigDecimal
  depositedToken1_gt: CONCENTRATED_BigDecimal
  depositedToken1_lt: CONCENTRATED_BigDecimal
  depositedToken1_gte: CONCENTRATED_BigDecimal
  depositedToken1_lte: CONCENTRATED_BigDecimal
  depositedToken1_in: [CONCENTRATED_BigDecimal!]
  depositedToken1_not_in: [CONCENTRATED_BigDecimal!]
  withdrawnToken0: CONCENTRATED_BigDecimal
  withdrawnToken0_not: CONCENTRATED_BigDecimal
  withdrawnToken0_gt: CONCENTRATED_BigDecimal
  withdrawnToken0_lt: CONCENTRATED_BigDecimal
  withdrawnToken0_gte: CONCENTRATED_BigDecimal
  withdrawnToken0_lte: CONCENTRATED_BigDecimal
  withdrawnToken0_in: [CONCENTRATED_BigDecimal!]
  withdrawnToken0_not_in: [CONCENTRATED_BigDecimal!]
  withdrawnToken1: CONCENTRATED_BigDecimal
  withdrawnToken1_not: CONCENTRATED_BigDecimal
  withdrawnToken1_gt: CONCENTRATED_BigDecimal
  withdrawnToken1_lt: CONCENTRATED_BigDecimal
  withdrawnToken1_gte: CONCENTRATED_BigDecimal
  withdrawnToken1_lte: CONCENTRATED_BigDecimal
  withdrawnToken1_in: [CONCENTRATED_BigDecimal!]
  withdrawnToken1_not_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken0: CONCENTRATED_BigDecimal
  collectedFeesToken0_not: CONCENTRATED_BigDecimal
  collectedFeesToken0_gt: CONCENTRATED_BigDecimal
  collectedFeesToken0_lt: CONCENTRATED_BigDecimal
  collectedFeesToken0_gte: CONCENTRATED_BigDecimal
  collectedFeesToken0_lte: CONCENTRATED_BigDecimal
  collectedFeesToken0_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken0_not_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken1: CONCENTRATED_BigDecimal
  collectedFeesToken1_not: CONCENTRATED_BigDecimal
  collectedFeesToken1_gt: CONCENTRATED_BigDecimal
  collectedFeesToken1_lt: CONCENTRATED_BigDecimal
  collectedFeesToken1_gte: CONCENTRATED_BigDecimal
  collectedFeesToken1_lte: CONCENTRATED_BigDecimal
  collectedFeesToken1_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken1_not_in: [CONCENTRATED_BigDecimal!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: CONCENTRATED_Transaction_filter
  feeGrowthInside0LastX128: BigInt
  feeGrowthInside0LastX128_not: BigInt
  feeGrowthInside0LastX128_gt: BigInt
  feeGrowthInside0LastX128_lt: BigInt
  feeGrowthInside0LastX128_gte: BigInt
  feeGrowthInside0LastX128_lte: BigInt
  feeGrowthInside0LastX128_in: [BigInt!]
  feeGrowthInside0LastX128_not_in: [BigInt!]
  feeGrowthInside1LastX128: BigInt
  feeGrowthInside1LastX128_not: BigInt
  feeGrowthInside1LastX128_gt: BigInt
  feeGrowthInside1LastX128_lt: BigInt
  feeGrowthInside1LastX128_gte: BigInt
  feeGrowthInside1LastX128_lte: BigInt
  feeGrowthInside1LastX128_in: [BigInt!]
  feeGrowthInside1LastX128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_PositionSnapshot_filter]
  or: [CONCENTRATED_PositionSnapshot_filter]
}

enum CONCENTRATED_PositionSnapshot_orderBy {
  id
  owner
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  position
  position__id
  position__owner
  position__liquidity
  position__depositedToken0
  position__depositedToken1
  position__withdrawnToken0
  position__withdrawnToken1
  position__collectedFeesToken0
  position__collectedFeesToken1
  position__feeGrowthInside0LastX128
  position__feeGrowthInside1LastX128
  blockNumber
  timestamp
  liquidity
  depositedToken0
  depositedToken1
  withdrawnToken0
  withdrawnToken1
  collectedFeesToken0
  collectedFeesToken1
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  feeGrowthInside0LastX128
  feeGrowthInside1LastX128
}

input CONCENTRATED_Position_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: CONCENTRATED_Bytes
  owner_not: CONCENTRATED_Bytes
  owner_gt: CONCENTRATED_Bytes
  owner_lt: CONCENTRATED_Bytes
  owner_gte: CONCENTRATED_Bytes
  owner_lte: CONCENTRATED_Bytes
  owner_in: [CONCENTRATED_Bytes!]
  owner_not_in: [CONCENTRATED_Bytes!]
  owner_contains: CONCENTRATED_Bytes
  owner_not_contains: CONCENTRATED_Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: CONCENTRATED_Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: CONCENTRATED_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: CONCENTRATED_Token_filter
  tickLower: String
  tickLower_not: String
  tickLower_gt: String
  tickLower_lt: String
  tickLower_gte: String
  tickLower_lte: String
  tickLower_in: [String!]
  tickLower_not_in: [String!]
  tickLower_contains: String
  tickLower_contains_nocase: String
  tickLower_not_contains: String
  tickLower_not_contains_nocase: String
  tickLower_starts_with: String
  tickLower_starts_with_nocase: String
  tickLower_not_starts_with: String
  tickLower_not_starts_with_nocase: String
  tickLower_ends_with: String
  tickLower_ends_with_nocase: String
  tickLower_not_ends_with: String
  tickLower_not_ends_with_nocase: String
  tickLower_: CONCENTRATED_Tick_filter
  tickUpper: String
  tickUpper_not: String
  tickUpper_gt: String
  tickUpper_lt: String
  tickUpper_gte: String
  tickUpper_lte: String
  tickUpper_in: [String!]
  tickUpper_not_in: [String!]
  tickUpper_contains: String
  tickUpper_contains_nocase: String
  tickUpper_not_contains: String
  tickUpper_not_contains_nocase: String
  tickUpper_starts_with: String
  tickUpper_starts_with_nocase: String
  tickUpper_not_starts_with: String
  tickUpper_not_starts_with_nocase: String
  tickUpper_ends_with: String
  tickUpper_ends_with_nocase: String
  tickUpper_not_ends_with: String
  tickUpper_not_ends_with_nocase: String
  tickUpper_: CONCENTRATED_Tick_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  depositedToken0: CONCENTRATED_BigDecimal
  depositedToken0_not: CONCENTRATED_BigDecimal
  depositedToken0_gt: CONCENTRATED_BigDecimal
  depositedToken0_lt: CONCENTRATED_BigDecimal
  depositedToken0_gte: CONCENTRATED_BigDecimal
  depositedToken0_lte: CONCENTRATED_BigDecimal
  depositedToken0_in: [CONCENTRATED_BigDecimal!]
  depositedToken0_not_in: [CONCENTRATED_BigDecimal!]
  depositedToken1: CONCENTRATED_BigDecimal
  depositedToken1_not: CONCENTRATED_BigDecimal
  depositedToken1_gt: CONCENTRATED_BigDecimal
  depositedToken1_lt: CONCENTRATED_BigDecimal
  depositedToken1_gte: CONCENTRATED_BigDecimal
  depositedToken1_lte: CONCENTRATED_BigDecimal
  depositedToken1_in: [CONCENTRATED_BigDecimal!]
  depositedToken1_not_in: [CONCENTRATED_BigDecimal!]
  withdrawnToken0: CONCENTRATED_BigDecimal
  withdrawnToken0_not: CONCENTRATED_BigDecimal
  withdrawnToken0_gt: CONCENTRATED_BigDecimal
  withdrawnToken0_lt: CONCENTRATED_BigDecimal
  withdrawnToken0_gte: CONCENTRATED_BigDecimal
  withdrawnToken0_lte: CONCENTRATED_BigDecimal
  withdrawnToken0_in: [CONCENTRATED_BigDecimal!]
  withdrawnToken0_not_in: [CONCENTRATED_BigDecimal!]
  withdrawnToken1: CONCENTRATED_BigDecimal
  withdrawnToken1_not: CONCENTRATED_BigDecimal
  withdrawnToken1_gt: CONCENTRATED_BigDecimal
  withdrawnToken1_lt: CONCENTRATED_BigDecimal
  withdrawnToken1_gte: CONCENTRATED_BigDecimal
  withdrawnToken1_lte: CONCENTRATED_BigDecimal
  withdrawnToken1_in: [CONCENTRATED_BigDecimal!]
  withdrawnToken1_not_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken0: CONCENTRATED_BigDecimal
  collectedFeesToken0_not: CONCENTRATED_BigDecimal
  collectedFeesToken0_gt: CONCENTRATED_BigDecimal
  collectedFeesToken0_lt: CONCENTRATED_BigDecimal
  collectedFeesToken0_gte: CONCENTRATED_BigDecimal
  collectedFeesToken0_lte: CONCENTRATED_BigDecimal
  collectedFeesToken0_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken0_not_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken1: CONCENTRATED_BigDecimal
  collectedFeesToken1_not: CONCENTRATED_BigDecimal
  collectedFeesToken1_gt: CONCENTRATED_BigDecimal
  collectedFeesToken1_lt: CONCENTRATED_BigDecimal
  collectedFeesToken1_gte: CONCENTRATED_BigDecimal
  collectedFeesToken1_lte: CONCENTRATED_BigDecimal
  collectedFeesToken1_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken1_not_in: [CONCENTRATED_BigDecimal!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: CONCENTRATED_Transaction_filter
  feeGrowthInside0LastX128: BigInt
  feeGrowthInside0LastX128_not: BigInt
  feeGrowthInside0LastX128_gt: BigInt
  feeGrowthInside0LastX128_lt: BigInt
  feeGrowthInside0LastX128_gte: BigInt
  feeGrowthInside0LastX128_lte: BigInt
  feeGrowthInside0LastX128_in: [BigInt!]
  feeGrowthInside0LastX128_not_in: [BigInt!]
  feeGrowthInside1LastX128: BigInt
  feeGrowthInside1LastX128_not: BigInt
  feeGrowthInside1LastX128_gt: BigInt
  feeGrowthInside1LastX128_lt: BigInt
  feeGrowthInside1LastX128_gte: BigInt
  feeGrowthInside1LastX128_lte: BigInt
  feeGrowthInside1LastX128_in: [BigInt!]
  feeGrowthInside1LastX128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_Position_filter]
  or: [CONCENTRATED_Position_filter]
}

enum CONCENTRATED_Position_orderBy {
  id
  owner
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  tickLower
  tickLower__id
  tickLower__poolAddress
  tickLower__tickIdx
  tickLower__liquidityGross
  tickLower__liquidityNet
  tickLower__price0
  tickLower__price1
  tickLower__volumeToken0
  tickLower__volumeToken1
  tickLower__volumeUSD
  tickLower__untrackedVolumeUSD
  tickLower__feesUSD
  tickLower__collectedFeesToken0
  tickLower__collectedFeesToken1
  tickLower__collectedFeesUSD
  tickLower__createdAtTimestamp
  tickLower__createdAtBlockNumber
  tickLower__liquidityProviderCount
  tickLower__feeGrowthOutside0X128
  tickLower__feeGrowthOutside1X128
  tickUpper
  tickUpper__id
  tickUpper__poolAddress
  tickUpper__tickIdx
  tickUpper__liquidityGross
  tickUpper__liquidityNet
  tickUpper__price0
  tickUpper__price1
  tickUpper__volumeToken0
  tickUpper__volumeToken1
  tickUpper__volumeUSD
  tickUpper__untrackedVolumeUSD
  tickUpper__feesUSD
  tickUpper__collectedFeesToken0
  tickUpper__collectedFeesToken1
  tickUpper__collectedFeesUSD
  tickUpper__createdAtTimestamp
  tickUpper__createdAtBlockNumber
  tickUpper__liquidityProviderCount
  tickUpper__feeGrowthOutside0X128
  tickUpper__feeGrowthOutside1X128
  liquidity
  depositedToken0
  depositedToken1
  withdrawnToken0
  withdrawnToken1
  collectedFeesToken0
  collectedFeesToken1
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  feeGrowthInside0LastX128
  feeGrowthInside1LastX128
}

type CONCENTRATED_Swap {
  id: ID!
  transaction: CONCENTRATED_Transaction!
  timestamp: BigInt!
  pool: CONCENTRATED_Pool!
  token0: CONCENTRATED_Token!
  token1: CONCENTRATED_Token!
  sender: CONCENTRATED_Bytes!
  recipient: CONCENTRATED_Bytes!
  origin: CONCENTRATED_Bytes!
  amount0: CONCENTRATED_BigDecimal!
  amount1: CONCENTRATED_BigDecimal!
  amountUSD: CONCENTRATED_BigDecimal!
  sqrtPriceX96: BigInt!
  tick: BigInt!
  logIndex: BigInt
  sourceName: String
}

input CONCENTRATED_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: CONCENTRATED_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: CONCENTRATED_Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: CONCENTRATED_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: CONCENTRATED_Token_filter
  sender: CONCENTRATED_Bytes
  sender_not: CONCENTRATED_Bytes
  sender_gt: CONCENTRATED_Bytes
  sender_lt: CONCENTRATED_Bytes
  sender_gte: CONCENTRATED_Bytes
  sender_lte: CONCENTRATED_Bytes
  sender_in: [CONCENTRATED_Bytes!]
  sender_not_in: [CONCENTRATED_Bytes!]
  sender_contains: CONCENTRATED_Bytes
  sender_not_contains: CONCENTRATED_Bytes
  recipient: CONCENTRATED_Bytes
  recipient_not: CONCENTRATED_Bytes
  recipient_gt: CONCENTRATED_Bytes
  recipient_lt: CONCENTRATED_Bytes
  recipient_gte: CONCENTRATED_Bytes
  recipient_lte: CONCENTRATED_Bytes
  recipient_in: [CONCENTRATED_Bytes!]
  recipient_not_in: [CONCENTRATED_Bytes!]
  recipient_contains: CONCENTRATED_Bytes
  recipient_not_contains: CONCENTRATED_Bytes
  origin: CONCENTRATED_Bytes
  origin_not: CONCENTRATED_Bytes
  origin_gt: CONCENTRATED_Bytes
  origin_lt: CONCENTRATED_Bytes
  origin_gte: CONCENTRATED_Bytes
  origin_lte: CONCENTRATED_Bytes
  origin_in: [CONCENTRATED_Bytes!]
  origin_not_in: [CONCENTRATED_Bytes!]
  origin_contains: CONCENTRATED_Bytes
  origin_not_contains: CONCENTRATED_Bytes
  amount0: CONCENTRATED_BigDecimal
  amount0_not: CONCENTRATED_BigDecimal
  amount0_gt: CONCENTRATED_BigDecimal
  amount0_lt: CONCENTRATED_BigDecimal
  amount0_gte: CONCENTRATED_BigDecimal
  amount0_lte: CONCENTRATED_BigDecimal
  amount0_in: [CONCENTRATED_BigDecimal!]
  amount0_not_in: [CONCENTRATED_BigDecimal!]
  amount1: CONCENTRATED_BigDecimal
  amount1_not: CONCENTRATED_BigDecimal
  amount1_gt: CONCENTRATED_BigDecimal
  amount1_lt: CONCENTRATED_BigDecimal
  amount1_gte: CONCENTRATED_BigDecimal
  amount1_lte: CONCENTRATED_BigDecimal
  amount1_in: [CONCENTRATED_BigDecimal!]
  amount1_not_in: [CONCENTRATED_BigDecimal!]
  amountUSD: CONCENTRATED_BigDecimal
  amountUSD_not: CONCENTRATED_BigDecimal
  amountUSD_gt: CONCENTRATED_BigDecimal
  amountUSD_lt: CONCENTRATED_BigDecimal
  amountUSD_gte: CONCENTRATED_BigDecimal
  amountUSD_lte: CONCENTRATED_BigDecimal
  amountUSD_in: [CONCENTRATED_BigDecimal!]
  amountUSD_not_in: [CONCENTRATED_BigDecimal!]
  sqrtPriceX96: BigInt
  sqrtPriceX96_not: BigInt
  sqrtPriceX96_gt: BigInt
  sqrtPriceX96_lt: BigInt
  sqrtPriceX96_gte: BigInt
  sqrtPriceX96_lte: BigInt
  sqrtPriceX96_in: [BigInt!]
  sqrtPriceX96_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_Swap_filter]
  or: [CONCENTRATED_Swap_filter]
}

enum CONCENTRATED_Swap_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  timestamp
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  sender
  recipient
  origin
  amount0
  amount1
  amountUSD
  sqrtPriceX96
  tick
  logIndex
}

type CONCENTRATED_Tick {
  id: ID!
  poolAddress: String
  tickIdx: BigInt!
  pool: CONCENTRATED_Pool!
  liquidityGross: BigInt!
  liquidityNet: BigInt!
  price0: CONCENTRATED_BigDecimal!
  price1: CONCENTRATED_BigDecimal!
  volumeToken0: CONCENTRATED_BigDecimal!
  volumeToken1: CONCENTRATED_BigDecimal!
  volumeUSD: CONCENTRATED_BigDecimal!
  untrackedVolumeUSD: CONCENTRATED_BigDecimal!
  feesUSD: CONCENTRATED_BigDecimal!
  collectedFeesToken0: CONCENTRATED_BigDecimal!
  collectedFeesToken1: CONCENTRATED_BigDecimal!
  collectedFeesUSD: CONCENTRATED_BigDecimal!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  liquidityProviderCount: BigInt!
  feeGrowthOutside0X128: BigInt!
  feeGrowthOutside1X128: BigInt!
  sourceName: String
}

type CONCENTRATED_TickDayData {
  id: ID!
  date: Int!
  pool: CONCENTRATED_Pool!
  tick: CONCENTRATED_Tick!
  liquidityGross: BigInt!
  liquidityNet: BigInt!
  volumeToken0: CONCENTRATED_BigDecimal!
  volumeToken1: CONCENTRATED_BigDecimal!
  volumeUSD: CONCENTRATED_BigDecimal!
  feesUSD: CONCENTRATED_BigDecimal!
  feeGrowthOutside0X128: BigInt!
  feeGrowthOutside1X128: BigInt!
  sourceName: String
}

input CONCENTRATED_TickDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: CONCENTRATED_Pool_filter
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: CONCENTRATED_Tick_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  volumeToken0: CONCENTRATED_BigDecimal
  volumeToken0_not: CONCENTRATED_BigDecimal
  volumeToken0_gt: CONCENTRATED_BigDecimal
  volumeToken0_lt: CONCENTRATED_BigDecimal
  volumeToken0_gte: CONCENTRATED_BigDecimal
  volumeToken0_lte: CONCENTRATED_BigDecimal
  volumeToken0_in: [CONCENTRATED_BigDecimal!]
  volumeToken0_not_in: [CONCENTRATED_BigDecimal!]
  volumeToken1: CONCENTRATED_BigDecimal
  volumeToken1_not: CONCENTRATED_BigDecimal
  volumeToken1_gt: CONCENTRATED_BigDecimal
  volumeToken1_lt: CONCENTRATED_BigDecimal
  volumeToken1_gte: CONCENTRATED_BigDecimal
  volumeToken1_lte: CONCENTRATED_BigDecimal
  volumeToken1_in: [CONCENTRATED_BigDecimal!]
  volumeToken1_not_in: [CONCENTRATED_BigDecimal!]
  volumeUSD: CONCENTRATED_BigDecimal
  volumeUSD_not: CONCENTRATED_BigDecimal
  volumeUSD_gt: CONCENTRATED_BigDecimal
  volumeUSD_lt: CONCENTRATED_BigDecimal
  volumeUSD_gte: CONCENTRATED_BigDecimal
  volumeUSD_lte: CONCENTRATED_BigDecimal
  volumeUSD_in: [CONCENTRATED_BigDecimal!]
  volumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  feesUSD: CONCENTRATED_BigDecimal
  feesUSD_not: CONCENTRATED_BigDecimal
  feesUSD_gt: CONCENTRATED_BigDecimal
  feesUSD_lt: CONCENTRATED_BigDecimal
  feesUSD_gte: CONCENTRATED_BigDecimal
  feesUSD_lte: CONCENTRATED_BigDecimal
  feesUSD_in: [CONCENTRATED_BigDecimal!]
  feesUSD_not_in: [CONCENTRATED_BigDecimal!]
  feeGrowthOutside0X128: BigInt
  feeGrowthOutside0X128_not: BigInt
  feeGrowthOutside0X128_gt: BigInt
  feeGrowthOutside0X128_lt: BigInt
  feeGrowthOutside0X128_gte: BigInt
  feeGrowthOutside0X128_lte: BigInt
  feeGrowthOutside0X128_in: [BigInt!]
  feeGrowthOutside0X128_not_in: [BigInt!]
  feeGrowthOutside1X128: BigInt
  feeGrowthOutside1X128_not: BigInt
  feeGrowthOutside1X128_gt: BigInt
  feeGrowthOutside1X128_lt: BigInt
  feeGrowthOutside1X128_gte: BigInt
  feeGrowthOutside1X128_lte: BigInt
  feeGrowthOutside1X128_in: [BigInt!]
  feeGrowthOutside1X128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_TickDayData_filter]
  or: [CONCENTRATED_TickDayData_filter]
}

enum CONCENTRATED_TickDayData_orderBy {
  id
  date
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  tick
  tick__id
  tick__poolAddress
  tick__tickIdx
  tick__liquidityGross
  tick__liquidityNet
  tick__price0
  tick__price1
  tick__volumeToken0
  tick__volumeToken1
  tick__volumeUSD
  tick__untrackedVolumeUSD
  tick__feesUSD
  tick__collectedFeesToken0
  tick__collectedFeesToken1
  tick__collectedFeesUSD
  tick__createdAtTimestamp
  tick__createdAtBlockNumber
  tick__liquidityProviderCount
  tick__feeGrowthOutside0X128
  tick__feeGrowthOutside1X128
  liquidityGross
  liquidityNet
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
  feeGrowthOutside0X128
  feeGrowthOutside1X128
}

type CONCENTRATED_TickHourData {
  id: ID!
  periodStartUnix: Int!
  pool: CONCENTRATED_Pool!
  tick: CONCENTRATED_Tick!
  liquidityGross: BigInt!
  liquidityNet: BigInt!
  volumeToken0: CONCENTRATED_BigDecimal!
  volumeToken1: CONCENTRATED_BigDecimal!
  volumeUSD: CONCENTRATED_BigDecimal!
  feesUSD: CONCENTRATED_BigDecimal!
  sourceName: String
}

input CONCENTRATED_TickHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  periodStartUnix: Int
  periodStartUnix_not: Int
  periodStartUnix_gt: Int
  periodStartUnix_lt: Int
  periodStartUnix_gte: Int
  periodStartUnix_lte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: CONCENTRATED_Pool_filter
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: CONCENTRATED_Tick_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  volumeToken0: CONCENTRATED_BigDecimal
  volumeToken0_not: CONCENTRATED_BigDecimal
  volumeToken0_gt: CONCENTRATED_BigDecimal
  volumeToken0_lt: CONCENTRATED_BigDecimal
  volumeToken0_gte: CONCENTRATED_BigDecimal
  volumeToken0_lte: CONCENTRATED_BigDecimal
  volumeToken0_in: [CONCENTRATED_BigDecimal!]
  volumeToken0_not_in: [CONCENTRATED_BigDecimal!]
  volumeToken1: CONCENTRATED_BigDecimal
  volumeToken1_not: CONCENTRATED_BigDecimal
  volumeToken1_gt: CONCENTRATED_BigDecimal
  volumeToken1_lt: CONCENTRATED_BigDecimal
  volumeToken1_gte: CONCENTRATED_BigDecimal
  volumeToken1_lte: CONCENTRATED_BigDecimal
  volumeToken1_in: [CONCENTRATED_BigDecimal!]
  volumeToken1_not_in: [CONCENTRATED_BigDecimal!]
  volumeUSD: CONCENTRATED_BigDecimal
  volumeUSD_not: CONCENTRATED_BigDecimal
  volumeUSD_gt: CONCENTRATED_BigDecimal
  volumeUSD_lt: CONCENTRATED_BigDecimal
  volumeUSD_gte: CONCENTRATED_BigDecimal
  volumeUSD_lte: CONCENTRATED_BigDecimal
  volumeUSD_in: [CONCENTRATED_BigDecimal!]
  volumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  feesUSD: CONCENTRATED_BigDecimal
  feesUSD_not: CONCENTRATED_BigDecimal
  feesUSD_gt: CONCENTRATED_BigDecimal
  feesUSD_lt: CONCENTRATED_BigDecimal
  feesUSD_gte: CONCENTRATED_BigDecimal
  feesUSD_lte: CONCENTRATED_BigDecimal
  feesUSD_in: [CONCENTRATED_BigDecimal!]
  feesUSD_not_in: [CONCENTRATED_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_TickHourData_filter]
  or: [CONCENTRATED_TickHourData_filter]
}

enum CONCENTRATED_TickHourData_orderBy {
  id
  periodStartUnix
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  tick
  tick__id
  tick__poolAddress
  tick__tickIdx
  tick__liquidityGross
  tick__liquidityNet
  tick__price0
  tick__price1
  tick__volumeToken0
  tick__volumeToken1
  tick__volumeUSD
  tick__untrackedVolumeUSD
  tick__feesUSD
  tick__collectedFeesToken0
  tick__collectedFeesToken1
  tick__collectedFeesUSD
  tick__createdAtTimestamp
  tick__createdAtBlockNumber
  tick__liquidityProviderCount
  tick__feeGrowthOutside0X128
  tick__feeGrowthOutside1X128
  liquidityGross
  liquidityNet
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
}

input CONCENTRATED_Tick_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolAddress: String
  poolAddress_not: String
  poolAddress_gt: String
  poolAddress_lt: String
  poolAddress_gte: String
  poolAddress_lte: String
  poolAddress_in: [String!]
  poolAddress_not_in: [String!]
  poolAddress_contains: String
  poolAddress_contains_nocase: String
  poolAddress_not_contains: String
  poolAddress_not_contains_nocase: String
  poolAddress_starts_with: String
  poolAddress_starts_with_nocase: String
  poolAddress_not_starts_with: String
  poolAddress_not_starts_with_nocase: String
  poolAddress_ends_with: String
  poolAddress_ends_with_nocase: String
  poolAddress_not_ends_with: String
  poolAddress_not_ends_with_nocase: String
  tickIdx: BigInt
  tickIdx_not: BigInt
  tickIdx_gt: BigInt
  tickIdx_lt: BigInt
  tickIdx_gte: BigInt
  tickIdx_lte: BigInt
  tickIdx_in: [BigInt!]
  tickIdx_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: CONCENTRATED_Pool_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  price0: CONCENTRATED_BigDecimal
  price0_not: CONCENTRATED_BigDecimal
  price0_gt: CONCENTRATED_BigDecimal
  price0_lt: CONCENTRATED_BigDecimal
  price0_gte: CONCENTRATED_BigDecimal
  price0_lte: CONCENTRATED_BigDecimal
  price0_in: [CONCENTRATED_BigDecimal!]
  price0_not_in: [CONCENTRATED_BigDecimal!]
  price1: CONCENTRATED_BigDecimal
  price1_not: CONCENTRATED_BigDecimal
  price1_gt: CONCENTRATED_BigDecimal
  price1_lt: CONCENTRATED_BigDecimal
  price1_gte: CONCENTRATED_BigDecimal
  price1_lte: CONCENTRATED_BigDecimal
  price1_in: [CONCENTRATED_BigDecimal!]
  price1_not_in: [CONCENTRATED_BigDecimal!]
  volumeToken0: CONCENTRATED_BigDecimal
  volumeToken0_not: CONCENTRATED_BigDecimal
  volumeToken0_gt: CONCENTRATED_BigDecimal
  volumeToken0_lt: CONCENTRATED_BigDecimal
  volumeToken0_gte: CONCENTRATED_BigDecimal
  volumeToken0_lte: CONCENTRATED_BigDecimal
  volumeToken0_in: [CONCENTRATED_BigDecimal!]
  volumeToken0_not_in: [CONCENTRATED_BigDecimal!]
  volumeToken1: CONCENTRATED_BigDecimal
  volumeToken1_not: CONCENTRATED_BigDecimal
  volumeToken1_gt: CONCENTRATED_BigDecimal
  volumeToken1_lt: CONCENTRATED_BigDecimal
  volumeToken1_gte: CONCENTRATED_BigDecimal
  volumeToken1_lte: CONCENTRATED_BigDecimal
  volumeToken1_in: [CONCENTRATED_BigDecimal!]
  volumeToken1_not_in: [CONCENTRATED_BigDecimal!]
  volumeUSD: CONCENTRATED_BigDecimal
  volumeUSD_not: CONCENTRATED_BigDecimal
  volumeUSD_gt: CONCENTRATED_BigDecimal
  volumeUSD_lt: CONCENTRATED_BigDecimal
  volumeUSD_gte: CONCENTRATED_BigDecimal
  volumeUSD_lte: CONCENTRATED_BigDecimal
  volumeUSD_in: [CONCENTRATED_BigDecimal!]
  volumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  untrackedVolumeUSD: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_not: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_gt: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_lt: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_gte: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_lte: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_in: [CONCENTRATED_BigDecimal!]
  untrackedVolumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  feesUSD: CONCENTRATED_BigDecimal
  feesUSD_not: CONCENTRATED_BigDecimal
  feesUSD_gt: CONCENTRATED_BigDecimal
  feesUSD_lt: CONCENTRATED_BigDecimal
  feesUSD_gte: CONCENTRATED_BigDecimal
  feesUSD_lte: CONCENTRATED_BigDecimal
  feesUSD_in: [CONCENTRATED_BigDecimal!]
  feesUSD_not_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken0: CONCENTRATED_BigDecimal
  collectedFeesToken0_not: CONCENTRATED_BigDecimal
  collectedFeesToken0_gt: CONCENTRATED_BigDecimal
  collectedFeesToken0_lt: CONCENTRATED_BigDecimal
  collectedFeesToken0_gte: CONCENTRATED_BigDecimal
  collectedFeesToken0_lte: CONCENTRATED_BigDecimal
  collectedFeesToken0_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken0_not_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken1: CONCENTRATED_BigDecimal
  collectedFeesToken1_not: CONCENTRATED_BigDecimal
  collectedFeesToken1_gt: CONCENTRATED_BigDecimal
  collectedFeesToken1_lt: CONCENTRATED_BigDecimal
  collectedFeesToken1_gte: CONCENTRATED_BigDecimal
  collectedFeesToken1_lte: CONCENTRATED_BigDecimal
  collectedFeesToken1_in: [CONCENTRATED_BigDecimal!]
  collectedFeesToken1_not_in: [CONCENTRATED_BigDecimal!]
  collectedFeesUSD: CONCENTRATED_BigDecimal
  collectedFeesUSD_not: CONCENTRATED_BigDecimal
  collectedFeesUSD_gt: CONCENTRATED_BigDecimal
  collectedFeesUSD_lt: CONCENTRATED_BigDecimal
  collectedFeesUSD_gte: CONCENTRATED_BigDecimal
  collectedFeesUSD_lte: CONCENTRATED_BigDecimal
  collectedFeesUSD_in: [CONCENTRATED_BigDecimal!]
  collectedFeesUSD_not_in: [CONCENTRATED_BigDecimal!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  feeGrowthOutside0X128: BigInt
  feeGrowthOutside0X128_not: BigInt
  feeGrowthOutside0X128_gt: BigInt
  feeGrowthOutside0X128_lt: BigInt
  feeGrowthOutside0X128_gte: BigInt
  feeGrowthOutside0X128_lte: BigInt
  feeGrowthOutside0X128_in: [BigInt!]
  feeGrowthOutside0X128_not_in: [BigInt!]
  feeGrowthOutside1X128: BigInt
  feeGrowthOutside1X128_not: BigInt
  feeGrowthOutside1X128_gt: BigInt
  feeGrowthOutside1X128_lt: BigInt
  feeGrowthOutside1X128_gte: BigInt
  feeGrowthOutside1X128_lte: BigInt
  feeGrowthOutside1X128_in: [BigInt!]
  feeGrowthOutside1X128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_Tick_filter]
  or: [CONCENTRATED_Tick_filter]
}

enum CONCENTRATED_Tick_orderBy {
  id
  poolAddress
  tickIdx
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  liquidityGross
  liquidityNet
  price0
  price1
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  feesUSD
  collectedFeesToken0
  collectedFeesToken1
  collectedFeesUSD
  createdAtTimestamp
  createdAtBlockNumber
  liquidityProviderCount
  feeGrowthOutside0X128
  feeGrowthOutside1X128
}

type CONCENTRATED_Token {
  id: ID!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: CONCENTRATED_BigDecimal!
  volumeUSD: CONCENTRATED_BigDecimal!
  untrackedVolumeUSD: CONCENTRATED_BigDecimal!
  feesUSD: CONCENTRATED_BigDecimal!
  txCount: BigInt!
  poolCount: BigInt!
  totalValueLocked: CONCENTRATED_BigDecimal!
  totalValueLockedUSD: CONCENTRATED_BigDecimal!
  totalValueLockedUSDUntracked: CONCENTRATED_BigDecimal!
  derivedETH: CONCENTRATED_BigDecimal!
  whitelistPools(skip: Int = 0, first: Int = 100, orderBy: CONCENTRATED_Pool_orderBy, orderDirection: CONCENTRATED_OrderDirection, where: CONCENTRATED_Pool_filter): [CONCENTRATED_Pool!]!
  tokenDayData(skip: Int = 0, first: Int = 100, orderBy: CONCENTRATED_TokenDayData_orderBy, orderDirection: CONCENTRATED_OrderDirection, where: CONCENTRATED_TokenDayData_filter): [CONCENTRATED_TokenDayData!]!
  sourceName: String
}

type CONCENTRATED_TokenDayData {
  id: ID!
  date: Int!
  token: CONCENTRATED_Token!
  volume: CONCENTRATED_BigDecimal!
  volumeUSD: CONCENTRATED_BigDecimal!
  untrackedVolumeUSD: CONCENTRATED_BigDecimal!
  totalValueLocked: CONCENTRATED_BigDecimal!
  totalValueLockedUSD: CONCENTRATED_BigDecimal!
  priceUSD: CONCENTRATED_BigDecimal!
  feesUSD: CONCENTRATED_BigDecimal!
  open: CONCENTRATED_BigDecimal!
  high: CONCENTRATED_BigDecimal!
  low: CONCENTRATED_BigDecimal!
  close: CONCENTRATED_BigDecimal!
  sourceName: String
}

input CONCENTRATED_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: CONCENTRATED_Token_filter
  volume: CONCENTRATED_BigDecimal
  volume_not: CONCENTRATED_BigDecimal
  volume_gt: CONCENTRATED_BigDecimal
  volume_lt: CONCENTRATED_BigDecimal
  volume_gte: CONCENTRATED_BigDecimal
  volume_lte: CONCENTRATED_BigDecimal
  volume_in: [CONCENTRATED_BigDecimal!]
  volume_not_in: [CONCENTRATED_BigDecimal!]
  volumeUSD: CONCENTRATED_BigDecimal
  volumeUSD_not: CONCENTRATED_BigDecimal
  volumeUSD_gt: CONCENTRATED_BigDecimal
  volumeUSD_lt: CONCENTRATED_BigDecimal
  volumeUSD_gte: CONCENTRATED_BigDecimal
  volumeUSD_lte: CONCENTRATED_BigDecimal
  volumeUSD_in: [CONCENTRATED_BigDecimal!]
  volumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  untrackedVolumeUSD: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_not: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_gt: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_lt: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_gte: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_lte: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_in: [CONCENTRATED_BigDecimal!]
  untrackedVolumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLocked: CONCENTRATED_BigDecimal
  totalValueLocked_not: CONCENTRATED_BigDecimal
  totalValueLocked_gt: CONCENTRATED_BigDecimal
  totalValueLocked_lt: CONCENTRATED_BigDecimal
  totalValueLocked_gte: CONCENTRATED_BigDecimal
  totalValueLocked_lte: CONCENTRATED_BigDecimal
  totalValueLocked_in: [CONCENTRATED_BigDecimal!]
  totalValueLocked_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSD: CONCENTRATED_BigDecimal
  totalValueLockedUSD_not: CONCENTRATED_BigDecimal
  totalValueLockedUSD_gt: CONCENTRATED_BigDecimal
  totalValueLockedUSD_lt: CONCENTRATED_BigDecimal
  totalValueLockedUSD_gte: CONCENTRATED_BigDecimal
  totalValueLockedUSD_lte: CONCENTRATED_BigDecimal
  totalValueLockedUSD_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSD_not_in: [CONCENTRATED_BigDecimal!]
  priceUSD: CONCENTRATED_BigDecimal
  priceUSD_not: CONCENTRATED_BigDecimal
  priceUSD_gt: CONCENTRATED_BigDecimal
  priceUSD_lt: CONCENTRATED_BigDecimal
  priceUSD_gte: CONCENTRATED_BigDecimal
  priceUSD_lte: CONCENTRATED_BigDecimal
  priceUSD_in: [CONCENTRATED_BigDecimal!]
  priceUSD_not_in: [CONCENTRATED_BigDecimal!]
  feesUSD: CONCENTRATED_BigDecimal
  feesUSD_not: CONCENTRATED_BigDecimal
  feesUSD_gt: CONCENTRATED_BigDecimal
  feesUSD_lt: CONCENTRATED_BigDecimal
  feesUSD_gte: CONCENTRATED_BigDecimal
  feesUSD_lte: CONCENTRATED_BigDecimal
  feesUSD_in: [CONCENTRATED_BigDecimal!]
  feesUSD_not_in: [CONCENTRATED_BigDecimal!]
  open: CONCENTRATED_BigDecimal
  open_not: CONCENTRATED_BigDecimal
  open_gt: CONCENTRATED_BigDecimal
  open_lt: CONCENTRATED_BigDecimal
  open_gte: CONCENTRATED_BigDecimal
  open_lte: CONCENTRATED_BigDecimal
  open_in: [CONCENTRATED_BigDecimal!]
  open_not_in: [CONCENTRATED_BigDecimal!]
  high: CONCENTRATED_BigDecimal
  high_not: CONCENTRATED_BigDecimal
  high_gt: CONCENTRATED_BigDecimal
  high_lt: CONCENTRATED_BigDecimal
  high_gte: CONCENTRATED_BigDecimal
  high_lte: CONCENTRATED_BigDecimal
  high_in: [CONCENTRATED_BigDecimal!]
  high_not_in: [CONCENTRATED_BigDecimal!]
  low: CONCENTRATED_BigDecimal
  low_not: CONCENTRATED_BigDecimal
  low_gt: CONCENTRATED_BigDecimal
  low_lt: CONCENTRATED_BigDecimal
  low_gte: CONCENTRATED_BigDecimal
  low_lte: CONCENTRATED_BigDecimal
  low_in: [CONCENTRATED_BigDecimal!]
  low_not_in: [CONCENTRATED_BigDecimal!]
  close: CONCENTRATED_BigDecimal
  close_not: CONCENTRATED_BigDecimal
  close_gt: CONCENTRATED_BigDecimal
  close_lt: CONCENTRATED_BigDecimal
  close_gte: CONCENTRATED_BigDecimal
  close_lte: CONCENTRATED_BigDecimal
  close_in: [CONCENTRATED_BigDecimal!]
  close_not_in: [CONCENTRATED_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_TokenDayData_filter]
  or: [CONCENTRATED_TokenDayData_filter]
}

enum CONCENTRATED_TokenDayData_orderBy {
  id
  date
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__totalSupply
  token__volume
  token__volumeUSD
  token__untrackedVolumeUSD
  token__feesUSD
  token__txCount
  token__poolCount
  token__totalValueLocked
  token__totalValueLockedUSD
  token__totalValueLockedUSDUntracked
  token__derivedETH
  volume
  volumeUSD
  untrackedVolumeUSD
  totalValueLocked
  totalValueLockedUSD
  priceUSD
  feesUSD
  open
  high
  low
  close
}

type CONCENTRATED_TokenHourData {
  id: ID!
  periodStartUnix: Int!
  token: CONCENTRATED_Token!
  volume: CONCENTRATED_BigDecimal!
  volumeUSD: CONCENTRATED_BigDecimal!
  untrackedVolumeUSD: CONCENTRATED_BigDecimal!
  totalValueLocked: CONCENTRATED_BigDecimal!
  totalValueLockedUSD: CONCENTRATED_BigDecimal!
  priceUSD: CONCENTRATED_BigDecimal!
  feesUSD: CONCENTRATED_BigDecimal!
  open: CONCENTRATED_BigDecimal!
  high: CONCENTRATED_BigDecimal!
  low: CONCENTRATED_BigDecimal!
  close: CONCENTRATED_BigDecimal!
  sourceName: String
}

input CONCENTRATED_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  periodStartUnix: Int
  periodStartUnix_not: Int
  periodStartUnix_gt: Int
  periodStartUnix_lt: Int
  periodStartUnix_gte: Int
  periodStartUnix_lte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: CONCENTRATED_Token_filter
  volume: CONCENTRATED_BigDecimal
  volume_not: CONCENTRATED_BigDecimal
  volume_gt: CONCENTRATED_BigDecimal
  volume_lt: CONCENTRATED_BigDecimal
  volume_gte: CONCENTRATED_BigDecimal
  volume_lte: CONCENTRATED_BigDecimal
  volume_in: [CONCENTRATED_BigDecimal!]
  volume_not_in: [CONCENTRATED_BigDecimal!]
  volumeUSD: CONCENTRATED_BigDecimal
  volumeUSD_not: CONCENTRATED_BigDecimal
  volumeUSD_gt: CONCENTRATED_BigDecimal
  volumeUSD_lt: CONCENTRATED_BigDecimal
  volumeUSD_gte: CONCENTRATED_BigDecimal
  volumeUSD_lte: CONCENTRATED_BigDecimal
  volumeUSD_in: [CONCENTRATED_BigDecimal!]
  volumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  untrackedVolumeUSD: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_not: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_gt: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_lt: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_gte: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_lte: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_in: [CONCENTRATED_BigDecimal!]
  untrackedVolumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLocked: CONCENTRATED_BigDecimal
  totalValueLocked_not: CONCENTRATED_BigDecimal
  totalValueLocked_gt: CONCENTRATED_BigDecimal
  totalValueLocked_lt: CONCENTRATED_BigDecimal
  totalValueLocked_gte: CONCENTRATED_BigDecimal
  totalValueLocked_lte: CONCENTRATED_BigDecimal
  totalValueLocked_in: [CONCENTRATED_BigDecimal!]
  totalValueLocked_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSD: CONCENTRATED_BigDecimal
  totalValueLockedUSD_not: CONCENTRATED_BigDecimal
  totalValueLockedUSD_gt: CONCENTRATED_BigDecimal
  totalValueLockedUSD_lt: CONCENTRATED_BigDecimal
  totalValueLockedUSD_gte: CONCENTRATED_BigDecimal
  totalValueLockedUSD_lte: CONCENTRATED_BigDecimal
  totalValueLockedUSD_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSD_not_in: [CONCENTRATED_BigDecimal!]
  priceUSD: CONCENTRATED_BigDecimal
  priceUSD_not: CONCENTRATED_BigDecimal
  priceUSD_gt: CONCENTRATED_BigDecimal
  priceUSD_lt: CONCENTRATED_BigDecimal
  priceUSD_gte: CONCENTRATED_BigDecimal
  priceUSD_lte: CONCENTRATED_BigDecimal
  priceUSD_in: [CONCENTRATED_BigDecimal!]
  priceUSD_not_in: [CONCENTRATED_BigDecimal!]
  feesUSD: CONCENTRATED_BigDecimal
  feesUSD_not: CONCENTRATED_BigDecimal
  feesUSD_gt: CONCENTRATED_BigDecimal
  feesUSD_lt: CONCENTRATED_BigDecimal
  feesUSD_gte: CONCENTRATED_BigDecimal
  feesUSD_lte: CONCENTRATED_BigDecimal
  feesUSD_in: [CONCENTRATED_BigDecimal!]
  feesUSD_not_in: [CONCENTRATED_BigDecimal!]
  open: CONCENTRATED_BigDecimal
  open_not: CONCENTRATED_BigDecimal
  open_gt: CONCENTRATED_BigDecimal
  open_lt: CONCENTRATED_BigDecimal
  open_gte: CONCENTRATED_BigDecimal
  open_lte: CONCENTRATED_BigDecimal
  open_in: [CONCENTRATED_BigDecimal!]
  open_not_in: [CONCENTRATED_BigDecimal!]
  high: CONCENTRATED_BigDecimal
  high_not: CONCENTRATED_BigDecimal
  high_gt: CONCENTRATED_BigDecimal
  high_lt: CONCENTRATED_BigDecimal
  high_gte: CONCENTRATED_BigDecimal
  high_lte: CONCENTRATED_BigDecimal
  high_in: [CONCENTRATED_BigDecimal!]
  high_not_in: [CONCENTRATED_BigDecimal!]
  low: CONCENTRATED_BigDecimal
  low_not: CONCENTRATED_BigDecimal
  low_gt: CONCENTRATED_BigDecimal
  low_lt: CONCENTRATED_BigDecimal
  low_gte: CONCENTRATED_BigDecimal
  low_lte: CONCENTRATED_BigDecimal
  low_in: [CONCENTRATED_BigDecimal!]
  low_not_in: [CONCENTRATED_BigDecimal!]
  close: CONCENTRATED_BigDecimal
  close_not: CONCENTRATED_BigDecimal
  close_gt: CONCENTRATED_BigDecimal
  close_lt: CONCENTRATED_BigDecimal
  close_gte: CONCENTRATED_BigDecimal
  close_lte: CONCENTRATED_BigDecimal
  close_in: [CONCENTRATED_BigDecimal!]
  close_not_in: [CONCENTRATED_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_TokenHourData_filter]
  or: [CONCENTRATED_TokenHourData_filter]
}

enum CONCENTRATED_TokenHourData_orderBy {
  id
  periodStartUnix
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__totalSupply
  token__volume
  token__volumeUSD
  token__untrackedVolumeUSD
  token__feesUSD
  token__txCount
  token__poolCount
  token__totalValueLocked
  token__totalValueLockedUSD
  token__totalValueLockedUSDUntracked
  token__derivedETH
  volume
  volumeUSD
  untrackedVolumeUSD
  totalValueLocked
  totalValueLockedUSD
  priceUSD
  feesUSD
  open
  high
  low
  close
}

input CONCENTRATED_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: CONCENTRATED_BigDecimal
  volume_not: CONCENTRATED_BigDecimal
  volume_gt: CONCENTRATED_BigDecimal
  volume_lt: CONCENTRATED_BigDecimal
  volume_gte: CONCENTRATED_BigDecimal
  volume_lte: CONCENTRATED_BigDecimal
  volume_in: [CONCENTRATED_BigDecimal!]
  volume_not_in: [CONCENTRATED_BigDecimal!]
  volumeUSD: CONCENTRATED_BigDecimal
  volumeUSD_not: CONCENTRATED_BigDecimal
  volumeUSD_gt: CONCENTRATED_BigDecimal
  volumeUSD_lt: CONCENTRATED_BigDecimal
  volumeUSD_gte: CONCENTRATED_BigDecimal
  volumeUSD_lte: CONCENTRATED_BigDecimal
  volumeUSD_in: [CONCENTRATED_BigDecimal!]
  volumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  untrackedVolumeUSD: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_not: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_gt: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_lt: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_gte: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_lte: CONCENTRATED_BigDecimal
  untrackedVolumeUSD_in: [CONCENTRATED_BigDecimal!]
  untrackedVolumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  feesUSD: CONCENTRATED_BigDecimal
  feesUSD_not: CONCENTRATED_BigDecimal
  feesUSD_gt: CONCENTRATED_BigDecimal
  feesUSD_lt: CONCENTRATED_BigDecimal
  feesUSD_gte: CONCENTRATED_BigDecimal
  feesUSD_lte: CONCENTRATED_BigDecimal
  feesUSD_in: [CONCENTRATED_BigDecimal!]
  feesUSD_not_in: [CONCENTRATED_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  poolCount: BigInt
  poolCount_not: BigInt
  poolCount_gt: BigInt
  poolCount_lt: BigInt
  poolCount_gte: BigInt
  poolCount_lte: BigInt
  poolCount_in: [BigInt!]
  poolCount_not_in: [BigInt!]
  totalValueLocked: CONCENTRATED_BigDecimal
  totalValueLocked_not: CONCENTRATED_BigDecimal
  totalValueLocked_gt: CONCENTRATED_BigDecimal
  totalValueLocked_lt: CONCENTRATED_BigDecimal
  totalValueLocked_gte: CONCENTRATED_BigDecimal
  totalValueLocked_lte: CONCENTRATED_BigDecimal
  totalValueLocked_in: [CONCENTRATED_BigDecimal!]
  totalValueLocked_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSD: CONCENTRATED_BigDecimal
  totalValueLockedUSD_not: CONCENTRATED_BigDecimal
  totalValueLockedUSD_gt: CONCENTRATED_BigDecimal
  totalValueLockedUSD_lt: CONCENTRATED_BigDecimal
  totalValueLockedUSD_gte: CONCENTRATED_BigDecimal
  totalValueLockedUSD_lte: CONCENTRATED_BigDecimal
  totalValueLockedUSD_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSD_not_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSDUntracked: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_not: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_gt: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_lt: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_gte: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_lte: CONCENTRATED_BigDecimal
  totalValueLockedUSDUntracked_in: [CONCENTRATED_BigDecimal!]
  totalValueLockedUSDUntracked_not_in: [CONCENTRATED_BigDecimal!]
  derivedETH: CONCENTRATED_BigDecimal
  derivedETH_not: CONCENTRATED_BigDecimal
  derivedETH_gt: CONCENTRATED_BigDecimal
  derivedETH_lt: CONCENTRATED_BigDecimal
  derivedETH_gte: CONCENTRATED_BigDecimal
  derivedETH_lte: CONCENTRATED_BigDecimal
  derivedETH_in: [CONCENTRATED_BigDecimal!]
  derivedETH_not_in: [CONCENTRATED_BigDecimal!]
  whitelistPools: [String!]
  whitelistPools_not: [String!]
  whitelistPools_contains: [String!]
  whitelistPools_contains_nocase: [String!]
  whitelistPools_not_contains: [String!]
  whitelistPools_not_contains_nocase: [String!]
  whitelistPools_: CONCENTRATED_Pool_filter
  tokenDayData_: CONCENTRATED_TokenDayData_filter
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_Token_filter]
  or: [CONCENTRATED_Token_filter]
}

enum CONCENTRATED_Token_orderBy {
  id
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  feesUSD
  txCount
  poolCount
  totalValueLocked
  totalValueLockedUSD
  totalValueLockedUSDUntracked
  derivedETH
  whitelistPools
  tokenDayData
}

type CONCENTRATED_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: CONCENTRATED_Mint_orderBy, orderDirection: CONCENTRATED_OrderDirection, where: CONCENTRATED_Mint_filter): [CONCENTRATED_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: CONCENTRATED_Burn_orderBy, orderDirection: CONCENTRATED_OrderDirection, where: CONCENTRATED_Burn_filter): [CONCENTRATED_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: CONCENTRATED_Swap_orderBy, orderDirection: CONCENTRATED_OrderDirection, where: CONCENTRATED_Swap_filter): [CONCENTRATED_Swap]!
  flashed(skip: Int = 0, first: Int = 100, orderBy: CONCENTRATED_Flash_orderBy, orderDirection: CONCENTRATED_OrderDirection, where: CONCENTRATED_Flash_filter): [CONCENTRATED_Flash]!
  collects(skip: Int = 0, first: Int = 100, orderBy: CONCENTRATED_Collect_orderBy, orderDirection: CONCENTRATED_OrderDirection, where: CONCENTRATED_Collect_filter): [CONCENTRATED_Collect]!
  sourceName: String
}

input CONCENTRATED_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  mints_: CONCENTRATED_Mint_filter
  burns_: CONCENTRATED_Burn_filter
  swaps_: CONCENTRATED_Swap_filter
  flashed_: CONCENTRATED_Flash_filter
  collects_: CONCENTRATED_Collect_filter
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_Transaction_filter]
  or: [CONCENTRATED_Transaction_filter]
}

enum CONCENTRATED_Transaction_orderBy {
  id
  blockNumber
  timestamp
  gasUsed
  gasPrice
  mints
  burns
  swaps
  flashed
  collects
}

type CONCENTRATED_UniswapDayData {
  id: ID!
  date: Int!
  volumeETH: CONCENTRATED_BigDecimal!
  volumeUSD: CONCENTRATED_BigDecimal!
  volumeUSDUntracked: CONCENTRATED_BigDecimal!
  feesUSD: CONCENTRATED_BigDecimal!
  txCount: BigInt!
  tvlUSD: CONCENTRATED_BigDecimal!
  sourceName: String
}

input CONCENTRATED_UniswapDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  volumeETH: CONCENTRATED_BigDecimal
  volumeETH_not: CONCENTRATED_BigDecimal
  volumeETH_gt: CONCENTRATED_BigDecimal
  volumeETH_lt: CONCENTRATED_BigDecimal
  volumeETH_gte: CONCENTRATED_BigDecimal
  volumeETH_lte: CONCENTRATED_BigDecimal
  volumeETH_in: [CONCENTRATED_BigDecimal!]
  volumeETH_not_in: [CONCENTRATED_BigDecimal!]
  volumeUSD: CONCENTRATED_BigDecimal
  volumeUSD_not: CONCENTRATED_BigDecimal
  volumeUSD_gt: CONCENTRATED_BigDecimal
  volumeUSD_lt: CONCENTRATED_BigDecimal
  volumeUSD_gte: CONCENTRATED_BigDecimal
  volumeUSD_lte: CONCENTRATED_BigDecimal
  volumeUSD_in: [CONCENTRATED_BigDecimal!]
  volumeUSD_not_in: [CONCENTRATED_BigDecimal!]
  volumeUSDUntracked: CONCENTRATED_BigDecimal
  volumeUSDUntracked_not: CONCENTRATED_BigDecimal
  volumeUSDUntracked_gt: CONCENTRATED_BigDecimal
  volumeUSDUntracked_lt: CONCENTRATED_BigDecimal
  volumeUSDUntracked_gte: CONCENTRATED_BigDecimal
  volumeUSDUntracked_lte: CONCENTRATED_BigDecimal
  volumeUSDUntracked_in: [CONCENTRATED_BigDecimal!]
  volumeUSDUntracked_not_in: [CONCENTRATED_BigDecimal!]
  feesUSD: CONCENTRATED_BigDecimal
  feesUSD_not: CONCENTRATED_BigDecimal
  feesUSD_gt: CONCENTRATED_BigDecimal
  feesUSD_lt: CONCENTRATED_BigDecimal
  feesUSD_gte: CONCENTRATED_BigDecimal
  feesUSD_lte: CONCENTRATED_BigDecimal
  feesUSD_in: [CONCENTRATED_BigDecimal!]
  feesUSD_not_in: [CONCENTRATED_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tvlUSD: CONCENTRATED_BigDecimal
  tvlUSD_not: CONCENTRATED_BigDecimal
  tvlUSD_gt: CONCENTRATED_BigDecimal
  tvlUSD_lt: CONCENTRATED_BigDecimal
  tvlUSD_gte: CONCENTRATED_BigDecimal
  tvlUSD_lte: CONCENTRATED_BigDecimal
  tvlUSD_in: [CONCENTRATED_BigDecimal!]
  tvlUSD_not_in: [CONCENTRATED_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: CONCENTRATED_BlockChangedFilter
  and: [CONCENTRATED_UniswapDayData_filter]
  or: [CONCENTRATED_UniswapDayData_filter]
}

enum CONCENTRATED_UniswapDayData_orderBy {
  id
  date
  volumeETH
  volumeUSD
  volumeUSDUntracked
  feesUSD
  txCount
  tvlUSD
}

type CONCENTRATED__Block_ {
  """The hash of the block"""
  hash: CONCENTRATED_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: CONCENTRATED_Bytes
  sourceName: String
}

"""The type for the top-level _meta field"""
type CONCENTRATED__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: CONCENTRATED__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
  sourceName: String
}

type UserPosition {
  id: ID!
  pool: String!
  chainId: BigInt!
  balance: BigInt!
  unstakedBalance: BigInt!
  stakedBalance: BigInt!
  sourceName: String
}

type Furo_token {
  id: ID!
  liquidityShares: BigInt!
  symbol: String!
  name: String!
  decimals: Int!
  chainId: Int!
  rebase: Rebase!
  sourceName: String
}

type ChefUserPool {
  id: BigInt!
  pair: String!
  sourceName: String
}

type ChefUser {
  id: ID!
  chainId: BigInt!
  address: String!
  amount: BigInt!
  pool: ChefUserPool
  sourceName: String
}

type RewardToken {
  address: String!
  symbol: String!
  decimals: Int!
  sourceName: String
}

type Incentive {
  chainId: BigInt!
  poolId: String!
  pid: Int!
  type: String!
  apr: BigDecimal!
  rewardPerDay: BigDecimal!
  rewardToken: RewardToken!
  rewarderAddress: String!
  rewarderType: String!
  sourceName: String
}

type Farm {
  id: ID!
  incentives: [Incentive!]!
  chefType: String!
  poolType: String!
  sourceName: String
}

"""Input"""
input Pagination {
  pageIndex: Int! = 0
  pageSize: Int! = 20
}

enum SubgraphType {
  Current
  Pending
}

enum SubgraphStatus {
  Synced
  Syncing
  Failed
}

type Subgraph {
  subgraphName: String
  subgraphId: String
  type: SubgraphType
  status: SubgraphStatus
  startBlock: BigInt
  lastSyncedBlock: BigInt
  chainHeadBlock: BigInt
  hasFailed: Boolean
  nonFatalErrorCount: BigInt
  entityCount: BigInt
  sourceName: String
}

input SubgraphWithNode {
  subgraphName: String!
  nodeUrl: String!
}